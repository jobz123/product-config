import { EventEmitter } from '@angular/core';
import * as THREE from 'three';
import { NgtColor, NgtEuler, NgtEvent, NgtObject3dProps, NgtQuaternion, NgtVector3, UnknownRecord } from '../types';
import { Controller } from './controller';
import * as i0 from "@angular/core";
export declare class NgtObject3dInputsController extends Controller {
    #private;
    name?: string;
    set position(position: NgtVector3 | undefined);
    get position(): NgtVector3 | undefined;
    set rotation(rotation: NgtEuler | undefined);
    get rotation(): NgtEuler | undefined;
    set quaternion(quaternion: NgtQuaternion | undefined);
    get quaternion(): NgtQuaternion | undefined;
    set scale(scale: NgtVector3 | undefined);
    get scale(): NgtVector3 | undefined;
    set color(color: NgtColor | undefined);
    get color(): NgtColor | undefined;
    userData?: UnknownRecord;
    castShadow: boolean;
    receiveShadow: boolean;
    visible: boolean;
    matrixAutoUpdate: boolean;
    dispose?: (() => void) | null;
    raycast?: THREE.Object3D['raycast'] | null;
    appendMode: 'immediate' | 'root' | 'none';
    appendTo?: THREE.Object3D;
    object3dInputsController?: NgtObject3dInputsController;
    click: EventEmitter<NgtEvent<MouseEvent>>;
    contextmenu: EventEmitter<NgtEvent<MouseEvent>>;
    dblclick: EventEmitter<NgtEvent<MouseEvent>>;
    pointerup: EventEmitter<NgtEvent<PointerEvent>>;
    pointerdown: EventEmitter<NgtEvent<PointerEvent>>;
    pointerover: EventEmitter<NgtEvent<PointerEvent>>;
    pointerout: EventEmitter<NgtEvent<PointerEvent>>;
    pointerenter: EventEmitter<NgtEvent<PointerEvent>>;
    pointerleave: EventEmitter<NgtEvent<PointerEvent>>;
    pointermove: EventEmitter<NgtEvent<PointerEvent>>;
    pointermissed: EventEmitter<NgtEvent<PointerEvent>>;
    pointercancel: EventEmitter<NgtEvent<PointerEvent>>;
    wheel: EventEmitter<NgtEvent<WheelEvent>>;
    get props(): string[];
    get controller(): Controller | undefined;
    get object3dProps(): NgtObject3dProps;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtObject3dInputsController, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgtObject3dInputsController, "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-billboard,    ngt-soba-detailed,    ngt-soba-line,    ngt-soba-quadratic-bezier-line,    ngt-soba-cubic-bezier-line,    ngt-soba-orthographic-camera,    ngt-soba-gizmo-helper,    ngt-soba-gizmo-viewport,    ngt-soba-gizmo-axis-head,    ngt-soba-text  ", ["ngtObject3dInputsController"], { "name": "name"; "position": "position"; "rotation": "rotation"; "quaternion": "quaternion"; "scale": "scale"; "color": "color"; "userData": "userData"; "castShadow": "castShadow"; "receiveShadow": "receiveShadow"; "visible": "visible"; "matrixAutoUpdate": "matrixAutoUpdate"; "dispose": "dispose"; "raycast": "raycast"; "appendMode": "appendMode"; "appendTo": "appendTo"; "object3dInputsController": "object3dInputsController"; }, { "click": "click"; "contextmenu": "contextmenu"; "dblclick": "dblclick"; "pointerup": "pointerup"; "pointerdown": "pointerdown"; "pointerover": "pointerover"; "pointerout": "pointerout"; "pointerenter": "pointerenter"; "pointerleave": "pointerleave"; "pointermove": "pointermove"; "pointermissed": "pointermissed"; "pointercancel": "pointercancel"; "wheel": "wheel"; }, never>;
}
export declare class NgtObject3dInputsControllerModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtObject3dInputsControllerModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<NgtObject3dInputsControllerModule, [typeof NgtObject3dInputsController], never, [typeof NgtObject3dInputsController]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<NgtObject3dInputsControllerModule>;
}
export declare const NGT_OBJECT_INPUTS_WATCHED_CONTROLLER: import("@angular/core").InjectionToken<NgtObject3dInputsController>, NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER: import("@angular/core").Provider[];
