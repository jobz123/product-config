import { ChangeDetectorRef, InjectionToken, NgZone, OnChanges, OnInit, Provider, SimpleChanges, Type } from '@angular/core';
import { Observable, ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
export declare abstract class Controller implements OnChanges, OnInit {
    #private;
    protected ngZone: NgZone;
    disabled: boolean;
    abstract get props(): string[];
    abstract get controller(): Controller | undefined;
    readonly change$: ReplaySubject<SimpleChanges>;
    constructor(ngZone: NgZone);
    set readyFn(v: (() => void) | undefined);
    get readyFn(): (() => void) | undefined;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<Controller, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<Controller, never, never, { "disabled": "disabled"; }, {}, never>;
}
export interface CreateControllerTokenFactoryOptions<TController extends Controller> {
    watchedControllerTokenName: string;
    controller: Type<TController>;
    newInstanceOnNull?: boolean;
}
export declare function controllerFactory<TController extends Controller>(newInstanceOnNull: boolean | undefined, controllerType: Type<TController>): (controller: TController | null, changeDetectorRef: ChangeDetectorRef, destroyed: Observable<void>) => TController | null;
export declare function createControllerProviderFactory<TController extends Controller>({ watchedControllerTokenName, controller, newInstanceOnNull, }: CreateControllerTokenFactoryOptions<TController>): [
    InjectionToken<TController>,
    Provider[]
];
