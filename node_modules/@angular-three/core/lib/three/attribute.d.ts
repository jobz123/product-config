import { NgZone, OnChanges, OnDestroy, OnInit } from '@angular/core';
import * as THREE from 'three';
import type { AnyConstructor } from '../types';
import { NgtGeometry } from './geometry';
import * as i0 from "@angular/core";
export declare abstract class NgtAttribute<TAttribute extends THREE.BufferAttribute | THREE.InterleavedBufferAttribute = THREE.BufferAttribute> implements OnInit, OnChanges, OnDestroy {
    #private;
    protected ngZone: NgZone;
    protected geometryDirective: NgtGeometry;
    attach?: THREE.BuiltinShaderAttributeName | string;
    abstract attributeType: AnyConstructor<TAttribute>;
    constructor(ngZone: NgZone, geometryDirective: NgtGeometry);
    protected set attributeArgs(v: unknown | unknown[]);
    ngOnChanges(): void;
    ngOnInit(): void;
    private init;
    ngOnDestroy(): void;
    get attribute(): TAttribute | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtAttribute<any>, [null, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgtAttribute<any>, never, never, { "attach": "attach"; }, {}, never>;
}
