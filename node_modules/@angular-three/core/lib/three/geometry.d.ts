import { EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import * as THREE from 'three';
import type { AnyConstructor, AnyFunction } from '../types';
import * as i0 from "@angular/core";
export declare abstract class NgtGeometry<TGeometry extends THREE.BufferGeometry = THREE.BufferGeometry> implements OnInit, OnDestroy {
    #private;
    protected ngZone: NgZone;
    protected parentObject: AnyFunction<THREE.Object3D>;
    ready: EventEmitter<TGeometry>;
    constructor(ngZone: NgZone, parentObject: AnyFunction<THREE.Object3D>);
    abstract geometryType: AnyConstructor<TGeometry>;
    protected set geometryArgs(v: unknown | unknown[]);
    ngOnInit(): void;
    get geometry(): TGeometry;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtGeometry<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgtGeometry<any>, never, never, {}, { "ready": "ready"; }, never>;
}
