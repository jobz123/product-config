import { EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import * as THREE from 'three';
import { NgtContentMaterialController } from '../controllers/content-material.controller';
import { NgtStore } from '../stores/store';
import type { AnyConstructor, AnyFunction } from '../types';
import * as i0 from "@angular/core";
export declare abstract class NgtMaterial<TMaterialParameters extends THREE.MaterialParameters = THREE.MaterialParameters, TMaterial extends THREE.Material = THREE.Material> implements OnInit, OnDestroy {
    #private;
    protected ngZone: NgZone;
    protected store: NgtStore;
    protected parentObject: AnyFunction<THREE.Object3D>;
    protected contentMaterialController: NgtContentMaterialController;
    ready: EventEmitter<TMaterial>;
    set parameters(v: TMaterialParameters | undefined);
    get parameters(): TMaterialParameters | undefined;
    constructor(ngZone: NgZone, store: NgtStore, parentObject: AnyFunction<THREE.Object3D>, contentMaterialController: NgtContentMaterialController);
    abstract materialType: AnyConstructor<TMaterial>;
    ngOnInit(): void;
    get material(): TMaterial;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtMaterial<any, any>, [null, null, null, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgtMaterial<any, any>, never, never, { "parameters": "parameters"; }, { "ready": "ready"; }, never>;
}
