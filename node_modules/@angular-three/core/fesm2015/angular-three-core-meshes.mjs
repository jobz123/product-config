import * as i1 from '@angular-three/core';
import { NgtCommonMesh, NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER, NGT_OBJECT_TYPE, NgtMaterialGeometryControllerModule, NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, NGT_OBJECT_POST_INIT, NGT_OBJECT_WATCHED_CONTROLLER, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NGT_OBJECT_CONTROLLER_PROVIDER } from '@angular-three/core';
import * as i0 from '@angular/core';
import { Directive, NgModule, Optional, Inject, Input, EventEmitter, Output } from '@angular/core';
import * as THREE from 'three';
import { __classPrivateFieldGet, __classPrivateFieldSet } from 'tslib';
import { requestAnimationFrame } from '@rx-angular/cdk/zone-less';

class NgtMesh extends NgtCommonMesh {
}
NgtMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtMesh, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NgtMesh.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtMesh, selector: "ngt-mesh", providers: [
        { provide: NgtCommonMesh, useExisting: NgtMesh },
        NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,
        { provide: NGT_OBJECT_TYPE, useValue: THREE.Mesh },
    ], exportAs: ["ngtMesh"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtMesh, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-mesh',
                    exportAs: 'ngtMesh',
                    providers: [
                        { provide: NgtCommonMesh, useExisting: NgtMesh },
                        NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,
                        { provide: NGT_OBJECT_TYPE, useValue: THREE.Mesh },
                    ],
                }]
        }] });
class NgtMeshModule {
}
NgtMeshModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtMeshModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtMeshModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtMeshModule, declarations: [NgtMesh], exports: [NgtMesh, NgtMaterialGeometryControllerModule] });
NgtMeshModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtMeshModule, imports: [NgtMaterialGeometryControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtMeshModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtMesh],
                    exports: [NgtMesh, NgtMaterialGeometryControllerModule],
                }]
        }] });

class NgtInstancedMesh extends NgtCommonMesh {
    constructor(materialGeometryController, ngZone) {
        super(materialGeometryController, ngZone);
    }
    set args(value) {
        if (this.materialGeometryController) {
            this.materialGeometryController.meshArgs = value;
        }
    }
}
NgtInstancedMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMesh, deps: [{ token: NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, optional: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgtInstancedMesh.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtInstancedMesh, selector: "ngt-instanced-mesh", inputs: { args: "args" }, providers: [
        { provide: NgtCommonMesh, useExisting: NgtInstancedMesh },
        NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,
        { provide: NGT_OBJECT_TYPE, useValue: THREE.InstancedMesh },
        {
            provide: NGT_OBJECT_POST_INIT,
            useValue: (object) => {
                object.instanceMatrix.setUsage(THREE.DynamicDrawUsage);
            },
        },
    ], exportAs: ["ngtInstancedMesh"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMesh, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-instanced-mesh',
                    exportAs: 'ngtInstancedMesh',
                    providers: [
                        { provide: NgtCommonMesh, useExisting: NgtInstancedMesh },
                        NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,
                        { provide: NGT_OBJECT_TYPE, useValue: THREE.InstancedMesh },
                        {
                            provide: NGT_OBJECT_POST_INIT,
                            useValue: (object) => {
                                object.instanceMatrix.setUsage(THREE.DynamicDrawUsage);
                            },
                        },
                    ],
                }]
        }], ctorParameters: function () {
        return [{ type: i1.NgtMaterialGeometryController, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER]
                    }] }, { type: i0.NgZone }];
    }, propDecorators: { args: [{
                type: Input
            }] } });
class NgtInstancedMeshModule {
}
NgtInstancedMeshModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMeshModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtInstancedMeshModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMeshModule, declarations: [NgtInstancedMesh], exports: [NgtInstancedMesh, NgtMaterialGeometryControllerModule] });
NgtInstancedMeshModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMeshModule, imports: [NgtMaterialGeometryControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMeshModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtInstancedMesh],
                    exports: [NgtInstancedMesh, NgtMaterialGeometryControllerModule],
                }]
        }] });

var _NgtSkeleton_skeleton, _NgtBone_bone;
class NgtSkinnedMesh extends NgtCommonMesh {
    set args(v) {
        if (this.materialGeometryController) {
            this.materialGeometryController.meshArgs = v;
        }
    }
}
NgtSkinnedMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSkinnedMesh, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NgtSkinnedMesh.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSkinnedMesh, selector: "ngt-skinned-mesh", inputs: { args: "args", bindMatrix: "bindMatrix", bindMode: "bindMode" }, providers: [
        { provide: NgtCommonMesh, useExisting: NgtSkinnedMesh },
        NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,
        { provide: NGT_OBJECT_TYPE, useValue: THREE.SkinnedMesh },
    ], exportAs: ["ngtSkinnedMesh"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSkinnedMesh, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-skinned-mesh',
                    exportAs: 'ngtSkinnedMesh',
                    providers: [
                        { provide: NgtCommonMesh, useExisting: NgtSkinnedMesh },
                        NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,
                        { provide: NGT_OBJECT_TYPE, useValue: THREE.SkinnedMesh },
                    ],
                }]
        }], propDecorators: { args: [{
                type: Input
            }], bindMatrix: [{
                type: Input
            }], bindMode: [{
                type: Input
            }] } });
class NgtSkeleton {
    constructor(ngZone, skinnedMesh) {
        this.ngZone = ngZone;
        this.skinnedMesh = skinnedMesh;
        this.ready = new EventEmitter();
        _NgtSkeleton_skeleton.set(this, void 0);
        if (!skinnedMesh) {
            throw new Error('ngt-skeleton must be used within a ngt-skinned-mesh');
        }
    }
    get skeleton() {
        return __classPrivateFieldGet(this, _NgtSkeleton_skeleton, "f");
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            const boneInverses = this.boneInverses
                ? this.boneInverses.map((threeMaxtrix) => {
                    if (threeMaxtrix instanceof THREE.Matrix4)
                        return threeMaxtrix;
                    return new THREE.Matrix4().set(...threeMaxtrix);
                })
                : undefined;
            __classPrivateFieldSet(this, _NgtSkeleton_skeleton, new THREE.Skeleton([], boneInverses), "f");
            this.ready.emit(this.skeleton);
            if (this.skinnedMesh) {
                const bindMatrix = this.skinnedMesh
                    .bindMatrix
                    ? this.skinnedMesh.bindMatrix instanceof THREE.Matrix4
                        ? this.skinnedMesh.bindMatrix
                        : new THREE.Matrix4().set(...this.skinnedMesh.bindMatrix)
                    : undefined;
                this.skinnedMesh.mesh.bind(this.skeleton, bindMatrix);
            }
        });
    }
}
_NgtSkeleton_skeleton = new WeakMap();
NgtSkeleton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSkeleton, deps: [{ token: i0.NgZone }, { token: NgtSkinnedMesh, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NgtSkeleton.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSkeleton, selector: "ngt-skeleton", inputs: { boneInverses: "boneInverses" }, outputs: { ready: "ready" }, exportAs: ["ngtSkeleton"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSkeleton, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-skeleton',
                    exportAs: 'ngtSkeleton',
                }]
        }], ctorParameters: function () {
        return [{ type: i0.NgZone }, { type: NgtSkinnedMesh, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { boneInverses: [{
                type: Input
            }], ready: [{
                type: Output
            }] } });
class NgtBone {
    constructor(objectController, objectInputsController, ngZone, parentSkinnedMesh, parentSkeleton) {
        this.objectController = objectController;
        this.objectInputsController = objectInputsController;
        this.ngZone = ngZone;
        this.parentSkinnedMesh = parentSkinnedMesh;
        this.parentSkeleton = parentSkeleton;
        this.ready = new EventEmitter();
        _NgtBone_bone.set(this, void 0);
        if (!parentSkinnedMesh) {
            throw new Error('ngt-bone must be used within a ngt-skinned-mesh');
        }
        objectInputsController.appendTo = parentSkinnedMesh.mesh;
        objectController.initFn = () => {
            __classPrivateFieldSet(this, _NgtBone_bone, new THREE.Bone(), "f");
            return __classPrivateFieldGet(this, _NgtBone_bone, "f");
        };
        objectController.readyFn = () => {
            this.ready.emit(this.bone);
        };
    }
    get bone() {
        return __classPrivateFieldGet(this, _NgtBone_bone, "f");
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.objectController.init();
            requestAnimationFrame(() => {
                if (this.parentSkeleton && this.parentSkeleton.skeleton) {
                    this.parentSkeleton.skeleton.bones.push(this.bone);
                }
            });
        });
    }
}
_NgtBone_bone = new WeakMap();
NgtBone.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtBone, deps: [{ token: NGT_OBJECT_WATCHED_CONTROLLER }, { token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }, { token: i0.NgZone }, { token: NgtSkinnedMesh, optional: true }, { token: NgtSkeleton, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NgtBone.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtBone, selector: "ngt-bone", outputs: { ready: "ready" }, providers: [NGT_OBJECT_CONTROLLER_PROVIDER], exportAs: ["ngtBone"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtBone, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-bone',
                    exportAs: 'ngtBone',
                    providers: [NGT_OBJECT_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () {
        return [{ type: i1.NgtObject3dController, decorators: [{
                        type: Inject,
                        args: [NGT_OBJECT_WATCHED_CONTROLLER]
                    }] }, { type: i1.NgtObject3dInputsController, decorators: [{
                        type: Inject,
                        args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                    }] }, { type: i0.NgZone }, { type: NgtSkinnedMesh, decorators: [{
                        type: Optional
                    }] }, { type: NgtSkeleton, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { ready: [{
                type: Output
            }] } });
class NgtSkinnedMeshModule {
}
NgtSkinnedMeshModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSkinnedMeshModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSkinnedMeshModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSkinnedMeshModule, declarations: [NgtSkinnedMesh, NgtBone, NgtSkeleton], exports: [NgtSkinnedMesh, NgtBone, NgtSkeleton, NgtMaterialGeometryControllerModule] });
NgtSkinnedMeshModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSkinnedMeshModule, imports: [NgtMaterialGeometryControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSkinnedMeshModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSkinnedMesh, NgtBone, NgtSkeleton],
                    exports: [
                        NgtSkinnedMesh,
                        NgtBone,
                        NgtSkeleton,
                        NgtMaterialGeometryControllerModule,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NgtBone, NgtInstancedMesh, NgtInstancedMeshModule, NgtMesh, NgtMeshModule, NgtSkeleton, NgtSkinnedMesh, NgtSkinnedMeshModule };
//# sourceMappingURL=angular-three-core-meshes.mjs.map
