import { NgModule, Pipe } from '@angular/core';
import { makeColor } from '../utils/make';
import * as i0 from "@angular/core";
export class NgtColorPipe {
    /**
     * ConstructorParameters<typeof THREE.Color> has a limitation on THREE.Color constructor overloads
     */
    transform(args) {
        return makeColor(args);
    }
}
NgtColorPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtColorPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
NgtColorPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtColorPipe, name: "color" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtColorPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'color',
                }]
        }] });
export class NgtColorPipeModule {
}
NgtColorPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtColorPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtColorPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtColorPipeModule, declarations: [NgtColorPipe], exports: [NgtColorPipe] });
NgtColorPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtColorPipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtColorPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtColorPipe],
                    exports: [NgtColorPipe],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2xpYi9waXBlcy9jb2xvci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUc5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUsxQyxNQUFNLE9BQU8sWUFBWTtJQUN2Qjs7T0FFRztJQUNILFNBQVMsQ0FBQyxJQUFjO1FBQ3RCLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBZ0IsQ0FBQztJQUN4QyxDQUFDOzt5R0FOVSxZQUFZO3VHQUFaLFlBQVk7MkZBQVosWUFBWTtrQkFIeEIsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsT0FBTztpQkFDZDs7QUFjRCxNQUFNLE9BQU8sa0JBQWtCOzsrR0FBbEIsa0JBQWtCO2dIQUFsQixrQkFBa0IsaUJBYmxCLFlBQVksYUFBWixZQUFZO2dIQWFaLGtCQUFrQjsyRkFBbEIsa0JBQWtCO2tCQUo5QixRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLFlBQVksQ0FBQztvQkFDNUIsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2lCQUN4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBOZ3RDb2xvciB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IG1ha2VDb2xvciB9IGZyb20gJy4uL3V0aWxzL21ha2UnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdjb2xvcicsXG59KVxuZXhwb3J0IGNsYXNzIE5ndENvbG9yUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAvKipcbiAgICogQ29uc3RydWN0b3JQYXJhbWV0ZXJzPHR5cGVvZiBUSFJFRS5Db2xvcj4gaGFzIGEgbGltaXRhdGlvbiBvbiBUSFJFRS5Db2xvciBjb25zdHJ1Y3RvciBvdmVybG9hZHNcbiAgICovXG4gIHRyYW5zZm9ybShhcmdzOiBOZ3RDb2xvcik6IFRIUkVFLkNvbG9yIHtcbiAgICByZXR1cm4gbWFrZUNvbG9yKGFyZ3MpIGFzIFRIUkVFLkNvbG9yO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05ndENvbG9yUGlwZV0sXG4gIGV4cG9ydHM6IFtOZ3RDb2xvclBpcGVdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3RDb2xvclBpcGVNb2R1bGUge31cbiJdfQ==