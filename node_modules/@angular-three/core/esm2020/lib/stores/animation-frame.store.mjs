var _NgtAnimationFrameStore_instances, _NgtAnimationFrameStore_register, _NgtAnimationFrameStore_unregister;
import { __classPrivateFieldGet } from "tslib";
import { Injectable } from '@angular/core';
import { noop } from 'rxjs';
import { makeId } from '../utils/make-id';
import { EnhancedRxState } from './enhanced-rx-state';
import * as i0 from "@angular/core";
export class NgtAnimationFrameStore extends EnhancedRxState {
    constructor() {
        super();
        _NgtAnimationFrameStore_instances.add(this);
        this.actions = this.create();
        this.set({ animations: {}, subscribers: [], hasPriority: false });
        this.hold(this.select('animations'), (animations) => {
            const subscribers = Object.values(animations);
            subscribers.sort((a, b) => (a.priority || 0) - (b.priority || 0));
            const hasPriority = subscribers.some(({ priority }) => !!priority);
            this.set({ hasPriority, subscribers });
        });
        this.hold(this.actions.animationRecord$, __classPrivateFieldGet(this, _NgtAnimationFrameStore_instances, "m", _NgtAnimationFrameStore_register).bind(this));
        this.hold(this.actions.unsubscriberUuid$, __classPrivateFieldGet(this, _NgtAnimationFrameStore_instances, "m", _NgtAnimationFrameStore_unregister).bind(this));
    }
    register(animationRecord) {
        const uuid = animationRecord.obj?.uuid || makeId();
        this.actions.animationRecord({ ...animationRecord, uuid });
        return uuid;
    }
    ngOnDestroy() {
        this.set({ animations: {} });
        super.ngOnDestroy();
    }
}
_NgtAnimationFrameStore_instances = new WeakSet(), _NgtAnimationFrameStore_register = function _NgtAnimationFrameStore_register({ uuid, ...animationRecord } = {
    uuid: '',
    callback: noop,
}) {
    if (uuid) {
        this.set((state) => {
            return {
                animations: { ...state.animations, [uuid]: animationRecord },
            };
        });
    }
    return (prevRecord, isUnsub) => {
        if ((prevRecord && prevRecord.uuid !== uuid) || isUnsub) {
            __classPrivateFieldGet(this, _NgtAnimationFrameStore_instances, "m", _NgtAnimationFrameStore_unregister).call(this, uuid);
        }
    };
}, _NgtAnimationFrameStore_unregister = function _NgtAnimationFrameStore_unregister(uuid) {
    if (!uuid)
        return;
    this.set((state) => {
        const { [uuid]: _, ...animations } = state.animations;
        return { animations };
    });
};
NgtAnimationFrameStore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtAnimationFrameStore, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgtAnimationFrameStore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtAnimationFrameStore });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtAnimationFrameStore, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWZyYW1lLnN0b3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL3N0b3Jlcy9hbmltYXRpb24tZnJhbWUuc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFNUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFHdEQsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGVBTTNDO0lBU0M7UUFDRSxLQUFLLEVBQUUsQ0FBQzs7UUFUVixZQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBVXRCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFbEUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDbEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM5QyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLHVCQUFBLElBQUksMkVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsdUJBQUEsSUFBSSw2RUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFsQkQsUUFBUSxDQUFDLGVBQW1DO1FBQzFDLE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsR0FBRyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMzRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFnREQsV0FBVztRQUNULElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM3QixLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7Z0lBbENDLEVBQUUsSUFBSSxFQUFFLEdBQUcsZUFBZSxLQUE0QztJQUNwRSxJQUFJLEVBQUUsRUFBRTtJQUNSLFFBQVEsRUFBRSxJQUFJO0NBQ2Y7SUFFRCxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNqQixPQUFPO2dCQUNMLFVBQVUsRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLGVBQWUsRUFBRTthQUM3RCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sQ0FDTCxVQUErRCxFQUMvRCxPQUFnQixFQUNoQixFQUFFO1FBQ0YsSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLE9BQU8sRUFBRTtZQUN2RCx1QkFBQSxJQUFJLDZFQUFZLE1BQWhCLElBQUksRUFBYSxJQUFJLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUMsQ0FBQztBQUNKLENBQUMsbUZBRVcsSUFBWTtJQUN0QixJQUFJLENBQUMsSUFBSTtRQUFFLE9BQU87SUFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ2pCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQzttSEEzRFUsc0JBQXNCO3VIQUF0QixzQkFBc0I7MkZBQXRCLHNCQUFzQjtrQkFEbEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5ndEFuaW1hdGlvbkZyYW1lU3RvcmVTdGF0ZSwgTmd0QW5pbWF0aW9uUmVjb3JkIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgbWFrZUlkIH0gZnJvbSAnLi4vdXRpbHMvbWFrZS1pZCc7XG5pbXBvcnQgeyBFbmhhbmNlZFJ4U3RhdGUgfSBmcm9tICcuL2VuaGFuY2VkLXJ4LXN0YXRlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5ndEFuaW1hdGlvbkZyYW1lU3RvcmUgZXh0ZW5kcyBFbmhhbmNlZFJ4U3RhdGU8XG4gIE5ndEFuaW1hdGlvbkZyYW1lU3RvcmVTdGF0ZSxcbiAge1xuICAgIGFuaW1hdGlvblJlY29yZDogTmd0QW5pbWF0aW9uUmVjb3JkICYgeyB1dWlkOiBzdHJpbmcgfTtcbiAgICB1bnN1YnNjcmliZXJVdWlkOiBzdHJpbmc7XG4gIH1cbj4ge1xuICBhY3Rpb25zID0gdGhpcy5jcmVhdGUoKTtcblxuICByZWdpc3RlcihhbmltYXRpb25SZWNvcmQ6IE5ndEFuaW1hdGlvblJlY29yZCkge1xuICAgIGNvbnN0IHV1aWQgPSBhbmltYXRpb25SZWNvcmQub2JqPy51dWlkIHx8IG1ha2VJZCgpO1xuICAgIHRoaXMuYWN0aW9ucy5hbmltYXRpb25SZWNvcmQoeyAuLi5hbmltYXRpb25SZWNvcmQsIHV1aWQgfSk7XG4gICAgcmV0dXJuIHV1aWQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2V0KHsgYW5pbWF0aW9uczoge30sIHN1YnNjcmliZXJzOiBbXSwgaGFzUHJpb3JpdHk6IGZhbHNlIH0pO1xuXG4gICAgdGhpcy5ob2xkKHRoaXMuc2VsZWN0KCdhbmltYXRpb25zJyksIChhbmltYXRpb25zKSA9PiB7XG4gICAgICBjb25zdCBzdWJzY3JpYmVycyA9IE9iamVjdC52YWx1ZXMoYW5pbWF0aW9ucyk7XG4gICAgICBzdWJzY3JpYmVycy5zb3J0KChhLCBiKSA9PiAoYS5wcmlvcml0eSB8fCAwKSAtIChiLnByaW9yaXR5IHx8IDApKTtcbiAgICAgIGNvbnN0IGhhc1ByaW9yaXR5ID0gc3Vic2NyaWJlcnMuc29tZSgoeyBwcmlvcml0eSB9KSA9PiAhIXByaW9yaXR5KTtcbiAgICAgIHRoaXMuc2V0KHsgaGFzUHJpb3JpdHksIHN1YnNjcmliZXJzIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuaG9sZCh0aGlzLmFjdGlvbnMuYW5pbWF0aW9uUmVjb3JkJCwgdGhpcy4jcmVnaXN0ZXIuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5ob2xkKHRoaXMuYWN0aW9ucy51bnN1YnNjcmliZXJVdWlkJCwgdGhpcy4jdW5yZWdpc3Rlci5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gICNyZWdpc3RlcihcbiAgICB7IHV1aWQsIC4uLmFuaW1hdGlvblJlY29yZCB9OiBOZ3RBbmltYXRpb25SZWNvcmQgJiB7IHV1aWQ6IHN0cmluZyB9ID0ge1xuICAgICAgdXVpZDogJycsXG4gICAgICBjYWxsYmFjazogbm9vcCxcbiAgICB9XG4gICkge1xuICAgIGlmICh1dWlkKSB7XG4gICAgICB0aGlzLnNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhbmltYXRpb25zOiB7IC4uLnN0YXRlLmFuaW1hdGlvbnMsIFt1dWlkXTogYW5pbWF0aW9uUmVjb3JkIH0sXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgcHJldlJlY29yZDogKE5ndEFuaW1hdGlvblJlY29yZCAmIHsgdXVpZDogc3RyaW5nIH0pIHwgdW5kZWZpbmVkLFxuICAgICAgaXNVbnN1YjogYm9vbGVhblxuICAgICkgPT4ge1xuICAgICAgaWYgKChwcmV2UmVjb3JkICYmIHByZXZSZWNvcmQudXVpZCAhPT0gdXVpZCkgfHwgaXNVbnN1Yikge1xuICAgICAgICB0aGlzLiN1bnJlZ2lzdGVyKHV1aWQpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAjdW5yZWdpc3Rlcih1dWlkOiBzdHJpbmcpIHtcbiAgICBpZiAoIXV1aWQpIHJldHVybjtcbiAgICB0aGlzLnNldCgoc3RhdGUpID0+IHtcbiAgICAgIGNvbnN0IHsgW3V1aWRdOiBfLCAuLi5hbmltYXRpb25zIH0gPSBzdGF0ZS5hbmltYXRpb25zO1xuICAgICAgcmV0dXJuIHsgYW5pbWF0aW9ucyB9O1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zZXQoeyBhbmltYXRpb25zOiB7fSB9KTtcbiAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICB9XG59XG4iXX0=