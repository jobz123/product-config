import { Injectable } from '@angular/core';
import { clearTimeout, setTimeout } from '@rx-angular/cdk/zone-less';
import { EnhancedRxState } from './enhanced-rx-state';
import { NgtStore } from './store';
import * as i0 from "@angular/core";
import * as i1 from "./store";
let performanceTimeout = undefined;
export class NgtPerformanceStore extends EnhancedRxState {
    constructor(store) {
        super();
        this.connect(store.select('performance'));
    }
    regress() {
        const { current, min, debounce } = this.get();
        // Clear timeout
        if (performanceTimeout)
            clearTimeout(performanceTimeout);
        // Set lower bound performance
        if (current !== min)
            this.set({ min });
        // Go back to upper bound performance after a while unless something regresses meanwhile
        performanceTimeout = setTimeout(() => {
            this.set({ current: this.get('max') });
        }, debounce);
    }
}
NgtPerformanceStore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtPerformanceStore, deps: [{ token: i1.NgtStore }], target: i0.ɵɵFactoryTarget.Injectable });
NgtPerformanceStore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtPerformanceStore });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtPerformanceStore, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NgtStore }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2Uuc3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvc3RvcmVzL3BlcmZvcm1hbmNlLnN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVyRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7O0FBRW5DLElBQUksa0JBQWtCLEdBQThDLFNBQVMsQ0FBQztBQUc5RSxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsZUFBK0I7SUFDdEUsWUFBWSxLQUFlO1FBQ3pCLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELE9BQU87UUFDTCxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDOUMsZ0JBQWdCO1FBQ2hCLElBQUksa0JBQWtCO1lBQUUsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDekQsOEJBQThCO1FBQzlCLElBQUksT0FBTyxLQUFLLEdBQUc7WUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2Qyx3RkFBd0Y7UUFDeEYsa0JBQWtCLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNmLENBQUM7O2dIQWhCVSxtQkFBbUI7b0hBQW5CLG1CQUFtQjsyRkFBbkIsbUJBQW1CO2tCQUQvQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY2xlYXJUaW1lb3V0LCBzZXRUaW1lb3V0IH0gZnJvbSAnQHJ4LWFuZ3VsYXIvY2RrL3pvbmUtbGVzcyc7XG5pbXBvcnQgeyBOZ3RQZXJmb3JtYW5jZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEVuaGFuY2VkUnhTdGF0ZSB9IGZyb20gJy4vZW5oYW5jZWQtcngtc3RhdGUnO1xuaW1wb3J0IHsgTmd0U3RvcmUgfSBmcm9tICcuL3N0b3JlJztcblxubGV0IHBlcmZvcm1hbmNlVGltZW91dDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3RQZXJmb3JtYW5jZVN0b3JlIGV4dGVuZHMgRW5oYW5jZWRSeFN0YXRlPE5ndFBlcmZvcm1hbmNlPiB7XG4gIGNvbnN0cnVjdG9yKHN0b3JlOiBOZ3RTdG9yZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jb25uZWN0KHN0b3JlLnNlbGVjdCgncGVyZm9ybWFuY2UnKSk7XG4gIH1cblxuICByZWdyZXNzKCkge1xuICAgIGNvbnN0IHsgY3VycmVudCwgbWluLCBkZWJvdW5jZSB9ID0gdGhpcy5nZXQoKTtcbiAgICAvLyBDbGVhciB0aW1lb3V0XG4gICAgaWYgKHBlcmZvcm1hbmNlVGltZW91dCkgY2xlYXJUaW1lb3V0KHBlcmZvcm1hbmNlVGltZW91dCk7XG4gICAgLy8gU2V0IGxvd2VyIGJvdW5kIHBlcmZvcm1hbmNlXG4gICAgaWYgKGN1cnJlbnQgIT09IG1pbikgdGhpcy5zZXQoeyBtaW4gfSk7XG4gICAgLy8gR28gYmFjayB0byB1cHBlciBib3VuZCBwZXJmb3JtYW5jZSBhZnRlciBhIHdoaWxlIHVubGVzcyBzb21ldGhpbmcgcmVncmVzc2VzIG1lYW53aGlsZVxuICAgIHBlcmZvcm1hbmNlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zZXQoeyBjdXJyZW50OiB0aGlzLmdldCgnbWF4JykgfSk7XG4gICAgfSwgZGVib3VuY2UpO1xuICB9XG59XG4iXX0=