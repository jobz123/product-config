import { Directive } from '@angular/core';
import { createSideEffectObservable, RxState } from '@rx-angular/state';
import { catchError, EMPTY, noop, Subject, tap } from 'rxjs';
import * as i0 from "@angular/core";
function actionProxyHandler(subjects, transforms) {
    return {
        get(_, property) {
            const prop = property;
            // the user wants to get a observable
            if (prop.toString().split('').pop() === '$') {
                const propName = prop.toString().slice(0, -1);
                subjects[propName] = subjects[propName] || new Subject();
                return subjects[propName];
            }
            // the user wants to get a dispatcher function
            return (args) => {
                subjects[prop] = subjects[prop] || new Subject();
                const val = transforms && transforms[prop]
                    ? transforms[prop](args)
                    : args;
                subjects[prop].next(val);
            };
        },
        set() {
            throw new Error('No setters available. To emit call the property name.');
        },
    };
}
export class EnhancedRxState extends RxState {
    constructor() {
        super(...arguments);
        this.subjects = {};
        this.effect$ = createSideEffectObservable();
        this.effectSubscription = this.effect$.subscribe();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.effectSubscription.unsubscribe();
        this.destroy();
    }
    create(transforms) {
        return new Proxy({}, actionProxyHandler(this.subjects, transforms));
    }
    destroy() {
        for (const subjectsKey in this.subjects) {
            this.subjects[subjectsKey].complete();
        }
    }
    holdEffect(obsOrObsWithSideEffect, sideEffectFn) {
        let cleanupFn = noop;
        let firstRun = false;
        let latestValue = undefined;
        const sideEffect = obsOrObsWithSideEffect.pipe(catchError((_) => EMPTY));
        this.effect$.nextEffectObservable(sideEffect.pipe(tap({
            next: (value) => {
                if (cleanupFn && firstRun) {
                    cleanupFn(latestValue, false);
                }
                const cleanUpOrVoid = sideEffectFn(value, firstRun);
                if (cleanUpOrVoid) {
                    cleanupFn = cleanUpOrVoid;
                }
                latestValue = value;
                if (!firstRun) {
                    firstRun = true;
                }
            },
            unsubscribe: () => {
                if (cleanupFn) {
                    cleanupFn(latestValue, true);
                }
            },
        })));
    }
}
EnhancedRxState.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: EnhancedRxState, deps: null, target: i0.ɵɵFactoryTarget.Directive });
EnhancedRxState.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: EnhancedRxState, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: EnhancedRxState, decorators: [{
            type: Directive
        }] });
export function capitalize(str) {
    return (str.charAt(0).toUpperCase() + str.slice(1));
}
//# sourceMappingURL=data:application/json;base64,