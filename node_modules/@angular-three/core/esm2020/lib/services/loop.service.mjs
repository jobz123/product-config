var _NgtLoopService_running, _NgtLoopService_repeat, _NgtLoopService_frames;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { requestAnimationFrame } from '@rx-angular/cdk/zone-less';
import { NgtAnimationFrameStore } from '../stores/animation-frame.store';
import { NgtStore } from '../stores/store';
import * as i0 from "@angular/core";
import * as i1 from "../stores/store";
import * as i2 from "../stores/animation-frame.store";
export class NgtLoopService {
    constructor(store, animationFrameStore, ngZone) {
        this.store = store;
        this.animationFrameStore = animationFrameStore;
        this.ngZone = ngZone;
        _NgtLoopService_running.set(this, false);
        _NgtLoopService_repeat.set(this, void 0);
        _NgtLoopService_frames.set(this, 1);
    }
    render(timestamp, state, animationFrameState) {
        return this.ngZone.runOutsideAngular(() => {
            const { clock, frameloop, camera, scene, renderer, mouse, size, viewport, } = state;
            const { subscribers, hasPriority } = animationFrameState;
            if (renderer) {
                let delta = clock.getDelta();
                // In frameloop='never' mode, clock times are updated using the provided timestamp
                if (frameloop === 'never' && typeof timestamp === 'number') {
                    delta = timestamp - clock.elapsedTime;
                    clock.oldTime = clock.elapsedTime;
                    clock.elapsedTime = timestamp;
                }
                const renderState = {
                    clock,
                    camera,
                    scene,
                    renderer,
                    mouse,
                    size,
                    viewport,
                    delta,
                };
                for (const subscriber of subscribers) {
                    subscriber.callback(renderState, subscriber.obj);
                }
                if (!hasPriority) {
                    renderer.render(scene, camera);
                }
            }
            __classPrivateFieldSet(this, _NgtLoopService_frames, Math.max(0, __classPrivateFieldGet(this, _NgtLoopService_frames, "f") - 1), "f");
            return state.frameloop === 'always' ? 1 : __classPrivateFieldGet(this, _NgtLoopService_frames, "f");
        });
    }
    loop(timestamp) {
        return this.ngZone.runOutsideAngular(() => {
            __classPrivateFieldSet(this, _NgtLoopService_running, true, "f");
            __classPrivateFieldSet(this, _NgtLoopService_repeat, 0, "f");
            const state = this.store.get();
            if (state.ready && (state.frameloop === 'always' || __classPrivateFieldGet(this, _NgtLoopService_frames, "f") > 0)) {
                __classPrivateFieldSet(this, _NgtLoopService_repeat, __classPrivateFieldGet(this, _NgtLoopService_repeat, "f") + this.render(timestamp, state, this.animationFrameStore.get()), "f");
            }
            if (__classPrivateFieldGet(this, _NgtLoopService_repeat, "f") > 0)
                return requestAnimationFrame(this.loop.bind(this));
            __classPrivateFieldSet(this, _NgtLoopService_running, false, "f");
            return;
        });
    }
    invalidate(state = this.store.get()) {
        if (state.vr) {
            state.renderer?.setAnimationLoop((timestamp) => {
                this.render(timestamp, this.store.get(), this.animationFrameStore.get());
            });
            return;
        }
        if (!state.ready || state.frameloop === 'never')
            return;
        // Increase frames, do not go higher than 60
        __classPrivateFieldSet(this, _NgtLoopService_frames, Math.min(60, __classPrivateFieldGet(this, _NgtLoopService_frames, "f") + 1), "f");
        // If the render-loop isn't active, start it
        if (!__classPrivateFieldGet(this, _NgtLoopService_running, "f")) {
            __classPrivateFieldSet(this, _NgtLoopService_running, true, "f");
            requestAnimationFrame(this.loop.bind(this));
        }
    }
}
_NgtLoopService_running = new WeakMap(), _NgtLoopService_repeat = new WeakMap(), _NgtLoopService_frames = new WeakMap();
NgtLoopService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtLoopService, deps: [{ token: i1.NgtStore }, { token: i2.NgtAnimationFrameStore }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
NgtLoopService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtLoopService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtLoopService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NgtStore }, { type: i2.NgtAnimationFrameStore }, { type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9vcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL3NlcnZpY2VzL2xvb3Auc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUkzQyxNQUFNLE9BQU8sY0FBYztJQUt6QixZQUNVLEtBQWUsRUFDZixtQkFBMkMsRUFDM0MsTUFBYztRQUZkLFVBQUssR0FBTCxLQUFLLENBQVU7UUFDZix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXdCO1FBQzNDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFQeEIsa0NBQVcsS0FBSyxFQUFDO1FBQ2pCLHlDQUFpQjtRQUNqQixpQ0FBVSxDQUFDLEVBQUM7SUFNVCxDQUFDO0lBRUosTUFBTSxDQUNKLFNBQWlCLEVBQ2pCLEtBQWUsRUFDZixtQkFBZ0Q7UUFFaEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUN4QyxNQUFNLEVBQ0osS0FBSyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFDUixLQUFLLEVBQ0wsSUFBSSxFQUNKLFFBQVEsR0FDVCxHQUFHLEtBQUssQ0FBQztZQUNWLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLEdBQUcsbUJBQW1CLENBQUM7WUFFekQsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUM3QixrRkFBa0Y7Z0JBQ2xG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QzlDLDRDQUE0QztRQUM1QyxJQUFJLENBQUMsdUJBQUEsSUFBSSwrQkFBUyxFQUFFO1lBQ2xCLHVCQUFBLElBQUksMkJBQVksSUFBSSxNQUFBLENBQUM7WUFDckIscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7OzsyR0F6R1UsY0FBYzsrR0FBZCxjQUFjOzJGQUFkLGNBQWM7a0JBRDFCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHJlcXVlc3RBbmltYXRpb25GcmFtZSB9IGZyb20gJ0ByeC1hbmd1bGFyL2Nkay96b25lLWxlc3MnO1xuaW1wb3J0IHsgTmd0QW5pbWF0aW9uRnJhbWVTdG9yZSB9IGZyb20gJy4uL3N0b3Jlcy9hbmltYXRpb24tZnJhbWUuc3RvcmUnO1xuaW1wb3J0IHsgTmd0U3RvcmUgfSBmcm9tICcuLi9zdG9yZXMvc3RvcmUnO1xuaW1wb3J0IHsgTmd0QW5pbWF0aW9uRnJhbWVTdG9yZVN0YXRlLCBOZ3RSZW5kZXIsIE5ndFN0YXRlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd0TG9vcFNlcnZpY2Uge1xuICAjcnVubmluZyA9IGZhbHNlO1xuICAjcmVwZWF0PzogbnVtYmVyO1xuICAjZnJhbWVzID0gMTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHN0b3JlOiBOZ3RTdG9yZSxcbiAgICBwcml2YXRlIGFuaW1hdGlvbkZyYW1lU3RvcmU6IE5ndEFuaW1hdGlvbkZyYW1lU3RvcmUsXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZVxuICApIHt9XG5cbiAgcmVuZGVyKFxuICAgIHRpbWVzdGFtcDogbnVtYmVyLFxuICAgIHN0YXRlOiBOZ3RTdGF0ZSxcbiAgICBhbmltYXRpb25GcmFtZVN0YXRlOiBOZ3RBbmltYXRpb25GcmFtZVN0b3JlU3RhdGVcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjbG9jayxcbiAgICAgICAgZnJhbWVsb29wLFxuICAgICAgICBjYW1lcmEsXG4gICAgICAgIHNjZW5lLFxuICAgICAgICByZW5kZXJlcixcbiAgICAgICAgbW91c2UsXG4gICAgICAgIHNpemUsXG4gICAgICAgIHZpZXdwb3J0LFxuICAgICAgfSA9IHN0YXRlO1xuICAgICAgY29uc3QgeyBzdWJzY3JpYmVycywgaGFzUHJpb3JpdHkgfSA9IGFuaW1hdGlvbkZyYW1lU3RhdGU7XG5cbiAgICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgICBsZXQgZGVsdGEgPSBjbG9jay5nZXREZWx0YSgpO1xuICAgICAgICAvLyBJbiBmcmFtZWxvb3A9J25ldmVyJyBtb2RlLCBjbG9jayB0aW1lcyBhcmUgdXBkYXRlZCB1c2luZyB0aGUgcHJvdmlkZWQgdGltZXN0YW1wXG4gICAgICAgIGlmIChmcmFtZWxvb3AgPT09ICduZXZlcicgJiYgdHlwZW9mIHRpbWVzdGFtcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBkZWx0YSA9IHRpbWVzdGFtcCAtIGNsb2NrLmVsYXBzZWRUaW1lO1xuICAgICAgICAgIGNsb2NrLm9sZFRpbWUgPSBjbG9jay5lbGFwc2VkVGltZTtcbiAgICAgICAgICBjbG9jay5lbGFwc2VkVGltZSA9IHRpbWVzdGFtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlbmRlclN0YXRlID0ge1xuICAgICAgICAgIGNsb2NrLFxuICAgICAgICAgIGNhbWVyYSxcbiAgICAgICAgICBzY2VuZSxcbiAgICAgICAgICByZW5kZXJlcixcbiAgICAgICAgICBtb3VzZSxcbiAgICAgICAgICBzaXplLFxuICAgICAgICAgIHZpZXdwb3J0LFxuICAgICAgICAgIGRlbHRhLFxuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAoY29uc3Qgc3Vic2NyaWJlciBvZiBzdWJzY3JpYmVycykge1xuICAgICAgICAgIHN1YnNjcmliZXIuY2FsbGJhY2socmVuZGVyU3RhdGUgYXMgTmd0UmVuZGVyLCBzdWJzY3JpYmVyLm9iaik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWhhc1ByaW9yaXR5KSB7XG4gICAgICAgICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lISwgY2FtZXJhISk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy4jZnJhbWVzID0gTWF0aC5tYXgoMCwgdGhpcy4jZnJhbWVzIC0gMSk7XG4gICAgICByZXR1cm4gc3RhdGUuZnJhbWVsb29wID09PSAnYWx3YXlzJyA/IDEgOiB0aGlzLiNmcmFtZXM7XG4gICAgfSk7XG4gIH1cblxuICBsb29wKHRpbWVzdGFtcDogbnVtYmVyKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy4jcnVubmluZyA9IHRydWU7XG4gICAgICB0aGlzLiNyZXBlYXQgPSAwO1xuXG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0KCk7XG4gICAgICBpZiAoc3RhdGUucmVhZHkgJiYgKHN0YXRlLmZyYW1lbG9vcCA9PT0gJ2Fsd2F5cycgfHwgdGhpcy4jZnJhbWVzID4gMCkpIHtcbiAgICAgICAgdGhpcy4jcmVwZWF0ICs9IHRoaXMucmVuZGVyKFxuICAgICAgICAgIHRpbWVzdGFtcCxcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lU3RvcmUuZ2V0KClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuI3JlcGVhdCA+IDApIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5sb29wLmJpbmQodGhpcykpO1xuXG4gICAgICB0aGlzLiNydW5uaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfSk7XG4gIH1cblxuICBpbnZhbGlkYXRlKHN0YXRlOiBOZ3RTdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0KCkpIHtcbiAgICBpZiAoc3RhdGUudnIpIHtcbiAgICAgIHN0YXRlLnJlbmRlcmVyPy5zZXRBbmltYXRpb25Mb29wKCh0aW1lc3RhbXApID0+IHtcbiAgICAgICAgdGhpcy5yZW5kZXIoXG4gICAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICAgIHRoaXMuc3RvcmUuZ2V0KCksXG4gICAgICAgICAgdGhpcy5hbmltYXRpb25GcmFtZVN0b3JlLmdldCgpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXN0YXRlLnJlYWR5IHx8IHN0YXRlLmZyYW1lbG9vcCA9PT0gJ25ldmVyJykgcmV0dXJuO1xuXG4gICAgLy8gSW5jcmVhc2UgZnJhbWVzLCBkbyBub3QgZ28gaGlnaGVyIHRoYW4gNjBcbiAgICB0aGlzLiNmcmFtZXMgPSBNYXRoLm1pbig2MCwgdGhpcy4jZnJhbWVzICsgMSk7XG4gICAgLy8gSWYgdGhlIHJlbmRlci1sb29wIGlzbid0IGFjdGl2ZSwgc3RhcnQgaXRcbiAgICBpZiAoIXRoaXMuI3J1bm5pbmcpIHtcbiAgICAgIHRoaXMuI3J1bm5pbmcgPSB0cnVlO1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMubG9vcC5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==