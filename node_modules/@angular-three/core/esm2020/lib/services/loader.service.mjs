import { Injectable } from '@angular/core';
import { catchError, defer, forkJoin, map, of, ReplaySubject, share, tap, throwError, } from 'rxjs';
import { buildGraph } from '../utils/build-graph';
import * as i0 from "@angular/core";
export class NgtLoaderService {
    constructor() {
        this.cached = new Map();
    }
    use(loaderConstructor, input, extensions, onProgress) {
        const keys = (Array.isArray(input) ? input : [input]);
        const loader = new loaderConstructor();
        if (extensions) {
            extensions(loader);
        }
        const results$ = forkJoin(keys.map((key) => {
            if (this.cached.has(key)) {
                return of(this.cached.get(key));
            }
            return defer(() => loader.loadAsync(key, onProgress)).pipe(tap((data) => {
                if (data.scene) {
                    Object.assign(data, buildGraph(data.scene));
                }
                this.cached.set(key, data);
            }), catchError((err) => {
                console.error(`Error loading ${key}: ${err.message}`);
                return throwError(err);
            }));
        }));
        return defer(() => Array.isArray(input)
            ? results$
            : results$.pipe(map((results) => results[0]))).pipe(share({
            connector: () => new ReplaySubject(),
            resetOnRefCountZero: true,
            resetOnError: true,
        }));
    }
    ngOnDestroy() {
        this.cached.clear();
    }
}
NgtLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtLoaderService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgtLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvc2VydmljZXMvbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsVUFBVSxFQUNWLEtBQUssRUFDTCxRQUFRLEVBQ1IsR0FBRyxFQUVILEVBQUUsRUFDRixhQUFhLEVBQ2IsS0FBSyxFQUNMLEdBQUcsRUFDSCxVQUFVLEdBQ1gsTUFBTSxNQUFNLENBQUM7QUFTZCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBS2xELE1BQU0sT0FBTyxnQkFBZ0I7SUFIN0I7UUFJbUIsV0FBTSxHQUFHLElBQUksR0FBRyxFQUEyQixDQUFDO0tBdUQ5RDtJQXJEQyxHQUFHLENBQ0QsaUJBQXlELEVBQ3pELEtBQVcsRUFDWCxVQUE2QixFQUM3QixVQUEyQztRQUkzQyxNQUFNLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBYSxDQUFDO1FBQ2xFLE1BQU0sTUFBTSxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztRQUN2QyxJQUFJLFVBQVUsRUFBRTtZQUNkLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwQjtRQUVELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2YsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDeEIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNqQztZQUVELE9BQU8sS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN4RCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDWCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ2QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFvQixDQUFDLENBQUMsQ0FBQztpQkFDNUQ7Z0JBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLGlCQUFpQixHQUFHLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ3RELE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7UUFDSixDQUFDLENBQUMsQ0FDc0UsQ0FBQztRQUUzRSxPQUFPLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FDaEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDbEIsQ0FBQyxDQUFDLFFBQVE7WUFDVixDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2hELENBQUMsSUFBSSxDQUNKLEtBQUssQ0FBQztZQUNKLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLGFBQWEsRUFBRTtZQUNwQyxtQkFBbUIsRUFBRSxJQUFJO1lBQ3pCLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUMsQ0FHbUUsQ0FBQztJQUMxRSxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7NkdBdkRVLGdCQUFnQjtpSEFBaEIsZ0JBQWdCLGNBRmYsTUFBTTsyRkFFUCxnQkFBZ0I7a0JBSDVCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBjYXRjaEVycm9yLFxuICBkZWZlcixcbiAgZm9ya0pvaW4sXG4gIG1hcCxcbiAgT2JzZXJ2YWJsZSxcbiAgb2YsXG4gIFJlcGxheVN1YmplY3QsXG4gIHNoYXJlLFxuICB0YXAsXG4gIHRocm93RXJyb3IsXG59IGZyb20gJ3J4anMnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHR5cGUgeyBHTFRGIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2xvYWRlcnMvR0xURkxvYWRlcic7XG5pbXBvcnQgdHlwZSB7XG4gIEJyYW5jaGluZ1JldHVybixcbiAgTG9hZGVyRXh0ZW5zaW9ucyxcbiAgTmd0TG9hZGVyUmVzdWx0LFxuICBOZ3RPYmplY3RNYXAsXG59IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGJ1aWxkR3JhcGggfSBmcm9tICcuLi91dGlscy9idWlsZC1ncmFwaCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3RMb2FkZXJTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSByZWFkb25seSBjYWNoZWQgPSBuZXcgTWFwPHN0cmluZywgQnJhbmNoaW5nUmV0dXJuPigpO1xuXG4gIHVzZTxUUmV0dXJuVHlwZSwgVFVybCBleHRlbmRzIHN0cmluZyB8IHN0cmluZ1tdPihcbiAgICBsb2FkZXJDb25zdHJ1Y3RvcjogbmV3ICgpID0+IE5ndExvYWRlclJlc3VsdDxUUmV0dXJuVHlwZT4sXG4gICAgaW5wdXQ6IFRVcmwsXG4gICAgZXh0ZW5zaW9ucz86IExvYWRlckV4dGVuc2lvbnMsXG4gICAgb25Qcm9ncmVzcz86IChldmVudDogUHJvZ3Jlc3NFdmVudCkgPT4gdm9pZFxuICApOiBUVXJsIGV4dGVuZHMgYW55W11cbiAgICA/IE9ic2VydmFibGU8QnJhbmNoaW5nUmV0dXJuPFRSZXR1cm5UeXBlLCBHTFRGLCBHTFRGICYgTmd0T2JqZWN0TWFwPltdPlxuICAgIDogT2JzZXJ2YWJsZTxCcmFuY2hpbmdSZXR1cm48VFJldHVyblR5cGUsIEdMVEYsIEdMVEYgJiBOZ3RPYmplY3RNYXA+PiB7XG4gICAgY29uc3Qga2V5cyA9IChBcnJheS5pc0FycmF5KGlucHV0KSA/IGlucHV0IDogW2lucHV0XSkgYXMgc3RyaW5nW107XG4gICAgY29uc3QgbG9hZGVyID0gbmV3IGxvYWRlckNvbnN0cnVjdG9yKCk7XG4gICAgaWYgKGV4dGVuc2lvbnMpIHtcbiAgICAgIGV4dGVuc2lvbnMobG9hZGVyKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHRzJCA9IGZvcmtKb2luKFxuICAgICAga2V5cy5tYXAoKGtleSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5jYWNoZWQuaGFzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gb2YodGhpcy5jYWNoZWQuZ2V0KGtleSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmVyKCgpID0+IGxvYWRlci5sb2FkQXN5bmMoa2V5LCBvblByb2dyZXNzKSkucGlwZShcbiAgICAgICAgICB0YXAoKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGlmIChkYXRhLnNjZW5lKSB7XG4gICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZGF0YSwgYnVpbGRHcmFwaChkYXRhLnNjZW5lIGFzIFRIUkVFLlNjZW5lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNhY2hlZC5zZXQoa2V5LCBkYXRhKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGxvYWRpbmcgJHtrZXl9OiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyKTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApIGFzIE9ic2VydmFibGU8QnJhbmNoaW5nUmV0dXJuPFRSZXR1cm5UeXBlLCBHTFRGLCBHTFRGICYgTmd0T2JqZWN0TWFwPltdPjtcblxuICAgIHJldHVybiBkZWZlcigoKSA9PlxuICAgICAgQXJyYXkuaXNBcnJheShpbnB1dClcbiAgICAgICAgPyByZXN1bHRzJFxuICAgICAgICA6IHJlc3VsdHMkLnBpcGUobWFwKChyZXN1bHRzKSA9PiByZXN1bHRzWzBdKSlcbiAgICApLnBpcGUoXG4gICAgICBzaGFyZSh7XG4gICAgICAgIGNvbm5lY3RvcjogKCkgPT4gbmV3IFJlcGxheVN1YmplY3QoKSxcbiAgICAgICAgcmVzZXRPblJlZkNvdW50WmVybzogdHJ1ZSxcbiAgICAgICAgcmVzZXRPbkVycm9yOiB0cnVlLFxuICAgICAgfSlcbiAgICApIGFzIFRVcmwgZXh0ZW5kcyBhbnlbXVxuICAgICAgPyBPYnNlcnZhYmxlPEJyYW5jaGluZ1JldHVybjxUUmV0dXJuVHlwZSwgR0xURiwgR0xURiAmIE5ndE9iamVjdE1hcD5bXT5cbiAgICAgIDogT2JzZXJ2YWJsZTxCcmFuY2hpbmdSZXR1cm48VFJldHVyblR5cGUsIEdMVEYsIEdMVEYgJiBOZ3RPYmplY3RNYXA+PjtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuY2FjaGVkLmNsZWFyKCk7XG4gIH1cbn1cbiJdfQ==