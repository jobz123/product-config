var _NgtHelper_helper, _NgtHelper_helperArgs;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Directive, EventEmitter, Inject, NgZone, Output, } from '@angular/core';
import { NGT_OBJECT_WATCHED_CONTROLLER, NgtObject3dController, } from '../controllers/object-3d.controller';
import * as i0 from "@angular/core";
import * as i1 from "../controllers/object-3d.controller";
export class NgtHelper {
    constructor(objectController, ngZone) {
        this.objectController = objectController;
        this.ngZone = ngZone;
        this.ready = new EventEmitter();
        _NgtHelper_helper.set(this, void 0);
        _NgtHelper_helperArgs.set(this, []);
        objectController.initFn = () => {
            __classPrivateFieldSet(this, _NgtHelper_helper, new this.helperType(...__classPrivateFieldGet(this, _NgtHelper_helperArgs, "f")), "f");
            return __classPrivateFieldGet(this, _NgtHelper_helper, "f");
        };
        objectController.readyFn = () => {
            this.ready.emit(this.helper);
        };
    }
    set helperArgs(v) {
        __classPrivateFieldSet(this, _NgtHelper_helperArgs, Array.isArray(v) ? v : [v], "f");
        this.ngZone.runOutsideAngular(() => {
            this.objectController.init();
        });
    }
    ngOnChanges() {
        this.ngZone.runOutsideAngular(() => {
            this.objectController.init();
        });
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (!__classPrivateFieldGet(this, _NgtHelper_helper, "f")) {
                this.objectController.init();
            }
        });
    }
    get helper() {
        return __classPrivateFieldGet(this, _NgtHelper_helper, "f");
    }
}
_NgtHelper_helper = new WeakMap(), _NgtHelper_helperArgs = new WeakMap();
NgtHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtHelper, deps: [{ token: NGT_OBJECT_WATCHED_CONTROLLER }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgtHelper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtHelper, outputs: { ready: "ready" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtHelper, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.NgtObject3dController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_WATCHED_CONTROLLER]
                }] }, { type: i0.NgZone }]; }, propDecorators: { ready: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL3RocmVlL2hlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLE1BQU0sRUFDTixNQUFNLEVBR04sTUFBTSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFDTCw2QkFBNkIsRUFDN0IscUJBQXFCLEdBQ3RCLE1BQU0scUNBQXFDLENBQUM7OztBQUk3QyxNQUFNLE9BQWdCLFNBQVM7SUFnQjdCLFlBRVksZ0JBQXVDLEVBQ3ZDLE1BQWM7UUFEZCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXVCO1FBQ3ZDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFoQmhCLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBSTlDLG9DQUFrQjtRQUNsQixnQ0FBeUIsRUFBRSxFQUFDO1FBYTFCLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDN0IsdUJBQUEsSUFBSSxxQkFBVyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyx1QkFBQSxJQUFJLDZCQUFZLENBQUMsTUFBQSxDQUFDO1lBQ3hELE9BQU8sdUJBQUEsSUFBSSx5QkFBUSxDQUFDO1FBQ3RCLENBQUMsQ0FBQztRQUVGLGdCQUFnQixDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7WUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQztJQUNKLENBQUM7SUFwQkQsSUFBYyxVQUFVLENBQUMsQ0FBc0I7UUFDN0MsdUJBQUEsSUFBSSx5QkFBZSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQUEsQ0FBQztRQUM5QyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBaUJELFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksQ0FBQyx1QkFBQSxJQUFJLHlCQUFRLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUM5QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sdUJBQUEsSUFBSSx5QkFBUSxDQUFDO0lBQ3RCLENBQUM7OztzR0EvQ21CLFNBQVMsa0JBaUJuQiw2QkFBNkI7MEZBakJuQixTQUFTOzJGQUFULFNBQVM7a0JBRDlCLFNBQVM7OzBCQWtCTCxNQUFNOzJCQUFDLDZCQUE2QjtpRUFkN0IsS0FBSztzQkFBZCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFdmVudEVtaXR0ZXIsXG4gIEluamVjdCxcbiAgTmdab25lLFxuICBPbkNoYW5nZXMsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7XG4gIE5HVF9PQkpFQ1RfV0FUQ0hFRF9DT05UUk9MTEVSLFxuICBOZ3RPYmplY3QzZENvbnRyb2xsZXIsXG59IGZyb20gJy4uL2NvbnRyb2xsZXJzL29iamVjdC0zZC5jb250cm9sbGVyJztcbmltcG9ydCB7IEFueUNvbnN0cnVjdG9yIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOZ3RIZWxwZXI8VEhlbHBlciBleHRlbmRzIFRIUkVFLk9iamVjdDNEPlxuICBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzXG57XG4gIEBPdXRwdXQoKSByZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8VEhlbHBlcj4oKTtcblxuICBhYnN0cmFjdCBoZWxwZXJUeXBlOiBBbnlDb25zdHJ1Y3RvcjxUSGVscGVyPjtcblxuICAjaGVscGVyITogVEhlbHBlcjtcbiAgI2hlbHBlckFyZ3M6IHVua25vd25bXSA9IFtdO1xuICBwcm90ZWN0ZWQgc2V0IGhlbHBlckFyZ3ModjogdW5rbm93biB8IHVua25vd25bXSkge1xuICAgIHRoaXMuI2hlbHBlckFyZ3MgPSBBcnJheS5pc0FycmF5KHYpID8gdiA6IFt2XTtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLm9iamVjdENvbnRyb2xsZXIuaW5pdCgpO1xuICAgIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChOR1RfT0JKRUNUX1dBVENIRURfQ09OVFJPTExFUilcbiAgICBwcm90ZWN0ZWQgb2JqZWN0Q29udHJvbGxlcjogTmd0T2JqZWN0M2RDb250cm9sbGVyLFxuICAgIHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZVxuICApIHtcbiAgICBvYmplY3RDb250cm9sbGVyLmluaXRGbiA9ICgpID0+IHtcbiAgICAgIHRoaXMuI2hlbHBlciA9IG5ldyB0aGlzLmhlbHBlclR5cGUoLi4udGhpcy4jaGVscGVyQXJncyk7XG4gICAgICByZXR1cm4gdGhpcy4jaGVscGVyO1xuICAgIH07XG5cbiAgICBvYmplY3RDb250cm9sbGVyLnJlYWR5Rm4gPSAoKSA9PiB7XG4gICAgICB0aGlzLnJlYWR5LmVtaXQodGhpcy5oZWxwZXIpO1xuICAgIH07XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLm9iamVjdENvbnRyb2xsZXIuaW5pdCgpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLiNoZWxwZXIpIHtcbiAgICAgICAgdGhpcy5vYmplY3RDb250cm9sbGVyLmluaXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGdldCBoZWxwZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2hlbHBlcjtcbiAgfVxufVxuIl19