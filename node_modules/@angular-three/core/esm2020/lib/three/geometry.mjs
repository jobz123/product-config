var _NgtGeometry_instances, _NgtGeometry_geometryArgs, _NgtGeometry_init, _NgtGeometry_assign, _NgtGeometry_construct, _NgtGeometry_geometry;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Directive, EventEmitter, Inject, NgZone, Output, } from '@angular/core';
import { requestAnimationFrame } from '@rx-angular/cdk/zone-less';
import { NGT_OBJECT_3D } from '../di/object3d';
import * as i0 from "@angular/core";
export class NgtGeometry {
    constructor(ngZone, parentObject) {
        this.ngZone = ngZone;
        this.parentObject = parentObject;
        _NgtGeometry_instances.add(this);
        this.ready = new EventEmitter();
        _NgtGeometry_geometryArgs.set(this, []);
        _NgtGeometry_geometry.set(this, void 0);
    }
    set geometryArgs(v) {
        __classPrivateFieldSet(this, _NgtGeometry_geometryArgs, Array.isArray(v) ? v : [v], "f");
        this.ngZone.runOutsideAngular(() => {
            __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_init).call(this);
        });
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (!this.geometry) {
                __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_init).call(this);
            }
        });
    }
    get geometry() {
        return __classPrivateFieldGet(this, _NgtGeometry_geometry, "f");
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.geometry) {
                this.geometry.dispose();
            }
        });
    }
}
_NgtGeometry_geometryArgs = new WeakMap(), _NgtGeometry_geometry = new WeakMap(), _NgtGeometry_instances = new WeakSet(), _NgtGeometry_init = function _NgtGeometry_init() {
    // geometry has changed. reconstruct
    if (this.geometry) {
        // cleanup
        if (this.parentObject) {
            const object3d = this.parentObject;
            if (object3d.geometry) {
                object3d.geometry.dispose();
            }
        }
        // reconstruct
        __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_construct).call(this);
        __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_assign).call(this);
    }
    else {
        __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_construct).call(this);
        __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_assign).call(this);
    }
}, _NgtGeometry_assign = function _NgtGeometry_assign() {
    requestAnimationFrame(() => {
        const parentObject = this.parentObject();
        if (parentObject) {
            parentObject.geometry = this.geometry;
        }
    });
}, _NgtGeometry_construct = function _NgtGeometry_construct() {
    __classPrivateFieldSet(this, _NgtGeometry_geometry, new this.geometryType(...__classPrivateFieldGet(this, _NgtGeometry_geometryArgs, "f")), "f");
    this.ready.emit(this.geometry);
};
NgtGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtGeometry, deps: [{ token: i0.NgZone }, { token: NGT_OBJECT_3D }], target: i0.ɵɵFactoryTarget.Directive });
NgtGeometry.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtGeometry, outputs: { ready: "ready" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtGeometry, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_3D]
                }] }]; }, propDecorators: { ready: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbWV0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvdGhyZWUvZ2VvbWV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sTUFBTSxFQUdOLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBSS9DLE1BQU0sT0FBZ0IsV0FBVztJQU0vQixZQUNZLE1BQWMsRUFDUyxZQUF5QztRQURoRSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ1MsaUJBQVksR0FBWixZQUFZLENBQTZCOztRQUpsRSxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQWEsQ0FBQztRQVNoRCxvQ0FBMkIsRUFBRSxFQUFDO1FBa0Q5Qix3Q0FBc0I7SUF0RG5CLENBQUM7SUFLSixJQUFjLFlBQVksQ0FBQyxDQUFzQjtRQUMvQyx1QkFBQSxJQUFJLDZCQUFpQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQUEsQ0FBQztRQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyx1QkFBQSxJQUFJLGlEQUFNLE1BQVYsSUFBSSxDQUFRLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xCLHVCQUFBLElBQUksaURBQU0sTUFBVixJQUFJLENBQVEsQ0FBQzthQUNkO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBcUNELElBQUksUUFBUTtRQUNWLE9BQU8sdUJBQUEsSUFBSSw2QkFBVSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDakMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7SUE1Q0Msb0NBQW9DO0lBQ3BDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNqQixVQUFVO1FBQ1YsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUF3QyxDQUFDO1lBQy9ELElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRTtnQkFDcEIsUUFBUSxDQUFDLFFBQWlDLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDdkQ7U0FDRjtRQUVELGNBQWM7UUFDZCx1QkFBQSxJQUFJLHNEQUFXLE1BQWYsSUFBSSxDQUFhLENBQUM7UUFDbEIsdUJBQUEsSUFBSSxtREFBUSxNQUFaLElBQUksQ0FBVSxDQUFDO0tBQ2hCO1NBQU07UUFDTCx1QkFBQSxJQUFJLHNEQUFXLE1BQWYsSUFBSSxDQUFhLENBQUM7UUFDbEIsdUJBQUEsSUFBSSxtREFBUSxNQUFaLElBQUksQ0FBVSxDQUFDO0tBQ2hCO0FBQ0gsQ0FBQztJQUdDLHFCQUFxQixDQUFDLEdBQUcsRUFBRTtRQUN6QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFnQixDQUFDO1FBQ3ZELElBQUksWUFBWSxFQUFFO1lBQ2hCLFlBQVksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN2QztJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztJQUdDLHVCQUFBLElBQUkseUJBQWEsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsdUJBQUEsSUFBSSxpQ0FBYyxDQUFDLE1BQUEsQ0FBQztJQUM5RCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakMsQ0FBQzt3R0E3RG1CLFdBQVcsd0NBUXJCLGFBQWE7NEZBUkgsV0FBVzsyRkFBWCxXQUFXO2tCQURoQyxTQUFTOzswQkFTTCxNQUFNOzJCQUFDLGFBQWE7NENBSmIsS0FBSztzQkFBZCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFdmVudEVtaXR0ZXIsXG4gIEluamVjdCxcbiAgTmdab25lLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHJlcXVlc3RBbmltYXRpb25GcmFtZSB9IGZyb20gJ0ByeC1hbmd1bGFyL2Nkay96b25lLWxlc3MnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgTkdUX09CSkVDVF8zRCB9IGZyb20gJy4uL2RpL29iamVjdDNkJztcbmltcG9ydCB0eXBlIHsgQW55Q29uc3RydWN0b3IsIEFueUZ1bmN0aW9uLCBVbmtub3duUmVjb3JkIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOZ3RHZW9tZXRyeTxcbiAgVEdlb21ldHJ5IGV4dGVuZHMgVEhSRUUuQnVmZmVyR2VvbWV0cnkgPSBUSFJFRS5CdWZmZXJHZW9tZXRyeVxuPiBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95XG57XG4gIEBPdXRwdXQoKSByZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8VEdlb21ldHJ5PigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZSxcbiAgICBASW5qZWN0KE5HVF9PQkpFQ1RfM0QpIHByb3RlY3RlZCBwYXJlbnRPYmplY3Q6IEFueUZ1bmN0aW9uPFRIUkVFLk9iamVjdDNEPlxuICApIHt9XG5cbiAgYWJzdHJhY3QgZ2VvbWV0cnlUeXBlOiBBbnlDb25zdHJ1Y3RvcjxUR2VvbWV0cnk+O1xuXG4gICNnZW9tZXRyeUFyZ3M6IHVua25vd25bXSA9IFtdO1xuICBwcm90ZWN0ZWQgc2V0IGdlb21ldHJ5QXJncyh2OiB1bmtub3duIHwgdW5rbm93bltdKSB7XG4gICAgdGhpcy4jZ2VvbWV0cnlBcmdzID0gQXJyYXkuaXNBcnJheSh2KSA/IHYgOiBbdl07XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy4jaW5pdCgpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmdlb21ldHJ5KSB7XG4gICAgICAgIHRoaXMuI2luaXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gICNpbml0KCkge1xuICAgIC8vIGdlb21ldHJ5IGhhcyBjaGFuZ2VkLiByZWNvbnN0cnVjdFxuICAgIGlmICh0aGlzLmdlb21ldHJ5KSB7XG4gICAgICAvLyBjbGVhbnVwXG4gICAgICBpZiAodGhpcy5wYXJlbnRPYmplY3QpIHtcbiAgICAgICAgY29uc3Qgb2JqZWN0M2QgPSB0aGlzLnBhcmVudE9iamVjdCBhcyB1bmtub3duIGFzIFVua25vd25SZWNvcmQ7XG4gICAgICAgIGlmIChvYmplY3QzZC5nZW9tZXRyeSkge1xuICAgICAgICAgIChvYmplY3QzZC5nZW9tZXRyeSBhcyBUSFJFRS5CdWZmZXJHZW9tZXRyeSkuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHJlY29uc3RydWN0XG4gICAgICB0aGlzLiNjb25zdHJ1Y3QoKTtcbiAgICAgIHRoaXMuI2Fzc2lnbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiNjb25zdHJ1Y3QoKTtcbiAgICAgIHRoaXMuI2Fzc2lnbigpO1xuICAgIH1cbiAgfVxuXG4gICNhc3NpZ24oKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGNvbnN0IHBhcmVudE9iamVjdCA9IHRoaXMucGFyZW50T2JqZWN0KCkgYXMgVEhSRUUuTWVzaDtcbiAgICAgIGlmIChwYXJlbnRPYmplY3QpIHtcbiAgICAgICAgcGFyZW50T2JqZWN0Lmdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gICNjb25zdHJ1Y3QoKSB7XG4gICAgdGhpcy4jZ2VvbWV0cnkgPSBuZXcgdGhpcy5nZW9tZXRyeVR5cGUoLi4udGhpcy4jZ2VvbWV0cnlBcmdzKTtcbiAgICB0aGlzLnJlYWR5LmVtaXQodGhpcy5nZW9tZXRyeSk7XG4gIH1cblxuICAjZ2VvbWV0cnkhOiBUR2VvbWV0cnk7XG4gIGdldCBnZW9tZXRyeSgpOiBUR2VvbWV0cnkge1xuICAgIHJldHVybiB0aGlzLiNnZW9tZXRyeTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmdlb21ldHJ5KSB7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=