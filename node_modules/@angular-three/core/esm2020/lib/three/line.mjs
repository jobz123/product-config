import { Directive, EventEmitter, Inject, Optional, Output, } from '@angular/core';
import * as THREE from 'three';
import { NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, NGT_OBJECT_TYPE, NgtMaterialGeometryController, } from '../controllers/material-geometry.controller';
import * as i0 from "@angular/core";
import * as i1 from "../controllers/material-geometry.controller";
export class NgtCommonLine {
    constructor(materialGeometryController) {
        this.materialGeometryController = materialGeometryController;
        this.ready = new EventEmitter();
        if (materialGeometryController) {
            materialGeometryController.readyFn = () => {
                this.ready.emit(this.line);
            };
        }
    }
    get line() {
        return this.materialGeometryController?.objectController.object3d;
    }
}
NgtCommonLine.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtCommonLine, deps: [{ token: NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NgtCommonLine.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtCommonLine, outputs: { ready: "ready" }, providers: [{ provide: NGT_OBJECT_TYPE, useValue: THREE.Line }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtCommonLine, decorators: [{
            type: Directive,
            args: [{
                    providers: [{ provide: NGT_OBJECT_TYPE, useValue: THREE.Line }],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtMaterialGeometryController, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { ready: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2xpYi90aHJlZS9saW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLE1BQU0sRUFDTixRQUFRLEVBQ1IsTUFBTSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFDTCx3Q0FBd0MsRUFDeEMsZUFBZSxFQUNmLDZCQUE2QixHQUM5QixNQUFNLDZDQUE2QyxDQUFDOzs7QUFLckQsTUFBTSxPQUFnQixhQUFhO0lBR2pDLFlBR1ksMEJBQXlEO1FBQXpELCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBK0I7UUFMM0QsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFTLENBQUM7UUFPMUMsSUFBSSwwQkFBMEIsRUFBRTtZQUM5QiwwQkFBMEIsQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO2dCQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0IsQ0FBQyxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsZ0JBQWdCLENBQUMsUUFBaUIsQ0FBQztJQUM3RSxDQUFDOzswR0FqQm1CLGFBQWEsa0JBS3ZCLHdDQUF3Qzs4RkFMOUIsYUFBYSwwQ0FGdEIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQzsyRkFFM0MsYUFBYTtrQkFIbEMsU0FBUzttQkFBQztvQkFDVCxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDaEU7OzBCQUtJLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsd0NBQXdDOzRDQUp4QyxLQUFLO3NCQUFkLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBPcHRpb25hbCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7XG4gIE5HVF9NQVRFUklBTF9HRU9NRVRSWV9XQVRDSEVEX0NPTlRST0xMRVIsXG4gIE5HVF9PQkpFQ1RfVFlQRSxcbiAgTmd0TWF0ZXJpYWxHZW9tZXRyeUNvbnRyb2xsZXIsXG59IGZyb20gJy4uL2NvbnRyb2xsZXJzL21hdGVyaWFsLWdlb21ldHJ5LmNvbnRyb2xsZXInO1xuXG5ARGlyZWN0aXZlKHtcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOR1RfT0JKRUNUX1RZUEUsIHVzZVZhbHVlOiBUSFJFRS5MaW5lIH1dLFxufSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOZ3RDb21tb25MaW5lPFRMaW5lIGV4dGVuZHMgVEhSRUUuTGluZSA9IFRIUkVFLkxpbmU+IHtcbiAgQE91dHB1dCgpIHJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjxUTGluZT4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoTkdUX01BVEVSSUFMX0dFT01FVFJZX1dBVENIRURfQ09OVFJPTExFUilcbiAgICBwcm90ZWN0ZWQgbWF0ZXJpYWxHZW9tZXRyeUNvbnRyb2xsZXI6IE5ndE1hdGVyaWFsR2VvbWV0cnlDb250cm9sbGVyXG4gICkge1xuICAgIGlmIChtYXRlcmlhbEdlb21ldHJ5Q29udHJvbGxlcikge1xuICAgICAgbWF0ZXJpYWxHZW9tZXRyeUNvbnRyb2xsZXIucmVhZHlGbiA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5yZWFkeS5lbWl0KHRoaXMubGluZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGdldCBsaW5lKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGVyaWFsR2VvbWV0cnlDb250cm9sbGVyPy5vYmplY3RDb250cm9sbGVyLm9iamVjdDNkIGFzIFRMaW5lO1xuICB9XG59XG4iXX0=