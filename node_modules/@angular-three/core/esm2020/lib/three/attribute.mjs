var _NgtAttribute_attributeArgs, _NgtAttribute_attribute, _NgtAttribute_defaultValue;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Directive, Input, NgZone, Optional, } from '@angular/core';
import { NgtGeometry } from './geometry';
import * as i0 from "@angular/core";
import * as i1 from "./geometry";
export class NgtAttribute {
    constructor(ngZone, geometryDirective) {
        this.ngZone = ngZone;
        this.geometryDirective = geometryDirective;
        _NgtAttribute_attributeArgs.set(this, []);
        _NgtAttribute_attribute.set(this, void 0);
        _NgtAttribute_defaultValue.set(this, void 0);
    }
    set attributeArgs(v) {
        __classPrivateFieldSet(this, _NgtAttribute_attributeArgs, Array.isArray(v) ? v : [v], "f");
        this.ngZone.runOutsideAngular(() => {
            this.init();
        });
    }
    ngOnChanges() {
        this.ngZone.runOutsideAngular(() => {
            if (this.attribute) {
                this.attribute.needsUpdate = true;
            }
        });
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (!this.attribute) {
                this.init();
            }
        });
    }
    init() {
        if (this.geometryDirective && this.attach) {
            __classPrivateFieldSet(this, _NgtAttribute_attribute, new this.attributeType(...__classPrivateFieldGet(this, _NgtAttribute_attributeArgs, "f")), "f");
            if (this.attribute) {
                __classPrivateFieldSet(this, _NgtAttribute_defaultValue, this.geometryDirective.geometry.attributes[this.attach], "f");
                this.geometryDirective.geometry.setAttribute(this.attach, this.attribute);
            }
        }
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.geometryDirective && this.attach) {
                if (__classPrivateFieldGet(this, _NgtAttribute_defaultValue, "f") !== undefined) {
                    this.geometryDirective.geometry.setAttribute(this.attach, __classPrivateFieldGet(this, _NgtAttribute_defaultValue, "f"));
                }
                else {
                    this.geometryDirective.geometry.deleteAttribute(this.attach);
                }
            }
        });
    }
    get attribute() {
        return __classPrivateFieldGet(this, _NgtAttribute_attribute, "f");
    }
}
_NgtAttribute_attributeArgs = new WeakMap(), _NgtAttribute_attribute = new WeakMap(), _NgtAttribute_defaultValue = new WeakMap();
NgtAttribute.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtAttribute, deps: [{ token: i0.NgZone }, { token: i1.NgtGeometry, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NgtAttribute.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtAttribute, inputs: { attach: "attach" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtAttribute, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.NgtGeometry, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { attach: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL3RocmVlL2F0dHJpYnV0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFJTixRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQzs7O0FBR3pDLE1BQU0sT0FBZ0IsWUFBWTtJQVVoQyxZQUNZLE1BQWMsRUFDRixpQkFBOEI7UUFEMUMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNGLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBYTtRQUd0RCxzQ0FBNEIsRUFBRSxFQUFDO1FBUy9CLDBDQUF3QjtRQUN4Qiw2Q0FBMkI7SUFaeEIsQ0FBQztJQUlKLElBQWMsYUFBYSxDQUFDLENBQXNCO1FBQ2hELHVCQUFBLElBQUksK0JBQWtCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBQSxDQUFDO1FBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUtELFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQzthQUNuQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2I7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxJQUFJO1FBQ1YsSUFBSSxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN6Qyx1QkFBQSxJQUFJLDJCQUFjLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLHVCQUFBLElBQUksbUNBQWUsQ0FBQyxNQUFBLENBQUM7WUFDakUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNsQix1QkFBQSxJQUFJLDhCQUFpQixJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FDN0QsSUFBSSxDQUFDLE1BQU0sQ0FDRSxNQUFBLENBQUM7Z0JBQ2hCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUMxQyxJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxTQUFTLENBQ2YsQ0FBQzthQUNIO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ3pDLElBQUksdUJBQUEsSUFBSSxrQ0FBYyxLQUFLLFNBQVMsRUFBRTtvQkFDcEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQzFDLElBQUksQ0FBQyxNQUFNLEVBQ1gsdUJBQUEsSUFBSSxrQ0FBYyxDQUNuQixDQUFDO2lCQUNIO3FCQUFNO29CQUNMLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDOUQ7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sdUJBQUEsSUFBSSwrQkFBVyxDQUFDO0lBQ3pCLENBQUM7Ozt5R0EzRW1CLFlBQVk7NkZBQVosWUFBWTsyRkFBWixZQUFZO2tCQURqQyxTQUFTOzswQkFhTCxRQUFROzRDQU5GLE1BQU07c0JBQWQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIE5nWm9uZSxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHR5cGUgeyBBbnlDb25zdHJ1Y3RvciB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IE5ndEdlb21ldHJ5IH0gZnJvbSAnLi9nZW9tZXRyeSc7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5ndEF0dHJpYnV0ZTxcbiAgVEF0dHJpYnV0ZSBleHRlbmRzXG4gICAgfCBUSFJFRS5CdWZmZXJBdHRyaWJ1dGVcbiAgICB8IFRIUkVFLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlID0gVEhSRUUuQnVmZmVyQXR0cmlidXRlXG4+IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveVxue1xuICBASW5wdXQoKSBhdHRhY2g/OiBUSFJFRS5CdWlsdGluU2hhZGVyQXR0cmlidXRlTmFtZSB8IHN0cmluZztcblxuICBhYnN0cmFjdCBhdHRyaWJ1dGVUeXBlOiBBbnlDb25zdHJ1Y3RvcjxUQXR0cmlidXRlPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgbmdab25lOiBOZ1pvbmUsXG4gICAgQE9wdGlvbmFsKCkgcHJvdGVjdGVkIGdlb21ldHJ5RGlyZWN0aXZlOiBOZ3RHZW9tZXRyeVxuICApIHt9XG5cbiAgI2F0dHJpYnV0ZUFyZ3M6IHVua25vd25bXSA9IFtdO1xuXG4gIHByb3RlY3RlZCBzZXQgYXR0cmlidXRlQXJncyh2OiB1bmtub3duIHwgdW5rbm93bltdKSB7XG4gICAgdGhpcy4jYXR0cmlidXRlQXJncyA9IEFycmF5LmlzQXJyYXkodikgPyB2IDogW3ZdO1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH0pO1xuICB9XG5cbiAgI2F0dHJpYnV0ZT86IFRBdHRyaWJ1dGU7XG4gICNkZWZhdWx0VmFsdWU/OiBUQXR0cmlidXRlO1xuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZSkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuYXR0cmlidXRlKSB7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KCkge1xuICAgIGlmICh0aGlzLmdlb21ldHJ5RGlyZWN0aXZlICYmIHRoaXMuYXR0YWNoKSB7XG4gICAgICB0aGlzLiNhdHRyaWJ1dGUgPSBuZXcgdGhpcy5hdHRyaWJ1dGVUeXBlKC4uLnRoaXMuI2F0dHJpYnV0ZUFyZ3MpO1xuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlKSB7XG4gICAgICAgIHRoaXMuI2RlZmF1bHRWYWx1ZSA9IHRoaXMuZ2VvbWV0cnlEaXJlY3RpdmUuZ2VvbWV0cnkuYXR0cmlidXRlc1tcbiAgICAgICAgICB0aGlzLmF0dGFjaFxuICAgICAgICBdIGFzIFRBdHRyaWJ1dGU7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnlEaXJlY3RpdmUuZ2VvbWV0cnkuc2V0QXR0cmlidXRlKFxuICAgICAgICAgIHRoaXMuYXR0YWNoLFxuICAgICAgICAgIHRoaXMuYXR0cmlidXRlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuZ2VvbWV0cnlEaXJlY3RpdmUgJiYgdGhpcy5hdHRhY2gpIHtcbiAgICAgICAgaWYgKHRoaXMuI2RlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5nZW9tZXRyeURpcmVjdGl2ZS5nZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICB0aGlzLmF0dGFjaCxcbiAgICAgICAgICAgIHRoaXMuI2RlZmF1bHRWYWx1ZVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5nZW9tZXRyeURpcmVjdGl2ZS5nZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUodGhpcy5hdHRhY2gpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBnZXQgYXR0cmlidXRlKCk6IFRBdHRyaWJ1dGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLiNhdHRyaWJ1dGU7XG4gIH1cbn1cbiJdfQ==