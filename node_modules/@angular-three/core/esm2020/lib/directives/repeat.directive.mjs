import { Directive, Inject, Input, NgModule, TemplateRef, ViewContainerRef, } from '@angular/core';
import * as i0 from "@angular/core";
const MAX_VALUE = 0x10000;
export class NgtRepeat {
    constructor(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
    }
    set repeatOf(count) {
        const safeCount = Math.floor(Math.max(0, Math.min(count, MAX_VALUE)));
        const { length } = this.viewContainer;
        if (safeCount < length) {
            this.removeContainers(length - safeCount);
        }
        else {
            this.addContainers(length, safeCount);
        }
    }
    addContainers(length, count) {
        for (let index = length; index < count; index++) {
            this.viewContainer.createEmbeddedView(this.templateRef, {
                $implicit: index,
                isFirst: index === length,
                isLast: index === count - 1,
                isOdd: !(index % 2),
                isEven: !!(index % 2),
            });
        }
    }
    removeContainers(amount) {
        for (let index = 0; index < amount; index++) {
            this.viewContainer.remove();
        }
    }
    static ngTemplateContextGuard(dir, ctx) {
        return true;
    }
}
NgtRepeat.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtRepeat, deps: [{ token: ViewContainerRef }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
NgtRepeat.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtRepeat, selector: "[repeat][repeatOf]", inputs: { repeatOf: "repeatOf" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtRepeat, decorators: [{
            type: Directive,
            args: [{
                    selector: '[repeat][repeatOf]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef, decorators: [{
                    type: Inject,
                    args: [ViewContainerRef]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; }, propDecorators: { repeatOf: [{
                type: Input
            }] } });
export class NgtRepeatModule {
}
NgtRepeatModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtRepeatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtRepeatModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtRepeatModule, declarations: [NgtRepeat], exports: [NgtRepeat] });
NgtRepeatModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtRepeatModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtRepeatModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtRepeat],
                    exports: [NgtRepeat],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2xpYi9kaXJlY3RpdmVzL3JlcGVhdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFDUixXQUFXLEVBQ1gsZ0JBQWdCLEdBQ2pCLE1BQU0sZUFBZSxDQUFDOztBQUV2QixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUM7QUFhMUIsTUFBTSxPQUFPLFNBQVM7SUFhcEIsWUFDNkMsYUFBK0IsRUFFekQsV0FBdUM7UUFGYixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFFekQsZ0JBQVcsR0FBWCxXQUFXLENBQTRCO0lBQ3ZELENBQUM7SUFoQkosSUFDSSxRQUFRLENBQUMsS0FBYTtRQUN4QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUV0QyxJQUFJLFNBQVMsR0FBRyxNQUFNLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQztTQUMzQzthQUFNO1lBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDdkM7SUFDSCxDQUFDO0lBUU8sYUFBYSxDQUFDLE1BQWMsRUFBRSxLQUFhO1FBQ2pELEtBQUssSUFBSSxLQUFLLEdBQUcsTUFBTSxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBZ0IsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDckUsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLE9BQU8sRUFBRSxLQUFLLEtBQUssTUFBTTtnQkFDekIsTUFBTSxFQUFFLEtBQUssS0FBSyxLQUFLLEdBQUcsQ0FBQztnQkFDM0IsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQzthQUN0QixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxNQUFjO1FBQ3JDLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDM0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUM3QjtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsc0JBQXNCLENBQzNCLEdBQWMsRUFDZCxHQUFZO1FBRVosT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOztzR0ExQ1UsU0FBUyxrQkFjVixnQkFBZ0IsYUFDaEIsV0FBVzswRkFmVixTQUFTOzJGQUFULFNBQVM7a0JBSHJCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtpQkFDL0I7OzBCQWVJLE1BQU07MkJBQUMsZ0JBQWdCOzswQkFDdkIsTUFBTTsyQkFBQyxXQUFXOzRDQWJqQixRQUFRO3NCQURYLEtBQUs7O0FBZ0RSLE1BQU0sT0FBTyxlQUFlOzs0R0FBZixlQUFlOzZHQUFmLGVBQWUsaUJBakRmLFNBQVMsYUFBVCxTQUFTOzZHQWlEVCxlQUFlOzJGQUFmLGVBQWU7a0JBSjNCLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsU0FBUyxDQUFDO29CQUN6QixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUM7aUJBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBOZ01vZHVsZSxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5jb25zdCBNQVhfVkFMVUUgPSAweDEwMDAwO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlcGVhdENvbnRleHQge1xuICAkaW1wbGljaXQ6IG51bWJlcjtcbiAgaXNPZGQ6IGJvb2xlYW47XG4gIGlzRXZlbjogYm9vbGVhbjtcbiAgaXNGaXJzdDogYm9vbGVhbjtcbiAgaXNMYXN0OiBib29sZWFuO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcmVwZWF0XVtyZXBlYXRPZl0nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3RSZXBlYXQge1xuICBASW5wdXQoKVxuICBzZXQgcmVwZWF0T2YoY291bnQ6IG51bWJlcikge1xuICAgIGNvbnN0IHNhZmVDb3VudCA9IE1hdGguZmxvb3IoTWF0aC5tYXgoMCwgTWF0aC5taW4oY291bnQsIE1BWF9WQUxVRSkpKTtcbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gdGhpcy52aWV3Q29udGFpbmVyO1xuXG4gICAgaWYgKHNhZmVDb3VudCA8IGxlbmd0aCkge1xuICAgICAgdGhpcy5yZW1vdmVDb250YWluZXJzKGxlbmd0aCAtIHNhZmVDb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkQ29udGFpbmVycyhsZW5ndGgsIHNhZmVDb3VudCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChWaWV3Q29udGFpbmVyUmVmKSBwcml2YXRlIHJlYWRvbmx5IHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgQEluamVjdChUZW1wbGF0ZVJlZilcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxSZXBlYXRDb250ZXh0PlxuICApIHt9XG5cbiAgcHJpdmF0ZSBhZGRDb250YWluZXJzKGxlbmd0aDogbnVtYmVyLCBjb3VudDogbnVtYmVyKSB7XG4gICAgZm9yIChsZXQgaW5kZXggPSBsZW5ndGg7IGluZGV4IDwgY291bnQ7IGluZGV4KyspIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXc8UmVwZWF0Q29udGV4dD4odGhpcy50ZW1wbGF0ZVJlZiwge1xuICAgICAgICAkaW1wbGljaXQ6IGluZGV4LFxuICAgICAgICBpc0ZpcnN0OiBpbmRleCA9PT0gbGVuZ3RoLFxuICAgICAgICBpc0xhc3Q6IGluZGV4ID09PSBjb3VudCAtIDEsXG4gICAgICAgIGlzT2RkOiAhKGluZGV4ICUgMiksXG4gICAgICAgIGlzRXZlbjogISEoaW5kZXggJSAyKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlQ29udGFpbmVycyhhbW91bnQ6IG51bWJlcikge1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhbW91bnQ7IGluZGV4KyspIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lci5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgbmdUZW1wbGF0ZUNvbnRleHRHdWFyZChcbiAgICBkaXI6IE5ndFJlcGVhdCxcbiAgICBjdHg6IHVua25vd25cbiAgKTogY3R4IGlzIFJlcGVhdENvbnRleHQge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05ndFJlcGVhdF0sXG4gIGV4cG9ydHM6IFtOZ3RSZXBlYXRdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3RSZXBlYXRNb2R1bGUge31cbiJdfQ==