import * as THREE from 'three';
function checkNeedsUpdate(value) {
    if (value !== null &&
        typeof value === 'object' &&
        'needsUpdate' in value) {
        value['needsUpdate'] = true;
    }
}
export function applyProps(instance, props) {
    if (!Object.keys(props).length)
        return;
    if ('__ngt' in props) {
        instance['__ngt'] = props['__ngt'];
    }
    const unknownInstance = instance;
    if (unknownInstance['set'] != null &&
        typeof unknownInstance['set'] === 'function') {
        try {
            unknownInstance['set'](props);
        }
        catch (e) {
            console.info(`Swallowing erroneous "set" invoke on ${unknownInstance.constructor.name} as non fatal: ${e}`);
        }
    }
    for (const [key, prop] of Object.entries(props)) {
        const currentInstance = unknownInstance;
        const targetProp = currentInstance[key];
        if (targetProp &&
            targetProp['set'] &&
            (targetProp['copy'] || targetProp instanceof THREE.Layers)) {
            if (Array.isArray(prop)) {
                if (targetProp.fromArray)
                    targetProp.fromArray(prop);
                else
                    targetProp.set(...prop);
            }
            else if (targetProp.copy &&
                prop &&
                prop.constructor &&
                targetProp.constructor.name ===
                    prop.constructor.name) {
                targetProp.copy(prop);
            }
            else if (prop !== undefined) {
                const isColor = targetProp instanceof THREE.Color;
                // Allow setting array scalars
                if (!isColor && targetProp.setScalar)
                    targetProp.setScalar(prop);
                // Layers have no copy function, we must therefore copy the mask property
                else if (targetProp instanceof THREE.Layers &&
                    prop instanceof THREE.Layers)
                    targetProp.mask = prop.mask;
                // Otherwise just set ...
                else
                    targetProp.set(prop);
                // Auto-convert sRGB colors, for now ...
                // https://github.com/pmndrs/react-three-fiber/issues/344
                if (!currentInstance.linear && isColor)
                    targetProp.convertSRGBToLinear();
            }
        }
        else {
            currentInstance[key] = prop;
            // Auto-convert sRGB textures, for now ...
            // https://github.com/pmndrs/react-three-fiber/issues/344
            if (!currentInstance.linear &&
                currentInstance[key] instanceof THREE.Texture)
                currentInstance[key].encoding = THREE.sRGBEncoding;
        }
        checkNeedsUpdate(prop);
        checkNeedsUpdate(targetProp);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHktcHJvcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvdXRpbHMvYXBwbHktcHJvcHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFRL0IsU0FBUyxnQkFBZ0IsQ0FBQyxLQUFjO0lBQ3RDLElBQ0UsS0FBSyxLQUFLLElBQUk7UUFDZCxPQUFPLEtBQUssS0FBSyxRQUFRO1FBQ3pCLGFBQWEsSUFBSyxLQUF1QixFQUN6QztRQUNDLEtBQXVCLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDO0tBQ2hEO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsUUFBcUIsRUFBRSxLQUFvQjtJQUNwRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNO1FBQUUsT0FBTztJQUV2QyxJQUFJLE9BQU8sSUFBSSxLQUFLLEVBQUU7UUFDcEIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQXdCLENBQUM7S0FDM0Q7SUFFRCxNQUFNLGVBQWUsR0FBRyxRQUFvQyxDQUFDO0lBRTdELElBQ0UsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUk7UUFDOUIsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDLEtBQUssVUFBVSxFQUM1QztRQUNBLElBQUk7WUFDRCxlQUFlLENBQUMsS0FBSyxDQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0M7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sQ0FBQyxJQUFJLENBQ1Ysd0NBQXdDLGVBQWUsQ0FBQyxXQUFXLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxFQUFFLENBQzlGLENBQUM7U0FDSDtLQUNGO0lBRUQsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDL0MsTUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQ3hDLE1BQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQWtCLENBQUM7UUFFekQsSUFDRSxVQUFVO1lBQ1YsVUFBVSxDQUFDLEtBQUssQ0FBQztZQUNqQixDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLFlBQVksS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUMxRDtZQUNBLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDdkIsSUFBSSxVQUFVLENBQUMsU0FBUztvQkFBRyxVQUFVLENBQUMsU0FBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7b0JBQzdELFVBQVUsQ0FBQyxHQUFnQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7YUFDNUM7aUJBQU0sSUFDTCxVQUFVLENBQUMsSUFBSTtnQkFDZixJQUFJO2dCQUNILElBQWdDLENBQUMsV0FBVztnQkFDN0MsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJO29CQUN4QixJQUFnQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQ3BEO2dCQUNDLFVBQVUsQ0FBQyxJQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3JDO2lCQUFNLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtnQkFDN0IsTUFBTSxPQUFPLEdBQUcsVUFBVSxZQUFZLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQ2xELDhCQUE4QjtnQkFDOUIsSUFBSSxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUMsU0FBUztvQkFDakMsVUFBVSxDQUFDLFNBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzNDLHlFQUF5RTtxQkFDcEUsSUFDSCxVQUFVLFlBQVksS0FBSyxDQUFDLE1BQU07b0JBQ2xDLElBQUksWUFBWSxLQUFLLENBQUMsTUFBTTtvQkFFNUIsVUFBVSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUM5Qix5QkFBeUI7O29CQUNuQixVQUFVLENBQUMsR0FBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEMsd0NBQXdDO2dCQUN4Qyx5REFBeUQ7Z0JBQ3pELElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxJQUFJLE9BQU87b0JBQ25DLFVBQXFDLENBQUMsbUJBQW1CLEVBQUUsQ0FBQzthQUNoRTtTQUNGO2FBQU07WUFDTCxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQzVCLDBDQUEwQztZQUMxQyx5REFBeUQ7WUFDekQsSUFDRSxDQUFDLGVBQWUsQ0FBQyxNQUFNO2dCQUN2QixlQUFlLENBQUMsR0FBRyxDQUFDLFlBQVksS0FBSyxDQUFDLE9BQU87Z0JBRTVDLGVBQWUsQ0FBQyxHQUFHLENBQW1CLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7U0FDekU7UUFFRCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUM5QjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQge1xuICBBbnlDb25zdHJ1Y3RvcixcbiAgTmd0SW5zdGFuY2UsXG4gIE5ndEluc3RhbmNlSW50ZXJuYWwsXG4gIFVua25vd25SZWNvcmQsXG59IGZyb20gJy4uL3R5cGVzJztcblxuZnVuY3Rpb24gY2hlY2tOZWVkc1VwZGF0ZSh2YWx1ZTogdW5rbm93bikge1xuICBpZiAoXG4gICAgdmFsdWUgIT09IG51bGwgJiZcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgJ25lZWRzVXBkYXRlJyBpbiAodmFsdWUgYXMgVW5rbm93blJlY29yZClcbiAgKSB7XG4gICAgKHZhbHVlIGFzIFVua25vd25SZWNvcmQpWyduZWVkc1VwZGF0ZSddID0gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlQcm9wcyhpbnN0YW5jZTogTmd0SW5zdGFuY2UsIHByb3BzOiBVbmtub3duUmVjb3JkKSB7XG4gIGlmICghT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCkgcmV0dXJuO1xuXG4gIGlmICgnX19uZ3QnIGluIHByb3BzKSB7XG4gICAgaW5zdGFuY2VbJ19fbmd0J10gPSBwcm9wc1snX19uZ3QnXSBhcyBOZ3RJbnN0YW5jZUludGVybmFsO1xuICB9XG5cbiAgY29uc3QgdW5rbm93bkluc3RhbmNlID0gaW5zdGFuY2UgYXMgdW5rbm93biBhcyBVbmtub3duUmVjb3JkO1xuXG4gIGlmIChcbiAgICB1bmtub3duSW5zdGFuY2VbJ3NldCddICE9IG51bGwgJiZcbiAgICB0eXBlb2YgdW5rbm93bkluc3RhbmNlWydzZXQnXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICB0cnkge1xuICAgICAgKHVua25vd25JbnN0YW5jZVsnc2V0J10gYXMgRnVuY3Rpb24pKHByb3BzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmluZm8oXG4gICAgICAgIGBTd2FsbG93aW5nIGVycm9uZW91cyBcInNldFwiIGludm9rZSBvbiAke3Vua25vd25JbnN0YW5jZS5jb25zdHJ1Y3Rvci5uYW1lfSBhcyBub24gZmF0YWw6ICR7ZX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgW2tleSwgcHJvcF0gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMpKSB7XG4gICAgY29uc3QgY3VycmVudEluc3RhbmNlID0gdW5rbm93bkluc3RhbmNlO1xuICAgIGNvbnN0IHRhcmdldFByb3AgPSBjdXJyZW50SW5zdGFuY2Vba2V5XSBhcyBVbmtub3duUmVjb3JkO1xuXG4gICAgaWYgKFxuICAgICAgdGFyZ2V0UHJvcCAmJlxuICAgICAgdGFyZ2V0UHJvcFsnc2V0J10gJiZcbiAgICAgICh0YXJnZXRQcm9wWydjb3B5J10gfHwgdGFyZ2V0UHJvcCBpbnN0YW5jZW9mIFRIUkVFLkxheWVycylcbiAgICApIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3ApKSB7XG4gICAgICAgIGlmICh0YXJnZXRQcm9wLmZyb21BcnJheSkgKHRhcmdldFByb3AuZnJvbUFycmF5IGFzIEZ1bmN0aW9uKShwcm9wKTtcbiAgICAgICAgZWxzZSAodGFyZ2V0UHJvcC5zZXQgYXMgRnVuY3Rpb24pKC4uLnByb3ApO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdGFyZ2V0UHJvcC5jb3B5ICYmXG4gICAgICAgIHByb3AgJiZcbiAgICAgICAgKHByb3AgYXMgQW55Q29uc3RydWN0b3I8dW5rbm93bj4pLmNvbnN0cnVjdG9yICYmXG4gICAgICAgIHRhcmdldFByb3AuY29uc3RydWN0b3IubmFtZSA9PT1cbiAgICAgICAgICAocHJvcCBhcyBBbnlDb25zdHJ1Y3Rvcjx1bmtub3duPikuY29uc3RydWN0b3IubmFtZVxuICAgICAgKSB7XG4gICAgICAgICh0YXJnZXRQcm9wLmNvcHkgYXMgRnVuY3Rpb24pKHByb3ApO1xuICAgICAgfSBlbHNlIGlmIChwcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgaXNDb2xvciA9IHRhcmdldFByb3AgaW5zdGFuY2VvZiBUSFJFRS5Db2xvcjtcbiAgICAgICAgLy8gQWxsb3cgc2V0dGluZyBhcnJheSBzY2FsYXJzXG4gICAgICAgIGlmICghaXNDb2xvciAmJiB0YXJnZXRQcm9wLnNldFNjYWxhcilcbiAgICAgICAgICAodGFyZ2V0UHJvcC5zZXRTY2FsYXIgYXMgRnVuY3Rpb24pKHByb3ApO1xuICAgICAgICAvLyBMYXllcnMgaGF2ZSBubyBjb3B5IGZ1bmN0aW9uLCB3ZSBtdXN0IHRoZXJlZm9yZSBjb3B5IHRoZSBtYXNrIHByb3BlcnR5XG4gICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgIHRhcmdldFByb3AgaW5zdGFuY2VvZiBUSFJFRS5MYXllcnMgJiZcbiAgICAgICAgICBwcm9wIGluc3RhbmNlb2YgVEhSRUUuTGF5ZXJzXG4gICAgICAgIClcbiAgICAgICAgICB0YXJnZXRQcm9wLm1hc2sgPSBwcm9wLm1hc2s7XG4gICAgICAgIC8vIE90aGVyd2lzZSBqdXN0IHNldCAuLi5cbiAgICAgICAgZWxzZSAodGFyZ2V0UHJvcC5zZXQgYXMgRnVuY3Rpb24pKHByb3ApO1xuICAgICAgICAvLyBBdXRvLWNvbnZlcnQgc1JHQiBjb2xvcnMsIGZvciBub3cgLi4uXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wbW5kcnMvcmVhY3QtdGhyZWUtZmliZXIvaXNzdWVzLzM0NFxuICAgICAgICBpZiAoIWN1cnJlbnRJbnN0YW5jZS5saW5lYXIgJiYgaXNDb2xvcilcbiAgICAgICAgICAodGFyZ2V0UHJvcCBhcyB1bmtub3duIGFzIFRIUkVFLkNvbG9yKS5jb252ZXJ0U1JHQlRvTGluZWFyKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRJbnN0YW5jZVtrZXldID0gcHJvcDtcbiAgICAgIC8vIEF1dG8tY29udmVydCBzUkdCIHRleHR1cmVzLCBmb3Igbm93IC4uLlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BtbmRycy9yZWFjdC10aHJlZS1maWJlci9pc3N1ZXMvMzQ0XG4gICAgICBpZiAoXG4gICAgICAgICFjdXJyZW50SW5zdGFuY2UubGluZWFyICYmXG4gICAgICAgIGN1cnJlbnRJbnN0YW5jZVtrZXldIGluc3RhbmNlb2YgVEhSRUUuVGV4dHVyZVxuICAgICAgKVxuICAgICAgICAoY3VycmVudEluc3RhbmNlW2tleV0gYXMgVEhSRUUuVGV4dHVyZSkuZW5jb2RpbmcgPSBUSFJFRS5zUkdCRW5jb2Rpbmc7XG4gICAgfVxuXG4gICAgY2hlY2tOZWVkc1VwZGF0ZShwcm9wKTtcbiAgICBjaGVja05lZWRzVXBkYXRlKHRhcmdldFByb3ApO1xuICB9XG59XG4iXX0=