var _Controller_instances, _Controller_readyFn, _Controller_assignProps;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { ChangeDetectorRef, Directive, InjectionToken, Input, NgZone, Optional, } from '@angular/core';
import { ReplaySubject, takeUntil } from 'rxjs';
import { NgtDestroyedService } from '../services/destroyed.service';
import * as i0 from "@angular/core";
export class Controller {
    constructor(ngZone) {
        this.ngZone = ngZone;
        _Controller_instances.add(this);
        this.disabled = false;
        this.change$ = new ReplaySubject(1);
        _Controller_readyFn.set(this, void 0);
    }
    set readyFn(v) {
        __classPrivateFieldSet(this, _Controller_readyFn, v, "f");
    }
    get readyFn() {
        return __classPrivateFieldGet(this, _Controller_readyFn, "f");
    }
    ngOnChanges(changes) {
        if (this.controller) {
            __classPrivateFieldGet(this, _Controller_instances, "m", _Controller_assignProps).call(this);
            this.controller.ngOnChanges(changes);
            this.change$.next(changes);
        }
        else {
            this.change$.next(changes);
        }
    }
    ngOnInit() {
        if (this.controller) {
            __classPrivateFieldGet(this, _Controller_instances, "m", _Controller_assignProps).call(this);
        }
    }
}
_Controller_readyFn = new WeakMap(), _Controller_instances = new WeakSet(), _Controller_assignProps = function _Controller_assignProps() {
    this.ngZone.runOutsideAngular(() => {
        this.props.forEach((prop) => {
            const selfController = this;
            const inputController = this.controller;
            selfController[prop] = selfController[prop] ?? inputController[prop];
        });
    });
};
Controller.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: Controller, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
Controller.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: Controller, inputs: { disabled: "disabled" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: Controller, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { disabled: [{
                type: Input
            }] } });
export function controllerFactory(newInstanceOnNull = false, controllerType) {
    return (controller, changeDetectorRef, destroyed) => {
        if (!controller) {
            return newInstanceOnNull ? new controllerType() : null;
        }
        controller.change$.pipe(takeUntil(destroyed)).subscribe(() => {
            changeDetectorRef.markForCheck();
        });
        return controller;
    };
}
export function createControllerProviderFactory({ watchedControllerTokenName, controller, newInstanceOnNull = false, }) {
    const watchedControllerToken = new InjectionToken(watchedControllerTokenName);
    const controllerProvider = [
        NgtDestroyedService,
        {
            provide: watchedControllerToken,
            deps: [
                [new Optional(), controller],
                ChangeDetectorRef,
                NgtDestroyedService,
            ],
            useFactory: controllerFactory(newInstanceOnNull, controller),
        },
    ];
    return [watchedControllerToken, controllerProvider];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2xpYi9jb250cm9sbGVycy9jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsY0FBYyxFQUNkLEtBQUssRUFDTCxNQUFNLEVBR04sUUFBUSxHQUlULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYyxhQUFhLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQUlwRSxNQUFNLE9BQWdCLFVBQVU7SUFTOUIsWUFBc0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7O1FBUjNCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFNakIsWUFBTyxHQUFHLElBQUksYUFBYSxDQUFnQixDQUFDLENBQUMsQ0FBQztRQUl2RCxzQ0FBc0I7SUFGaUIsQ0FBQztJQUl4QyxJQUFJLE9BQU8sQ0FBQyxDQUEyQjtRQUNyQyx1QkFBQSxJQUFJLHVCQUFZLENBQUMsTUFBQSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLHVCQUFBLElBQUksMkJBQVMsQ0FBQztJQUN2QixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQix1QkFBQSxJQUFJLHNEQUFhLE1BQWpCLElBQUksQ0FBZSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzVCO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLHVCQUFBLElBQUksc0RBQWEsTUFBakIsSUFBSSxDQUFlLENBQUM7U0FDckI7SUFDSCxDQUFDOzs7SUFHQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzFCLE1BQU0sY0FBYyxHQUFHLElBQXFCLENBQUM7WUFDN0MsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQXNDLENBQUM7WUFDcEUsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7dUdBN0NtQixVQUFVOzJGQUFWLFVBQVU7MkZBQVYsVUFBVTtrQkFEL0IsU0FBUzs2RkFFQyxRQUFRO3NCQUFoQixLQUFLOztBQXVEUixNQUFNLFVBQVUsaUJBQWlCLENBQy9CLGlCQUFpQixHQUFHLEtBQUssRUFDekIsY0FBaUM7SUFFakMsT0FBTyxDQUNMLFVBQThCLEVBQzlCLGlCQUFvQyxFQUNwQyxTQUEyQixFQUNQLEVBQUU7UUFDdEIsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU8saUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUN4RDtRQUVELFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDM0QsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLCtCQUErQixDQUU3QyxFQUNBLDBCQUEwQixFQUMxQixVQUFVLEVBQ1YsaUJBQWlCLEdBQUcsS0FBSyxHQUN3QjtJQUlqRCxNQUFNLHNCQUFzQixHQUFHLElBQUksY0FBYyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFFOUUsTUFBTSxrQkFBa0IsR0FBZTtRQUNyQyxtQkFBbUI7UUFDbkI7WUFDRSxPQUFPLEVBQUUsc0JBQXNCO1lBQy9CLElBQUksRUFBRTtnQkFDSixDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsVUFBVSxDQUFDO2dCQUM1QixpQkFBaUI7Z0JBQ2pCLG1CQUFtQjthQUNwQjtZQUNELFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUM7U0FDN0Q7S0FDRixDQUFDO0lBRUYsT0FBTyxDQUFDLHNCQUFzQixFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDdEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBEaXJlY3RpdmUsXG4gIEluamVjdGlvblRva2VuLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkNoYW5nZXMsXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG4gIFByb3ZpZGVyLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmd0RGVzdHJveWVkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2Rlc3Ryb3llZC5zZXJ2aWNlJztcbmltcG9ydCB7IFVua25vd25SZWNvcmQgfSBmcm9tICcuLi90eXBlcyc7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbnRyb2xsZXIgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgYWJzdHJhY3QgZ2V0IHByb3BzKCk6IHN0cmluZ1tdO1xuXG4gIGFic3RyYWN0IGdldCBjb250cm9sbGVyKCk6IENvbnRyb2xsZXIgfCB1bmRlZmluZWQ7XG5cbiAgcmVhZG9ubHkgY2hhbmdlJCA9IG5ldyBSZXBsYXlTdWJqZWN0PFNpbXBsZUNoYW5nZXM+KDEpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZSkge31cblxuICAjcmVhZHlGbj86ICgpID0+IHZvaWQ7XG5cbiAgc2V0IHJlYWR5Rm4odjogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy4jcmVhZHlGbiA9IHY7XG4gIH1cblxuICBnZXQgcmVhZHlGbigpIHtcbiAgICByZXR1cm4gdGhpcy4jcmVhZHlGbjtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAodGhpcy5jb250cm9sbGVyKSB7XG4gICAgICB0aGlzLiNhc3NpZ25Qcm9wcygpO1xuICAgICAgdGhpcy5jb250cm9sbGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xuICAgICAgdGhpcy5jaGFuZ2UkLm5leHQoY2hhbmdlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hhbmdlJC5uZXh0KGNoYW5nZXMpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmNvbnRyb2xsZXIpIHtcbiAgICAgIHRoaXMuI2Fzc2lnblByb3BzKCk7XG4gICAgfVxuICB9XG5cbiAgI2Fzc2lnblByb3BzKCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICBjb25zdCBzZWxmQ29udHJvbGxlciA9IHRoaXMgYXMgVW5rbm93blJlY29yZDtcbiAgICAgICAgY29uc3QgaW5wdXRDb250cm9sbGVyID0gdGhpcy5jb250cm9sbGVyIGFzIHVua25vd24gYXMgVW5rbm93blJlY29yZDtcbiAgICAgICAgc2VsZkNvbnRyb2xsZXJbcHJvcF0gPSBzZWxmQ29udHJvbGxlcltwcm9wXSA/PyBpbnB1dENvbnRyb2xsZXJbcHJvcF07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUNvbnRyb2xsZXJUb2tlbkZhY3RvcnlPcHRpb25zPFxuICBUQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXJcbj4ge1xuICB3YXRjaGVkQ29udHJvbGxlclRva2VuTmFtZTogc3RyaW5nO1xuICBjb250cm9sbGVyOiBUeXBlPFRDb250cm9sbGVyPjtcbiAgbmV3SW5zdGFuY2VPbk51bGw/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udHJvbGxlckZhY3Rvcnk8VENvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyPihcbiAgbmV3SW5zdGFuY2VPbk51bGwgPSBmYWxzZSxcbiAgY29udHJvbGxlclR5cGU6IFR5cGU8VENvbnRyb2xsZXI+XG4pIHtcbiAgcmV0dXJuIChcbiAgICBjb250cm9sbGVyOiBUQ29udHJvbGxlciB8IG51bGwsXG4gICAgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIGRlc3Ryb3llZDogT2JzZXJ2YWJsZTx2b2lkPlxuICApOiBUQ29udHJvbGxlciB8IG51bGwgPT4ge1xuICAgIGlmICghY29udHJvbGxlcikge1xuICAgICAgcmV0dXJuIG5ld0luc3RhbmNlT25OdWxsID8gbmV3IGNvbnRyb2xsZXJUeXBlKCkgOiBudWxsO1xuICAgIH1cblxuICAgIGNvbnRyb2xsZXIuY2hhbmdlJC5waXBlKHRha2VVbnRpbChkZXN0cm95ZWQpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29udHJvbGxlcjtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xsZXJQcm92aWRlckZhY3Rvcnk8XG4gIFRDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlclxuPih7XG4gIHdhdGNoZWRDb250cm9sbGVyVG9rZW5OYW1lLFxuICBjb250cm9sbGVyLFxuICBuZXdJbnN0YW5jZU9uTnVsbCA9IGZhbHNlLFxufTogQ3JlYXRlQ29udHJvbGxlclRva2VuRmFjdG9yeU9wdGlvbnM8VENvbnRyb2xsZXI+KTogW1xuICBJbmplY3Rpb25Ub2tlbjxUQ29udHJvbGxlcj4sXG4gIFByb3ZpZGVyW11cbl0ge1xuICBjb25zdCB3YXRjaGVkQ29udHJvbGxlclRva2VuID0gbmV3IEluamVjdGlvblRva2VuKHdhdGNoZWRDb250cm9sbGVyVG9rZW5OYW1lKTtcblxuICBjb25zdCBjb250cm9sbGVyUHJvdmlkZXI6IFByb3ZpZGVyW10gPSBbXG4gICAgTmd0RGVzdHJveWVkU2VydmljZSxcbiAgICB7XG4gICAgICBwcm92aWRlOiB3YXRjaGVkQ29udHJvbGxlclRva2VuLFxuICAgICAgZGVwczogW1xuICAgICAgICBbbmV3IE9wdGlvbmFsKCksIGNvbnRyb2xsZXJdLFxuICAgICAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgTmd0RGVzdHJveWVkU2VydmljZSxcbiAgICAgIF0sXG4gICAgICB1c2VGYWN0b3J5OiBjb250cm9sbGVyRmFjdG9yeShuZXdJbnN0YW5jZU9uTnVsbCwgY29udHJvbGxlciksXG4gICAgfSxcbiAgXTtcblxuICByZXR1cm4gW3dhdGNoZWRDb250cm9sbGVyVG9rZW4sIGNvbnRyb2xsZXJQcm92aWRlcl07XG59XG4iXX0=