import { NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER, NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, NGT_OBJECT_POST_INIT, NGT_OBJECT_TYPE, NgtCommonMesh, NgtMaterialGeometryController, NgtMaterialGeometryControllerModule, } from '@angular-three/core';
import { Directive, Inject, Input, NgModule, NgZone, Optional, } from '@angular/core';
import * as THREE from 'three';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
export class NgtInstancedMesh extends NgtCommonMesh {
    constructor(materialGeometryController, ngZone) {
        super(materialGeometryController, ngZone);
    }
    set args(value) {
        if (this.materialGeometryController) {
            this.materialGeometryController.meshArgs = value;
        }
    }
}
NgtInstancedMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMesh, deps: [{ token: NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, optional: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgtInstancedMesh.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtInstancedMesh, selector: "ngt-instanced-mesh", inputs: { args: "args" }, providers: [
        { provide: NgtCommonMesh, useExisting: NgtInstancedMesh },
        NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,
        { provide: NGT_OBJECT_TYPE, useValue: THREE.InstancedMesh },
        {
            provide: NGT_OBJECT_POST_INIT,
            useValue: (object) => {
                object.instanceMatrix.setUsage(THREE.DynamicDrawUsage);
            },
        },
    ], exportAs: ["ngtInstancedMesh"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMesh, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-instanced-mesh',
                    exportAs: 'ngtInstancedMesh',
                    providers: [
                        { provide: NgtCommonMesh, useExisting: NgtInstancedMesh },
                        NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,
                        { provide: NGT_OBJECT_TYPE, useValue: THREE.InstancedMesh },
                        {
                            provide: NGT_OBJECT_POST_INIT,
                            useValue: (object) => {
                                object.instanceMatrix.setUsage(THREE.DynamicDrawUsage);
                            },
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtMaterialGeometryController, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER]
                }] }, { type: i0.NgZone }]; }, propDecorators: { args: [{
                type: Input
            }] } });
export class NgtInstancedMeshModule {
}
NgtInstancedMeshModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMeshModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtInstancedMeshModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMeshModule, declarations: [NgtInstancedMesh], exports: [NgtInstancedMesh, NgtMaterialGeometryControllerModule] });
NgtInstancedMeshModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMeshModule, imports: [NgtMaterialGeometryControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtInstancedMeshModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtInstancedMesh],
                    exports: [NgtInstancedMesh, NgtMaterialGeometryControllerModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2VkLW1lc2guZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9tZXNoZXMvc3JjL2luc3RhbmNlZC1tZXNoL2luc3RhbmNlZC1tZXNoLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wseUNBQXlDLEVBQ3pDLHdDQUF3QyxFQUN4QyxvQkFBb0IsRUFDcEIsZUFBZSxFQUNmLGFBQWEsRUFDYiw2QkFBNkIsRUFDN0IsbUNBQW1DLEdBQ3BDLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFDUixNQUFNLEVBQ04sUUFBUSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDOzs7QUFpQi9CLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxhQUFrQztJQU90RSxZQUdFLDBCQUF5RCxFQUN6RCxNQUFjO1FBRWQsS0FBSyxDQUFDLDBCQUEwQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFiRCxJQUFhLElBQUksQ0FBQyxLQUFlO1FBQy9CLElBQUksSUFBSSxDQUFDLDBCQUEwQixFQUFFO1lBQ25DLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQzs7NkdBTFUsZ0JBQWdCLGtCQVNqQix3Q0FBd0M7aUdBVHZDLGdCQUFnQix1RUFaaEI7UUFDVCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFO1FBQ3pELHlDQUF5QztRQUN6QyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUU7UUFDM0Q7WUFDRSxPQUFPLEVBQUUsb0JBQW9CO1lBQzdCLFFBQVEsRUFBRSxDQUFDLE1BQTJCLEVBQUUsRUFBRTtnQkFDeEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDekQsQ0FBQztTQUNGO0tBQ0Y7MkZBRVUsZ0JBQWdCO2tCQWY1QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFNBQVMsRUFBRTt3QkFDVCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxrQkFBa0IsRUFBRTt3QkFDekQseUNBQXlDO3dCQUN6QyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUU7d0JBQzNEOzRCQUNFLE9BQU8sRUFBRSxvQkFBb0I7NEJBQzdCLFFBQVEsRUFBRSxDQUFDLE1BQTJCLEVBQUUsRUFBRTtnQ0FDeEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7NEJBQ3pELENBQUM7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7OzBCQVNJLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsd0NBQXdDO2lFQVJyQyxJQUFJO3NCQUFoQixLQUFLOztBQW9CUixNQUFNLE9BQU8sc0JBQXNCOzttSEFBdEIsc0JBQXNCO29IQUF0QixzQkFBc0IsaUJBckJ0QixnQkFBZ0IsYUFBaEIsZ0JBQWdCLEVBbUJDLG1DQUFtQztvSEFFcEQsc0JBQXNCLFlBRkwsbUNBQW1DOzJGQUVwRCxzQkFBc0I7a0JBSmxDLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7b0JBQ2hDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixFQUFFLG1DQUFtQyxDQUFDO2lCQUNqRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE5HVF9NQVRFUklBTF9HRU9NRVRSWV9DT05UUk9MTEVSX1BST1ZJREVSLFxuICBOR1RfTUFURVJJQUxfR0VPTUVUUllfV0FUQ0hFRF9DT05UUk9MTEVSLFxuICBOR1RfT0JKRUNUX1BPU1RfSU5JVCxcbiAgTkdUX09CSkVDVF9UWVBFLFxuICBOZ3RDb21tb25NZXNoLFxuICBOZ3RNYXRlcmlhbEdlb21ldHJ5Q29udHJvbGxlcixcbiAgTmd0TWF0ZXJpYWxHZW9tZXRyeUNvbnRyb2xsZXJNb2R1bGUsXG59IGZyb20gJ0Bhbmd1bGFyLXRocmVlL2NvcmUnO1xuaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBOZ01vZHVsZSxcbiAgTmdab25lLFxuICBPcHRpb25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ25ndC1pbnN0YW5jZWQtbWVzaCcsXG4gIGV4cG9ydEFzOiAnbmd0SW5zdGFuY2VkTWVzaCcsXG4gIHByb3ZpZGVyczogW1xuICAgIHsgcHJvdmlkZTogTmd0Q29tbW9uTWVzaCwgdXNlRXhpc3Rpbmc6IE5ndEluc3RhbmNlZE1lc2ggfSxcbiAgICBOR1RfTUFURVJJQUxfR0VPTUVUUllfQ09OVFJPTExFUl9QUk9WSURFUixcbiAgICB7IHByb3ZpZGU6IE5HVF9PQkpFQ1RfVFlQRSwgdXNlVmFsdWU6IFRIUkVFLkluc3RhbmNlZE1lc2ggfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR1RfT0JKRUNUX1BPU1RfSU5JVCxcbiAgICAgIHVzZVZhbHVlOiAob2JqZWN0OiBUSFJFRS5JbnN0YW5jZWRNZXNoKSA9PiB7XG4gICAgICAgIG9iamVjdC5pbnN0YW5jZU1hdHJpeC5zZXRVc2FnZShUSFJFRS5EeW5hbWljRHJhd1VzYWdlKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd0SW5zdGFuY2VkTWVzaCBleHRlbmRzIE5ndENvbW1vbk1lc2g8VEhSRUUuSW5zdGFuY2VkTWVzaD4ge1xuICBASW5wdXQoKSBzZXQgYXJncyh2YWx1ZTogW251bWJlcl0pIHtcbiAgICBpZiAodGhpcy5tYXRlcmlhbEdlb21ldHJ5Q29udHJvbGxlcikge1xuICAgICAgdGhpcy5tYXRlcmlhbEdlb21ldHJ5Q29udHJvbGxlci5tZXNoQXJncyA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChOR1RfTUFURVJJQUxfR0VPTUVUUllfV0FUQ0hFRF9DT05UUk9MTEVSKVxuICAgIG1hdGVyaWFsR2VvbWV0cnlDb250cm9sbGVyOiBOZ3RNYXRlcmlhbEdlb21ldHJ5Q29udHJvbGxlcixcbiAgICBuZ1pvbmU6IE5nWm9uZVxuICApIHtcbiAgICBzdXBlcihtYXRlcmlhbEdlb21ldHJ5Q29udHJvbGxlciwgbmdab25lKTtcbiAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOZ3RJbnN0YW5jZWRNZXNoXSxcbiAgZXhwb3J0czogW05ndEluc3RhbmNlZE1lc2gsIE5ndE1hdGVyaWFsR2VvbWV0cnlDb250cm9sbGVyTW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd0SW5zdGFuY2VkTWVzaE1vZHVsZSB7fVxuIl19