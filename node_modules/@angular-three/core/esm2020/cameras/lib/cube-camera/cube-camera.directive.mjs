var _NgtCubeCamera_cubeCamera;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { NGT_OBJECT_CONTROLLER_PROVIDER, NGT_OBJECT_WATCHED_CONTROLLER, NgtObject3dController, } from '@angular-three/core';
import { Directive, EventEmitter, Inject, Input, NgModule, NgZone, Output, } from '@angular/core';
import * as THREE from 'three';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
export class NgtCubeCamera {
    constructor(objectController, ngZone) {
        this.objectController = objectController;
        this.ngZone = ngZone;
        this.ready = new EventEmitter();
        _NgtCubeCamera_cubeCamera.set(this, void 0);
        objectController.initFn = () => {
            __classPrivateFieldSet(this, _NgtCubeCamera_cubeCamera, new THREE.CubeCamera(...this.args), "f");
            return __classPrivateFieldGet(this, _NgtCubeCamera_cubeCamera, "f");
        };
        objectController.readyFn = () => {
            this.ready.emit(this.cubeCamera);
        };
    }
    get cubeCamera() {
        return __classPrivateFieldGet(this, _NgtCubeCamera_cubeCamera, "f");
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.objectController.init();
        });
    }
}
_NgtCubeCamera_cubeCamera = new WeakMap();
NgtCubeCamera.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtCubeCamera, deps: [{ token: NGT_OBJECT_WATCHED_CONTROLLER }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgtCubeCamera.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtCubeCamera, selector: "ngt-cube-camera", inputs: { args: "args" }, outputs: { ready: "ready" }, providers: [NGT_OBJECT_CONTROLLER_PROVIDER], exportAs: ["ngtCubeCamera"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtCubeCamera, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-cube-camera',
                    exportAs: 'ngtCubeCamera',
                    providers: [NGT_OBJECT_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtObject3dController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_WATCHED_CONTROLLER]
                }] }, { type: i0.NgZone }]; }, propDecorators: { ready: [{
                type: Output
            }], args: [{
                type: Input
            }] } });
export class NgtCubeCameraModule {
}
NgtCubeCameraModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtCubeCameraModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtCubeCameraModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtCubeCameraModule, declarations: [NgtCubeCamera], exports: [NgtCubeCamera] });
NgtCubeCameraModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtCubeCameraModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtCubeCameraModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtCubeCamera],
                    exports: [NgtCubeCamera],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ViZS1jYW1lcmEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9jYW1lcmFzL3NyYy9saWIvY3ViZS1jYW1lcmEvY3ViZS1jYW1lcmEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUNMLDhCQUE4QixFQUM5Qiw2QkFBNkIsRUFDN0IscUJBQXFCLEdBQ3RCLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUVOLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQzs7O0FBTy9CLE1BQU0sT0FBTyxhQUFhO0lBWXhCLFlBRVUsZ0JBQXVDLEVBQ3ZDLE1BQWM7UUFEZCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXVCO1FBQ3ZDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFkZCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQW9CLENBQUM7UUFJdkQsNENBQStCO1FBWTdCLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDN0IsdUJBQUEsSUFBSSw2QkFBZSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQUEsQ0FBQztZQUN0RCxPQUFPLHVCQUFBLElBQUksaUNBQVksQ0FBQztRQUMxQixDQUFDLENBQUM7UUFDRixnQkFBZ0IsQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO1lBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBbEJELElBQUksVUFBVTtRQUNaLE9BQU8sdUJBQUEsSUFBSSxpQ0FBWSxDQUFDO0lBQzFCLENBQUM7SUFrQkQsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OzswR0E5QlUsYUFBYSxrQkFhZCw2QkFBNkI7OEZBYjVCLGFBQWEsaUdBRmIsQ0FBQyw4QkFBOEIsQ0FBQzsyRkFFaEMsYUFBYTtrQkFMekIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixRQUFRLEVBQUUsZUFBZTtvQkFDekIsU0FBUyxFQUFFLENBQUMsOEJBQThCLENBQUM7aUJBQzVDOzswQkFjSSxNQUFNOzJCQUFDLDZCQUE2QjtpRUFaN0IsS0FBSztzQkFBZCxNQUFNO2dCQVNFLElBQUk7c0JBQVosS0FBSzs7QUEyQlIsTUFBTSxPQUFPLG1CQUFtQjs7Z0hBQW5CLG1CQUFtQjtpSEFBbkIsbUJBQW1CLGlCQXJDbkIsYUFBYSxhQUFiLGFBQWE7aUhBcUNiLG1CQUFtQjsyRkFBbkIsbUJBQW1CO2tCQUovQixRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLGFBQWEsQ0FBQztvQkFDN0IsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDO2lCQUN6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE5HVF9PQkpFQ1RfQ09OVFJPTExFUl9QUk9WSURFUixcbiAgTkdUX09CSkVDVF9XQVRDSEVEX0NPTlRST0xMRVIsXG4gIE5ndE9iamVjdDNkQ29udHJvbGxlcixcbn0gZnJvbSAnQGFuZ3VsYXItdGhyZWUvY29yZSc7XG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgTmdNb2R1bGUsXG4gIE5nWm9uZSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICduZ3QtY3ViZS1jYW1lcmEnLFxuICBleHBvcnRBczogJ25ndEN1YmVDYW1lcmEnLFxuICBwcm92aWRlcnM6IFtOR1RfT0JKRUNUX0NPTlRST0xMRVJfUFJPVklERVJdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3RDdWJlQ2FtZXJhIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQE91dHB1dCgpIHJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjxUSFJFRS5DdWJlQ2FtZXJhPigpO1xuXG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9hcmdzOiBDb25zdHJ1Y3RvclBhcmFtZXRlcnM8dHlwZW9mIFRIUkVFLkN1YmVDYW1lcmE+O1xuXG4gICNjdWJlQ2FtZXJhPzogVEhSRUUuQ3ViZUNhbWVyYTtcbiAgZ2V0IGN1YmVDYW1lcmEoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2N1YmVDYW1lcmE7XG4gIH1cblxuICBASW5wdXQoKSBhcmdzITogQ29uc3RydWN0b3JQYXJhbWV0ZXJzPHR5cGVvZiBUSFJFRS5DdWJlQ2FtZXJhPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KE5HVF9PQkpFQ1RfV0FUQ0hFRF9DT05UUk9MTEVSKVxuICAgIHByaXZhdGUgb2JqZWN0Q29udHJvbGxlcjogTmd0T2JqZWN0M2RDb250cm9sbGVyLFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmVcbiAgKSB7XG4gICAgb2JqZWN0Q29udHJvbGxlci5pbml0Rm4gPSAoKSA9PiB7XG4gICAgICB0aGlzLiNjdWJlQ2FtZXJhID0gbmV3IFRIUkVFLkN1YmVDYW1lcmEoLi4udGhpcy5hcmdzKTtcbiAgICAgIHJldHVybiB0aGlzLiNjdWJlQ2FtZXJhO1xuICAgIH07XG4gICAgb2JqZWN0Q29udHJvbGxlci5yZWFkeUZuID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZWFkeS5lbWl0KHRoaXMuY3ViZUNhbWVyYSk7XG4gICAgfTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMub2JqZWN0Q29udHJvbGxlci5pbml0KCk7XG4gICAgfSk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmd0Q3ViZUNhbWVyYV0sXG4gIGV4cG9ydHM6IFtOZ3RDdWJlQ2FtZXJhXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd0Q3ViZUNhbWVyYU1vZHVsZSB7fVxuIl19