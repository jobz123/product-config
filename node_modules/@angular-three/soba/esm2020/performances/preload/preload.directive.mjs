var _NgtSobaPreload_instances, _NgtSobaPreload_precompileParams_get;
import { __classPrivateFieldGet } from "tslib";
import { EnhancedRxState, NgtStore } from '@angular-three/core';
import { Directive, Input, NgModule } from '@angular/core';
import * as THREE from 'three';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
export class NgtSobaPreload extends EnhancedRxState {
    constructor(store) {
        super();
        this.store = store;
        _NgtSobaPreload_instances.add(this);
        this.set({
            all: false,
            scene: undefined,
            camera: undefined,
        });
    }
    set all(v) {
        this.set({ all: v });
    }
    set scene(v) {
        this.set({ scene: v });
    }
    set camera(v) {
        this.set({ camera: v });
    }
    ngOnInit() {
        this.hold(this.store.select('ready'), (ready) => {
            if (ready) {
                const { all, scene, camera, renderer } = __classPrivateFieldGet(this, _NgtSobaPreload_instances, "a", _NgtSobaPreload_precompileParams_get);
                const invisible = [];
                if (all) {
                    scene.traverse((object) => {
                        if (!object.visible) {
                            invisible.push(object);
                            object.visible = true;
                        }
                    });
                }
                // Now compile
                renderer.compile(scene, camera);
                // And for good measure, hit it with a cube camera
                const cubeRenderTarget = new THREE.WebGLCubeRenderTarget(128);
                const cubeCamera = new THREE.CubeCamera(0.01, 100000, cubeRenderTarget);
                cubeCamera.update(renderer, scene);
                cubeRenderTarget.dispose();
                // Flips these objects back
                invisible.forEach((object) => (object.visible = false));
            }
        });
    }
}
_NgtSobaPreload_instances = new WeakSet(), _NgtSobaPreload_precompileParams_get = function _NgtSobaPreload_precompileParams_get() {
    const { all, scene, camera } = this.get();
    const { camera: canvasCamera, scene: canvasScene, renderer, } = this.store.get();
    return {
        all,
        scene: scene || canvasScene,
        camera: camera || canvasCamera,
        renderer,
    };
};
NgtSobaPreload.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaPreload, deps: [{ token: i1.NgtStore }], target: i0.ɵɵFactoryTarget.Directive });
NgtSobaPreload.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaPreload, selector: "ngt-soba-preload", inputs: { all: "all", scene: "scene", camera: "camera" }, exportAs: ["ngtSobaPreload"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaPreload, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-soba-preload',
                    exportAs: 'ngtSobaPreload',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtStore }]; }, propDecorators: { all: [{
                type: Input
            }], scene: [{
                type: Input
            }], camera: [{
                type: Input
            }] } });
export class NgtSobaPreloadModule {
}
NgtSobaPreloadModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaPreloadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaPreloadModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaPreloadModule, declarations: [NgtSobaPreload], exports: [NgtSobaPreload] });
NgtSobaPreloadModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaPreloadModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaPreloadModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaPreload],
                    exports: [NgtSobaPreload],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zb2JhL3BlcmZvcm1hbmNlcy9zcmMvcHJlbG9hZC9wcmVsb2FkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDOzs7QUFZL0IsTUFBTSxPQUFPLGNBQ1gsU0FBUSxlQUFvQztJQThCNUMsWUFBb0IsS0FBZTtRQUNqQyxLQUFLLEVBQUUsQ0FBQztRQURVLFVBQUssR0FBTCxLQUFLLENBQVU7O1FBRWpDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDUCxHQUFHLEVBQUUsS0FBSztZQUNWLEtBQUssRUFBRSxTQUFTO1lBQ2hCLE1BQU0sRUFBRSxTQUFTO1NBQ2xCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFsQ0QsSUFBYSxHQUFHLENBQUMsQ0FBVTtRQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQWEsS0FBSyxDQUFDLENBQWlCO1FBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBYSxNQUFNLENBQUMsQ0FBZTtRQUNqQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQTBCRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzlDLElBQUksS0FBSyxFQUFFO2dCQUNULE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyx1QkFBQSxJQUFJLHVFQUFrQixDQUFDO2dCQUNoRSxNQUFNLFNBQVMsR0FBcUIsRUFBRSxDQUFDO2dCQUV2QyxJQUFJLEdBQUcsRUFBRTtvQkFDUCxLQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7d0JBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFOzRCQUNuQixTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzRCQUN2QixNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQzt5QkFDdkI7b0JBQ0gsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7Z0JBRUQsY0FBYztnQkFDZCxRQUFTLENBQUMsT0FBTyxDQUFDLEtBQU0sRUFBRSxNQUFPLENBQUMsQ0FBQztnQkFDbkMsa0RBQWtEO2dCQUNsRCxNQUFNLGdCQUFnQixHQUFHLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM5RCxNQUFNLFVBQVUsR0FBRyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN4RSxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVMsRUFBRSxLQUFvQixDQUFDLENBQUM7Z0JBQ25ELGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUMzQiwyQkFBMkI7Z0JBQzNCLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ3pEO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7SUFqREMsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzFDLE1BQU0sRUFDSixNQUFNLEVBQUUsWUFBWSxFQUNwQixLQUFLLEVBQUUsV0FBVyxFQUNsQixRQUFRLEdBQ1QsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLE9BQU87UUFDTCxHQUFHO1FBQ0gsS0FBSyxFQUFFLEtBQUssSUFBSSxXQUFXO1FBQzNCLE1BQU0sRUFBRSxNQUFNLElBQUksWUFBWTtRQUM5QixRQUFRO0tBQ1QsQ0FBQztBQUNKLENBQUM7MkdBN0JVLGNBQWM7K0ZBQWQsY0FBYzsyRkFBZCxjQUFjO2tCQUoxQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSxnQkFBZ0I7aUJBQzNCOytGQUtjLEdBQUc7c0JBQWYsS0FBSztnQkFJTyxLQUFLO3NCQUFqQixLQUFLO2dCQUlPLE1BQU07c0JBQWxCLEtBQUs7O0FBNkRSLE1BQU0sT0FBTyxvQkFBb0I7O2lIQUFwQixvQkFBb0I7a0hBQXBCLG9CQUFvQixpQkF6RXBCLGNBQWMsYUFBZCxjQUFjO2tIQXlFZCxvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFKaEMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxjQUFjLENBQUM7b0JBQzlCLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztpQkFDMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbmhhbmNlZFJ4U3RhdGUsIE5ndFN0b3JlIH0gZnJvbSAnQGFuZ3VsYXItdGhyZWUvY29yZSc7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBOZ01vZHVsZSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmludGVyZmFjZSBOZ3RTb2JhUHJlbG9hZFN0YXRlIHtcbiAgYWxsOiBib29sZWFuO1xuICBzY2VuZT86IFRIUkVFLk9iamVjdDNEO1xuICBjYW1lcmE/OiBUSFJFRS5DYW1lcmE7XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ25ndC1zb2JhLXByZWxvYWQnLFxuICBleHBvcnRBczogJ25ndFNvYmFQcmVsb2FkJyxcbn0pXG5leHBvcnQgY2xhc3MgTmd0U29iYVByZWxvYWRcbiAgZXh0ZW5kcyBFbmhhbmNlZFJ4U3RhdGU8Tmd0U29iYVByZWxvYWRTdGF0ZT5cbiAgaW1wbGVtZW50cyBPbkluaXRcbntcbiAgQElucHV0KCkgc2V0IGFsbCh2OiBib29sZWFuKSB7XG4gICAgdGhpcy5zZXQoeyBhbGw6IHYgfSk7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgc2NlbmUodjogVEhSRUUuT2JqZWN0M0QpIHtcbiAgICB0aGlzLnNldCh7IHNjZW5lOiB2IH0pO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IGNhbWVyYSh2OiBUSFJFRS5DYW1lcmEpIHtcbiAgICB0aGlzLnNldCh7IGNhbWVyYTogdiB9KTtcbiAgfVxuXG4gIGdldCAjcHJlY29tcGlsZVBhcmFtcygpIHtcbiAgICBjb25zdCB7IGFsbCwgc2NlbmUsIGNhbWVyYSB9ID0gdGhpcy5nZXQoKTtcbiAgICBjb25zdCB7XG4gICAgICBjYW1lcmE6IGNhbnZhc0NhbWVyYSxcbiAgICAgIHNjZW5lOiBjYW52YXNTY2VuZSxcbiAgICAgIHJlbmRlcmVyLFxuICAgIH0gPSB0aGlzLnN0b3JlLmdldCgpO1xuICAgIHJldHVybiB7XG4gICAgICBhbGwsXG4gICAgICBzY2VuZTogc2NlbmUgfHwgY2FudmFzU2NlbmUsXG4gICAgICBjYW1lcmE6IGNhbWVyYSB8fCBjYW52YXNDYW1lcmEsXG4gICAgICByZW5kZXJlcixcbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yZTogTmd0U3RvcmUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2V0KHtcbiAgICAgIGFsbDogZmFsc2UsXG4gICAgICBzY2VuZTogdW5kZWZpbmVkLFxuICAgICAgY2FtZXJhOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmhvbGQodGhpcy5zdG9yZS5zZWxlY3QoJ3JlYWR5JyksIChyZWFkeSkgPT4ge1xuICAgICAgaWYgKHJlYWR5KSB7XG4gICAgICAgIGNvbnN0IHsgYWxsLCBzY2VuZSwgY2FtZXJhLCByZW5kZXJlciB9ID0gdGhpcy4jcHJlY29tcGlsZVBhcmFtcztcbiAgICAgICAgY29uc3QgaW52aXNpYmxlOiBUSFJFRS5PYmplY3QzRFtdID0gW107XG5cbiAgICAgICAgaWYgKGFsbCkge1xuICAgICAgICAgIHNjZW5lIS50cmF2ZXJzZSgob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIW9iamVjdC52aXNpYmxlKSB7XG4gICAgICAgICAgICAgIGludmlzaWJsZS5wdXNoKG9iamVjdCk7XG4gICAgICAgICAgICAgIG9iamVjdC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vdyBjb21waWxlXG4gICAgICAgIHJlbmRlcmVyIS5jb21waWxlKHNjZW5lISwgY2FtZXJhISk7XG4gICAgICAgIC8vIEFuZCBmb3IgZ29vZCBtZWFzdXJlLCBoaXQgaXQgd2l0aCBhIGN1YmUgY2FtZXJhXG4gICAgICAgIGNvbnN0IGN1YmVSZW5kZXJUYXJnZXQgPSBuZXcgVEhSRUUuV2ViR0xDdWJlUmVuZGVyVGFyZ2V0KDEyOCk7XG4gICAgICAgIGNvbnN0IGN1YmVDYW1lcmEgPSBuZXcgVEhSRUUuQ3ViZUNhbWVyYSgwLjAxLCAxMDAwMDAsIGN1YmVSZW5kZXJUYXJnZXQpO1xuICAgICAgICBjdWJlQ2FtZXJhLnVwZGF0ZShyZW5kZXJlciEsIHNjZW5lIGFzIFRIUkVFLlNjZW5lKTtcbiAgICAgICAgY3ViZVJlbmRlclRhcmdldC5kaXNwb3NlKCk7XG4gICAgICAgIC8vIEZsaXBzIHRoZXNlIG9iamVjdHMgYmFja1xuICAgICAgICBpbnZpc2libGUuZm9yRWFjaCgob2JqZWN0KSA9PiAob2JqZWN0LnZpc2libGUgPSBmYWxzZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05ndFNvYmFQcmVsb2FkXSxcbiAgZXhwb3J0czogW05ndFNvYmFQcmVsb2FkXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd0U29iYVByZWxvYWRNb2R1bGUge31cbiJdfQ==