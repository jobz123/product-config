import { NGT_OBJECT_3D_PROVIDER, NgtMaterial } from '@angular-three/core';
import { Directive, NgModule } from '@angular/core';
import * as THREE from 'three';
import * as i0 from "@angular/core";
export class StarFieldMaterial extends THREE.ShaderMaterial {
    constructor() {
        super({
            uniforms: { time: { value: 0.0 }, fade: { value: 1.0 } },
            vertexShader: /* glsl */ `
      uniform float time;
      attribute float size;
      varying vec3 vColor;
      void main() {
        vColor = color;
        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);
        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));
        gl_Position = projectionMatrix * mvPosition;
      }`,
            fragmentShader: /* glsl */ `
      uniform sampler2D pointTexture;
      uniform float fade;
      varying vec3 vColor;
      void main() {
        float opacity = 1.0;
        if (fade == 1.0) {
          float d = distance(gl_PointCoord, vec2(0.5, 0.5));
          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));
        }
        gl_FragColor = vec4(vColor, opacity);
      }`,
        });
    }
}
export class NgtSobaStarFieldMaterial extends NgtMaterial {
    constructor() {
        super(...arguments);
        this.materialType = StarFieldMaterial;
    }
}
NgtSobaStarFieldMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarFieldMaterial, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NgtSobaStarFieldMaterial.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaStarFieldMaterial, selector: "ngt-soba-star-field-material", providers: [
        { provide: NgtMaterial, useExisting: NgtSobaStarFieldMaterial },
        NGT_OBJECT_3D_PROVIDER,
    ], exportAs: ["ngtSobaStarFieldMaterial"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarFieldMaterial, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-soba-star-field-material',
                    exportAs: 'ngtSobaStarFieldMaterial',
                    providers: [
                        { provide: NgtMaterial, useExisting: NgtSobaStarFieldMaterial },
                        NGT_OBJECT_3D_PROVIDER,
                    ],
                }]
        }] });
export class NgtSobaStarFieldMaterialModule {
}
NgtSobaStarFieldMaterialModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarFieldMaterialModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaStarFieldMaterialModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarFieldMaterialModule, declarations: [NgtSobaStarFieldMaterial], exports: [NgtSobaStarFieldMaterial] });
NgtSobaStarFieldMaterialModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarFieldMaterialModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarFieldMaterialModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaStarFieldMaterial],
                    exports: [NgtSobaStarFieldMaterial],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1tYXRlcmlhbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zb2JhL3N0YWdpbmcvc3JjL3N0YXJzL3N0YXItbWF0ZXJpYWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQzs7QUFFL0IsTUFBTSxPQUFPLGlCQUFrQixTQUFRLEtBQUssQ0FBQyxjQUFjO0lBQ3pEO1FBQ0UsS0FBSyxDQUFDO1lBQ0osUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUN4RCxZQUFZLEVBQUUsVUFBVSxDQUFDOzs7Ozs7Ozs7UUFTdkI7WUFDRixjQUFjLEVBQUUsVUFBVSxDQUFDOzs7Ozs7Ozs7OztRQVd6QjtTQUNILENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQVVELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxXQUc3QztJQVhEOztRQWdCRSxpQkFBWSxHQUFHLGlCQUFpQixDQUFDO0tBQ2xDOztxSEFUWSx3QkFBd0I7eUdBQXhCLHdCQUF3Qix1REFMeEI7UUFDVCxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLHdCQUF3QixFQUFFO1FBQy9ELHNCQUFzQjtLQUN2QjsyRkFFVSx3QkFBd0I7a0JBUnBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsUUFBUSxFQUFFLDBCQUEwQjtvQkFDcEMsU0FBUyxFQUFFO3dCQUNULEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLDBCQUEwQixFQUFFO3dCQUMvRCxzQkFBc0I7cUJBQ3ZCO2lCQUNGOztBQWdCRCxNQUFNLE9BQU8sOEJBQThCOzsySEFBOUIsOEJBQThCOzRIQUE5Qiw4QkFBOEIsaUJBZjlCLHdCQUF3QixhQUF4Qix3QkFBd0I7NEhBZXhCLDhCQUE4QjsyRkFBOUIsOEJBQThCO2tCQUoxQyxRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLHdCQUF3QixDQUFDO29CQUN4QyxPQUFPLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztpQkFDcEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOR1RfT0JKRUNUXzNEX1BST1ZJREVSLCBOZ3RNYXRlcmlhbCB9IGZyb20gJ0Bhbmd1bGFyLXRocmVlL2NvcmUnO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5leHBvcnQgY2xhc3MgU3RhckZpZWxkTWF0ZXJpYWwgZXh0ZW5kcyBUSFJFRS5TaGFkZXJNYXRlcmlhbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIHVuaWZvcm1zOiB7IHRpbWU6IHsgdmFsdWU6IDAuMCB9LCBmYWRlOiB7IHZhbHVlOiAxLjAgfSB9LFxuICAgICAgdmVydGV4U2hhZGVyOiAvKiBnbHNsICovIGBcbiAgICAgIHVuaWZvcm0gZmxvYXQgdGltZTtcbiAgICAgIGF0dHJpYnV0ZSBmbG9hdCBzaXplO1xuICAgICAgdmFyeWluZyB2ZWMzIHZDb2xvcjtcbiAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgdkNvbG9yID0gY29sb3I7XG4gICAgICAgIHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDAuNSk7XG4gICAgICAgIGdsX1BvaW50U2l6ZSA9IHNpemUgKiAoMzAuMCAvIC1tdlBvc2l0aW9uLnopICogKDMuMCArIHNpbihtdlBvc2l0aW9uLnggKyAyLjAgKiB0aW1lICsgMTAwLjApKTtcbiAgICAgICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcbiAgICAgIH1gLFxuICAgICAgZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi8gYFxuICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgcG9pbnRUZXh0dXJlO1xuICAgICAgdW5pZm9ybSBmbG9hdCBmYWRlO1xuICAgICAgdmFyeWluZyB2ZWMzIHZDb2xvcjtcbiAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgZmxvYXQgb3BhY2l0eSA9IDEuMDtcbiAgICAgICAgaWYgKGZhZGUgPT0gMS4wKSB7XG4gICAgICAgICAgZmxvYXQgZCA9IGRpc3RhbmNlKGdsX1BvaW50Q29vcmQsIHZlYzIoMC41LCAwLjUpKTtcbiAgICAgICAgICBvcGFjaXR5ID0gMS4wIC8gKDEuMCArIGV4cCgxNi4wICogKGQgLSAwLjI1KSkpO1xuICAgICAgICB9XG4gICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQodkNvbG9yLCBvcGFjaXR5KTtcbiAgICAgIH1gLFxuICAgIH0pO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ25ndC1zb2JhLXN0YXItZmllbGQtbWF0ZXJpYWwnLFxuICBleHBvcnRBczogJ25ndFNvYmFTdGFyRmllbGRNYXRlcmlhbCcsXG4gIHByb3ZpZGVyczogW1xuICAgIHsgcHJvdmlkZTogTmd0TWF0ZXJpYWwsIHVzZUV4aXN0aW5nOiBOZ3RTb2JhU3RhckZpZWxkTWF0ZXJpYWwgfSxcbiAgICBOR1RfT0JKRUNUXzNEX1BST1ZJREVSLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3RTb2JhU3RhckZpZWxkTWF0ZXJpYWwgZXh0ZW5kcyBOZ3RNYXRlcmlhbDxcbiAgVEhSRUUuU2hhZGVyTWF0ZXJpYWxQYXJhbWV0ZXJzLFxuICBTdGFyRmllbGRNYXRlcmlhbFxuPiB7XG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9wYXJhbWV0ZXJzOlxuICAgIHwgVEhSRUUuU2hhZGVyTWF0ZXJpYWxQYXJhbWV0ZXJzXG4gICAgfCB1bmRlZmluZWQ7XG5cbiAgbWF0ZXJpYWxUeXBlID0gU3RhckZpZWxkTWF0ZXJpYWw7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05ndFNvYmFTdGFyRmllbGRNYXRlcmlhbF0sXG4gIGV4cG9ydHM6IFtOZ3RTb2JhU3RhckZpZWxkTWF0ZXJpYWxdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3RTb2JhU3RhckZpZWxkTWF0ZXJpYWxNb2R1bGUge31cbiJdfQ==