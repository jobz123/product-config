import { EnhancedRxState, NgtSobaExtender, } from '@angular-three/core';
import { NgtBufferAttributeModule } from '@angular-three/core/attributes';
import { NgtBufferGeometryModule } from '@angular-three/core/geometries';
import { NgtPointsModule } from '@angular-three/core/points';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Injectable, Input, NgModule, } from '@angular/core';
import { selectSlice } from '@rx-angular/state';
import { map } from 'rxjs';
import * as THREE from 'three';
import { NgtSobaStarFieldMaterialModule, } from './star-material.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core/points";
import * as i2 from "@angular-three/core";
import * as i3 from "@angular/common";
import * as i4 from "@angular-three/core/geometries";
import * as i5 from "@angular-three/core/attributes";
import * as i6 from "./star-material.directive";
const genStar = (r) => {
    return new THREE.Vector3().setFromSpherical(new THREE.Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));
};
export class NgtSobaStarsStore extends EnhancedRxState {
    constructor() {
        super();
        this.attributes$ = this.select(selectSlice(['radius', 'depth', 'count', 'factor', 'saturation']), map(({ depth, count, factor, radius, saturation }) => {
            const positions = [];
            const colors = [];
            const sizes = Array.from({ length: count }, () => (0.5 + 0.5 * Math.random()) * factor);
            const color = new THREE.Color();
            let r = radius + depth;
            const increment = depth / count;
            for (let i = 0; i < count; i++) {
                r -= increment * Math.random();
                positions.push(...genStar(r).toArray());
                color.setHSL(i / count, saturation, 0.9);
                colors.push(color.r, color.g, color.b);
            }
            return {
                positions: new Float32Array(positions),
                colors: new Float32Array(colors),
                sizes: new Float32Array(sizes),
                fade: this.get('fade'),
            };
        }));
        this.set({
            radius: 100,
            depth: 50,
            count: 5000,
            saturation: 0,
            factor: 4,
            fade: false,
        });
    }
}
NgtSobaStarsStore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarsStore, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgtSobaStarsStore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarsStore });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarsStore, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
export class NgtSobaStars extends NgtSobaExtender {
    constructor(sobaStarsStore) {
        super();
        this.sobaStarsStore = sobaStarsStore;
        this.blending = THREE.AdditiveBlending;
        this.attributes$ = this.sobaStarsStore.attributes$;
    }
    set radius(radius) {
        this.sobaStarsStore.set({ radius });
    }
    set depth(depth) {
        this.sobaStarsStore.set({ depth });
    }
    set count(count) {
        this.sobaStarsStore.set({ count });
    }
    set factor(factor) {
        this.sobaStarsStore.set({ factor });
    }
    set saturation(saturation) {
        this.sobaStarsStore.set({ saturation });
    }
    set fade(fade) {
        this.sobaStarsStore.set({ fade });
    }
    onAnimate({ clock }) {
        if (this.starMaterial) {
            this.starMaterial.uniforms.time.value = clock.getElapsedTime();
        }
    }
}
NgtSobaStars.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStars, deps: [{ token: NgtSobaStarsStore }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaStars.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaStars, selector: "ngt-soba-stars", inputs: { radius: "radius", depth: "depth", count: "count", factor: "factor", saturation: "saturation", fade: "fade" }, providers: [
        {
            provide: NgtSobaExtender,
            useExisting: NgtSobaStars,
        },
        NgtSobaStarsStore,
    ], usesInheritance: true, ngImport: i0, template: `
    <ngt-points (ready)="object = $event" (animateReady)="onAnimate($event)">
      <ng-container *ngIf="attributes$ | async as attributes">
        <ngt-buffer-geometry>
          <ngt-buffer-attribute
            attach="position"
            [args]="[attributes.positions, 3]"
          ></ngt-buffer-attribute>
          <ngt-buffer-attribute
            attach="color"
            [args]="[attributes.colors, 3]"
          ></ngt-buffer-attribute>
          <ngt-buffer-attribute
            attach="size"
            [args]="[attributes.sizes, 1]"
          ></ngt-buffer-attribute>
        </ngt-buffer-geometry>
        <ngt-soba-star-field-material
          #sobaStarFieldMaterial="ngtSobaStarFieldMaterial"
          (ready)="starMaterial = $event"
          [parameters]="{
            vertexColors: true,
            transparent: true,
            blending: this.blending,
            uniforms: {
              fade: { value: attributes.fade },
              time: sobaStarFieldMaterial.material?.uniforms?.time || {
                value: 0
              }
            }
          }"
        ></ngt-soba-star-field-material>
      </ng-container>
    </ngt-points>
  `, isInline: true, directives: [{ type: i1.NgtPoints, selector: "ngt-points", outputs: ["ready"], exportAs: ["ngtPoints"] }, { type: i2.NgtMaterialGeometryController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-points  ", inputs: ["morphTargetInfluences", "morphTargetDictionary"], exportAs: ["ngtMaterialGeometryController"] }, { type: i2.NgtObject3dController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera  ", exportAs: ["ngtObject3dController"] }, { type: i2.NgtObject3dInputsController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-billboard,    ngt-soba-detailed,    ngt-soba-line,    ngt-soba-quadratic-bezier-line,    ngt-soba-cubic-bezier-line,    ngt-soba-orthographic-camera,    ngt-soba-gizmo-helper,    ngt-soba-gizmo-viewport,    ngt-soba-gizmo-axis-head,    ngt-soba-text  ", inputs: ["name", "position", "rotation", "quaternion", "scale", "color", "userData", "castShadow", "receiveShadow", "visible", "matrixAutoUpdate", "dispose", "raycast", "appendMode", "appendTo", "object3dInputsController"], outputs: ["click", "contextmenu", "dblclick", "pointerup", "pointerdown", "pointerover", "pointerout", "pointerenter", "pointerleave", "pointermove", "pointermissed", "pointercancel", "wheel"], exportAs: ["ngtObject3dInputsController"] }, { type: i2.NgtContentMaterialController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-text,,    ngt-points  ", inputs: ["material", "isMaterialArray", "contentMaterialController"], exportAs: ["ngtContentMaterialController"] }, { type: i2.NgtContentGeometryController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-points  ", inputs: ["geometry", "contentGeometryController"], exportAs: ["ngtContentGeometryController"] }, { type: i2.NgtAnimationSubscriberController, selector: "[animateReady]", inputs: ["priority"], outputs: ["animateReady"], exportAs: ["ngtAnimationSubscriberController"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgtBufferGeometry, selector: "ngt-buffer-geometry", inputs: ["args"], exportAs: ["ngtBufferGeometry"] }, { type: i5.NgtBufferAttribute, selector: "ngt-buffer-attribute", inputs: ["args"], exportAs: ["ngtBufferAttribute"] }, { type: i6.NgtSobaStarFieldMaterial, selector: "ngt-soba-star-field-material", exportAs: ["ngtSobaStarFieldMaterial"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStars, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-stars',
                    template: `
    <ngt-points (ready)="object = $event" (animateReady)="onAnimate($event)">
      <ng-container *ngIf="attributes$ | async as attributes">
        <ngt-buffer-geometry>
          <ngt-buffer-attribute
            attach="position"
            [args]="[attributes.positions, 3]"
          ></ngt-buffer-attribute>
          <ngt-buffer-attribute
            attach="color"
            [args]="[attributes.colors, 3]"
          ></ngt-buffer-attribute>
          <ngt-buffer-attribute
            attach="size"
            [args]="[attributes.sizes, 1]"
          ></ngt-buffer-attribute>
        </ngt-buffer-geometry>
        <ngt-soba-star-field-material
          #sobaStarFieldMaterial="ngtSobaStarFieldMaterial"
          (ready)="starMaterial = $event"
          [parameters]="{
            vertexColors: true,
            transparent: true,
            blending: this.blending,
            uniforms: {
              fade: { value: attributes.fade },
              time: sobaStarFieldMaterial.material?.uniforms?.time || {
                value: 0
              }
            }
          }"
        ></ngt-soba-star-field-material>
      </ng-container>
    </ngt-points>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NgtSobaExtender,
                            useExisting: NgtSobaStars,
                        },
                        NgtSobaStarsStore,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: NgtSobaStarsStore }]; }, propDecorators: { radius: [{
                type: Input
            }], depth: [{
                type: Input
            }], count: [{
                type: Input
            }], factor: [{
                type: Input
            }], saturation: [{
                type: Input
            }], fade: [{
                type: Input
            }] } });
export class NgtSobaStarsModule {
}
NgtSobaStarsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaStarsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarsModule, declarations: [NgtSobaStars], imports: [NgtPointsModule,
        NgtBufferGeometryModule,
        NgtBufferAttributeModule,
        NgtSobaStarFieldMaterialModule,
        CommonModule], exports: [NgtSobaStars] });
NgtSobaStarsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarsModule, imports: [[
            NgtPointsModule,
            NgtBufferGeometryModule,
            NgtBufferAttributeModule,
            NgtSobaStarFieldMaterialModule,
            CommonModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaStarsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaStars],
                    exports: [NgtSobaStars],
                    imports: [
                        NgtPointsModule,
                        NgtBufferGeometryModule,
                        NgtBufferAttributeModule,
                        NgtSobaStarFieldMaterialModule,
                        CommonModule,
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,