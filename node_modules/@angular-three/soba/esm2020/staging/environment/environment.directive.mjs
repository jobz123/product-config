var _NgtSobaEnvironment_instances, _NgtSobaEnvironment_textureParams$, _NgtSobaEnvironment_environmentParams$, _NgtSobaEnvironment_isCubeMap_get;
import { __classPrivateFieldGet } from "tslib";
import { EnhancedRxState, NgtLoaderService, NgtStore, } from '@angular-three/core';
import { presetsObj } from '@angular-three/soba';
import { Directive, Input, NgModule, NgZone } from '@angular/core';
import { selectSlice } from '@rx-angular/state';
import { combineLatest, map, startWith, switchMap } from 'rxjs';
import * as THREE from 'three';
import { RGBELoader } from 'three-stdlib';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
const CUBEMAP_ROOT = 'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2';
export class NgtSobaEnvironment extends EnhancedRxState {
    constructor(loaderService, ngZone, store) {
        super();
        this.loaderService = loaderService;
        this.ngZone = ngZone;
        this.store = store;
        _NgtSobaEnvironment_instances.add(this);
        _NgtSobaEnvironment_textureParams$.set(this, combineLatest([
            this.select(selectSlice(['files', 'path'])),
            this.select('extensions').pipe(startWith(undefined)),
        ]).pipe(map(([{ path, files }, extensions]) => {
            const loader = __classPrivateFieldGet(this, _NgtSobaEnvironment_instances, "a", _NgtSobaEnvironment_isCubeMap_get) ? THREE.CubeTextureLoader : RGBELoader;
            const urls = __classPrivateFieldGet(this, _NgtSobaEnvironment_instances, "a", _NgtSobaEnvironment_isCubeMap_get) ? [files] : files;
            return { loader, urls, path, extensions };
        })));
        _NgtSobaEnvironment_environmentParams$.set(this, combineLatest([
            this.select(selectSlice(['texture', 'background'])),
            this.select('scene').pipe(startWith(undefined)),
        ]).pipe(map(([{ texture, background }, scene]) => ({ texture, background, scene }))));
        this.set({
            background: false,
            files: ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],
            path: '',
            scene: undefined,
            extensions: undefined,
        });
    }
    set background(v) {
        this.set({ background: v });
    }
    set files(v) {
        this.set({ files: v });
    }
    set path(v) {
        this.set({ path: v });
    }
    set preset(v) {
        if (!(v in presetsObj)) {
            throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));
        }
        this.set({ files: presetsObj[v], path: CUBEMAP_ROOT + '/hdri/' });
    }
    set scene(v) {
        this.set({ scene: v });
    }
    set extensions(v) {
        this.set({ extensions: v });
    }
    ngOnInit() {
        this.hold(__classPrivateFieldGet(this, _NgtSobaEnvironment_textureParams$, "f").pipe(switchMap(({ path, extensions, loader, urls }) => 
        // @ts-ignore
        this.loaderService.use(loader, urls, (innerLoader) => {
            innerLoader.setPath(path);
            if (extensions) {
                extensions(innerLoader);
            }
        }))), (textureResult) => {
            const renderer = this.store.get('renderer');
            const gen = new THREE.PMREMGenerator(renderer);
            const texture = NgtSobaEnvironment.getTexture(textureResult, gen, __classPrivateFieldGet(this, _NgtSobaEnvironment_instances, "a", _NgtSobaEnvironment_isCubeMap_get));
            gen.dispose();
            this.set({ texture });
        });
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaEnvironment_environmentParams$, "f"), ({ texture, scene, background }) => {
            const defaultScene = this.store.get('scene');
            const oldBg = scene ? scene.background : defaultScene.background;
            const oldEnv = scene ? scene.environment : defaultScene.environment;
            if (scene) {
                scene.environment = texture;
                if (background)
                    scene.background = texture;
            }
            else {
                defaultScene.environment = texture;
                if (background)
                    defaultScene.background = texture;
            }
            return () => {
                if (scene) {
                    scene.environment = oldEnv;
                    scene.background = oldBg;
                }
                else {
                    defaultScene.environment = oldEnv;
                    defaultScene.background = oldBg;
                }
                texture.dispose();
            };
        });
    }
    static getTexture(texture, gen, isCubeMap) {
        if (isCubeMap) {
            gen.compileEquirectangularShader();
            return gen.fromCubemap(texture).texture;
        }
        return gen.fromEquirectangular(texture).texture;
    }
}
_NgtSobaEnvironment_textureParams$ = new WeakMap(), _NgtSobaEnvironment_environmentParams$ = new WeakMap(), _NgtSobaEnvironment_instances = new WeakSet(), _NgtSobaEnvironment_isCubeMap_get = function _NgtSobaEnvironment_isCubeMap_get() {
    return Array.isArray(this.get('files'));
};
NgtSobaEnvironment.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaEnvironment, deps: [{ token: i1.NgtLoaderService }, { token: i0.NgZone }, { token: i1.NgtStore }], target: i0.ɵɵFactoryTarget.Directive });
NgtSobaEnvironment.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaEnvironment, selector: "ngt-soba-environment", inputs: { background: "background", files: "files", path: "path", preset: "preset", scene: "scene", extensions: "extensions" }, exportAs: ["ngtSobaEnvironment"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaEnvironment, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-soba-environment',
                    exportAs: 'ngtSobaEnvironment',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtLoaderService }, { type: i0.NgZone }, { type: i1.NgtStore }]; }, propDecorators: { background: [{
                type: Input
            }], files: [{
                type: Input
            }], path: [{
                type: Input
            }], preset: [{
                type: Input
            }], scene: [{
                type: Input
            }], extensions: [{
                type: Input
            }] } });
export class NgtSobaEnvironmentModule {
}
NgtSobaEnvironmentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaEnvironmentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaEnvironmentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaEnvironmentModule, declarations: [NgtSobaEnvironment], exports: [NgtSobaEnvironment] });
NgtSobaEnvironmentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaEnvironmentModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaEnvironmentModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaEnvironment],
                    exports: [NgtSobaEnvironment],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,