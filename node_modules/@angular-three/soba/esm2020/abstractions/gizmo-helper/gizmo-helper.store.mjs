var _NgtSobaGizmoHelperStore_instances, _NgtSobaGizmoHelperStore_animating, _NgtSobaGizmoHelperStore_focusPoint, _NgtSobaGizmoHelperStore_radius, _NgtSobaGizmoHelperStore_ready$, _NgtSobaGizmoHelperStore_animateStep, _NgtSobaGizmoHelperStore_beforeRender;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { EnhancedRxState, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NgtAnimationFrameStore, NgtLoopService, NgtObject3dInputsController, NgtStore, } from '@angular-three/core';
import { Inject, Injectable, NgZone } from '@angular/core';
import { selectSlice } from '@rx-angular/state';
import { combineLatest, filter, map } from 'rxjs';
import * as THREE from 'three';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
const turnRate = 2 * Math.PI; // turn rate in angles per second
const dummy = new THREE.Object3D();
const matrix = new THREE.Matrix4();
const [q1, q2] = [new THREE.Quaternion(), new THREE.Quaternion()];
const target = new THREE.Vector3();
const targetPosition = new THREE.Vector3();
export class NgtSobaGizmoHelperStore extends EnhancedRxState {
    constructor(objectInputsController, animationFrameStore, ngZone, store, loopService) {
        super();
        this.store = store;
        this.loopService = loopService;
        _NgtSobaGizmoHelperStore_instances.add(this);
        _NgtSobaGizmoHelperStore_animating.set(this, false);
        _NgtSobaGizmoHelperStore_focusPoint.set(this, new THREE.Vector3());
        _NgtSobaGizmoHelperStore_radius.set(this, 0);
        this.actions = this.create();
        this.gizmoProps$ = combineLatest([
            this.select(selectSlice(['margin', 'alignment', 'objectInputsController'])),
            this.store.select('size'),
        ]).pipe(map(([{ alignment, margin: [marginX, marginY], objectInputsController, }, size,]) => {
            const x = alignment.endsWith('-left')
                ? -size.width / 2 + marginX
                : size.width / 2 - marginX;
            const y = alignment.startsWith('top-')
                ? size.height / 2 - marginY
                : -size.height / 2 + marginY;
            objectInputsController.position = [x, y, 0];
            return {
                objectInputsController,
                x,
                y,
            };
        }));
        _NgtSobaGizmoHelperStore_ready$.set(this, combineLatest([
            this.actions.init$,
            this.store.select('ready').pipe(filter((ready) => ready)),
        ]));
        const virtualScene = new THREE.Scene();
        objectInputsController.appendTo = virtualScene;
        this.set({
            alignment: 'bottom-right',
            margin: [80, 80],
            renderPriority: 0,
            virtualScene,
            objectInputsController,
        });
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaGizmoHelperStore_ready$, "f"), () => {
            return ngZone.runOutsideAngular(() => {
                let mainSceneBackground;
                const scene = this.store.get('scene');
                const virtualScene = this.get('virtualScene');
                if (scene.background) {
                    mainSceneBackground = scene.background;
                    scene.background = null;
                    virtualScene.background = mainSceneBackground;
                }
                return () => {
                    if (mainSceneBackground) {
                        scene.background = mainSceneBackground;
                    }
                };
            });
        });
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaGizmoHelperStore_ready$, "f"), () => {
            return ngZone.runOutsideAngular(() => {
                const priority = this.get('renderPriority');
                const renderer = this.store.get('renderer');
                const animationUuid = animationFrameStore.register({
                    callback: ({ delta }) => {
                        const { virtualScene, virtualCamera, gizmo } = this.get();
                        if (virtualCamera && gizmo) {
                            __classPrivateFieldGet(this, _NgtSobaGizmoHelperStore_instances, "m", _NgtSobaGizmoHelperStore_animateStep).call(this, delta);
                            __classPrivateFieldGet(this, _NgtSobaGizmoHelperStore_instances, "m", _NgtSobaGizmoHelperStore_beforeRender).call(this);
                            renderer.autoClear = false;
                            renderer.clearDepth();
                            renderer.render(virtualScene, virtualCamera);
                        }
                    },
                    priority,
                });
                return () => {
                    animationFrameStore.actions.unsubscriberUuid(animationUuid);
                };
            });
        });
        this.connect('raycast', this.select('virtualCamera'), (_, virtualCamera) => {
            const mouse = this.store.get('mouse');
            const raycaster = new THREE.Raycaster();
            return function (_, intersects) {
                raycaster.setFromCamera(mouse, virtualCamera);
                const rc = this.constructor.prototype.raycast.bind(this);
                if (rc) {
                    rc(raycaster, intersects);
                }
            };
        });
    }
    tweenCamera(direction) {
        const { controls: defaultControls, camera: mainCamera } = this.store.get();
        __classPrivateFieldSet(this, _NgtSobaGizmoHelperStore_animating, true, "f");
        if (defaultControls) {
            __classPrivateFieldSet(this, _NgtSobaGizmoHelperStore_focusPoint, defaultControls.target, "f");
        }
        __classPrivateFieldSet(this, _NgtSobaGizmoHelperStore_radius, mainCamera.position.distanceTo(target), "f");
        // Rotate from current camera orientation
        q1.copy(mainCamera.quaternion);
        // To new current camera orientation
        targetPosition.copy(direction).multiplyScalar(__classPrivateFieldGet(this, _NgtSobaGizmoHelperStore_radius, "f")).add(target);
        dummy.lookAt(targetPosition);
        q2.copy(dummy.quaternion);
        this.loopService.invalidate();
    }
}
_NgtSobaGizmoHelperStore_animating = new WeakMap(), _NgtSobaGizmoHelperStore_focusPoint = new WeakMap(), _NgtSobaGizmoHelperStore_radius = new WeakMap(), _NgtSobaGizmoHelperStore_ready$ = new WeakMap(), _NgtSobaGizmoHelperStore_instances = new WeakSet(), _NgtSobaGizmoHelperStore_animateStep = function _NgtSobaGizmoHelperStore_animateStep(delta) {
    if (!__classPrivateFieldGet(this, _NgtSobaGizmoHelperStore_animating, "f"))
        return;
    if (q1.angleTo(q2) < 0.01) {
        __classPrivateFieldSet(this, _NgtSobaGizmoHelperStore_animating, false, "f");
        return;
    }
    const { controls: defaultControls, camera: mainCamera } = this.store.get();
    const step = delta * turnRate;
    // animate position by doing a lerp and then scaling the position on the unit sphere
    q1.rotateTowards(q2, step);
    // animate orientation
    mainCamera.position
        .set(0, 0, 1)
        .applyQuaternion(q1)
        .multiplyScalar(__classPrivateFieldGet(this, _NgtSobaGizmoHelperStore_radius, "f"))
        .add(__classPrivateFieldGet(this, _NgtSobaGizmoHelperStore_focusPoint, "f"));
    mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();
    mainCamera.quaternion.copy(q1);
    if (defaultControls) {
        defaultControls.update();
    }
    this.loopService.invalidate();
}, _NgtSobaGizmoHelperStore_beforeRender = function _NgtSobaGizmoHelperStore_beforeRender() {
    const mainCamera = this.store.get('camera');
    const gizmo = this.get('gizmo');
    // sync gizmo with main camera orientation
    matrix.copy(mainCamera.matrix).invert();
    gizmo?.quaternion.setFromRotationMatrix(matrix);
};
NgtSobaGizmoHelperStore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaGizmoHelperStore, deps: [{ token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }, { token: i1.NgtAnimationFrameStore }, { token: i0.NgZone }, { token: i1.NgtStore }, { token: i1.NgtLoopService }], target: i0.ɵɵFactoryTarget.Injectable });
NgtSobaGizmoHelperStore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaGizmoHelperStore });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaGizmoHelperStore, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NgtObject3dInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                }] }, { type: i1.NgtAnimationFrameStore }, { type: i0.NgZone }, { type: i1.NgtStore }, { type: i1.NgtLoopService }]; } });
//# sourceMappingURL=data:application/json;base64,