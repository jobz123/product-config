import { NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NgtObject3dInputsController, NgtObject3dInputsControllerModule, NgtSobaExtender, } from '@angular-three/core';
import { NgtGroupModule } from '@angular-three/core/group';
import { ChangeDetectionStrategy, Component, ContentChild, Inject, Input, NgModule, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core/group";
import * as i2 from "@angular-three/core";
export class NgtSobaBillboard extends NgtSobaExtender {
    constructor(objectInputsController) {
        super();
        this.objectInputsController = objectInputsController;
        this.follow = true;
        this.lockX = false;
        this.lockY = false;
        this.lockZ = false;
    }
    onGroupAnimate(group, $event) {
        if (!this.follow)
            return;
        this.animateReady.emit($event);
        // save previous rotation in case we're locking an axis
        const prevRotation = group.rotation.clone();
        // always face the camera
        group.quaternion.copy($event.camera.quaternion);
        // readjust any axis that is locked
        if (this.lockX)
            group.rotation.x = prevRotation.x;
        if (this.lockY)
            group.rotation.y = prevRotation.y;
        if (this.lockZ)
            group.rotation.z = prevRotation.z;
    }
    onGroupReady(group) {
        this.object = group;
        if (this.childInputsController) {
            this.childInputsController.appendTo = group;
        }
    }
}
NgtSobaBillboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaBillboard, deps: [{ token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaBillboard.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaBillboard, selector: "ngt-soba-billboard", inputs: { follow: "follow", lockX: "lockX", lockY: "lockY", lockZ: "lockZ" }, providers: [
        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
        { provide: NgtSobaExtender, useExisting: NgtSobaBillboard },
    ], queries: [{ propertyName: "childInputsController", first: true, predicate: NgtObject3dInputsController, descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <ngt-group
      #ngtGroup="ngtGroup"
      (ready)="onGroupReady($event)"
      (animateReady)="onGroupAnimate(ngtGroup.group!, $event)"
      [object3dInputsController]="objectInputsController"
    >
      <ng-content></ng-content>
    </ngt-group>
  `, isInline: true, directives: [{ type: i1.NgtGroup, selector: "ngt-group", outputs: ["ready"], exportAs: ["ngtGroup"] }, { type: i2.NgtObject3dController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera  ", exportAs: ["ngtObject3dController"] }, { type: i2.NgtObject3dInputsController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-billboard,    ngt-soba-detailed,    ngt-soba-line,    ngt-soba-quadratic-bezier-line,    ngt-soba-cubic-bezier-line,    ngt-soba-orthographic-camera,    ngt-soba-gizmo-helper,    ngt-soba-gizmo-viewport,    ngt-soba-gizmo-axis-head,    ngt-soba-text  ", inputs: ["name", "position", "rotation", "quaternion", "scale", "color", "userData", "castShadow", "receiveShadow", "visible", "matrixAutoUpdate", "dispose", "raycast", "appendMode", "appendTo", "object3dInputsController"], outputs: ["click", "contextmenu", "dblclick", "pointerup", "pointerdown", "pointerover", "pointerout", "pointerenter", "pointerleave", "pointermove", "pointermissed", "pointercancel", "wheel"], exportAs: ["ngtObject3dInputsController"] }, { type: i2.NgtAnimationSubscriberController, selector: "[animateReady]", inputs: ["priority"], outputs: ["animateReady"], exportAs: ["ngtAnimationSubscriberController"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaBillboard, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-billboard',
                    template: `
    <ngt-group
      #ngtGroup="ngtGroup"
      (ready)="onGroupReady($event)"
      (animateReady)="onGroupAnimate(ngtGroup.group!, $event)"
      [object3dInputsController]="objectInputsController"
    >
      <ng-content></ng-content>
    </ngt-group>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
                        { provide: NgtSobaExtender, useExisting: NgtSobaBillboard },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i2.NgtObject3dInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { follow: [{
                type: Input
            }], lockX: [{
                type: Input
            }], lockY: [{
                type: Input
            }], lockZ: [{
                type: Input
            }], childInputsController: [{
                type: ContentChild,
                args: [NgtObject3dInputsController]
            }] } });
export class NgtSobaBillboardModule {
}
NgtSobaBillboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaBillboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaBillboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaBillboardModule, declarations: [NgtSobaBillboard], imports: [NgtGroupModule], exports: [NgtSobaBillboard, NgtObject3dInputsControllerModule] });
NgtSobaBillboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaBillboardModule, imports: [[NgtGroupModule], NgtObject3dInputsControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaBillboardModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaBillboard],
                    exports: [NgtSobaBillboard, NgtObject3dInputsControllerModule],
                    imports: [NgtGroupModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbGJvYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3NvYmEvYWJzdHJhY3Rpb25zL3NyYy9iaWxsYm9hcmQvYmlsbGJvYXJkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wscUNBQXFDLEVBQ3JDLG9DQUFvQyxFQUNwQywyQkFBMkIsRUFDM0IsaUNBQWlDLEVBRWpDLGVBQWUsR0FDaEIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxHQUNULE1BQU0sZUFBZSxDQUFDOzs7O0FBcUJ2QixNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsZUFBNEI7SUFTaEUsWUFFUyxzQkFBbUQ7UUFFMUQsS0FBSyxFQUFFLENBQUM7UUFGRCwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQTZCO1FBVm5ELFdBQU0sR0FBRyxJQUFJLENBQUM7UUFDZCxVQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2QsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUNkLFVBQUssR0FBRyxLQUFLLENBQUM7SUFVdkIsQ0FBQztJQUVELGNBQWMsQ0FBQyxLQUFrQixFQUFFLE1BQWlCO1FBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUFFLE9BQU87UUFFekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFL0IsdURBQXVEO1FBQ3ZELE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFNUMseUJBQXlCO1FBQ3pCLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFaEQsbUNBQW1DO1FBQ25DLElBQUksSUFBSSxDQUFDLEtBQUs7WUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ2xELElBQUksSUFBSSxDQUFDLEtBQUs7WUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ2xELElBQUksSUFBSSxDQUFDLEtBQUs7WUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxZQUFZLENBQUMsS0FBa0I7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDOUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDN0M7SUFDSCxDQUFDOzs2R0F0Q1UsZ0JBQWdCLGtCQVVqQixvQ0FBb0M7aUdBVm5DLGdCQUFnQiwySEFMaEI7UUFDVCxxQ0FBcUM7UUFDckMsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRTtLQUM1RCw2RUFRYSwyQkFBMkIsdUVBdEIvQjs7Ozs7Ozs7O0dBU1Q7MkZBT1UsZ0JBQWdCO2tCQWxCNUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixRQUFRLEVBQUU7Ozs7Ozs7OztHQVNUO29CQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUU7d0JBQ1QscUNBQXFDO3dCQUNyQyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxrQkFBa0IsRUFBRTtxQkFDNUQ7aUJBQ0Y7OzBCQVdJLE1BQU07MkJBQUMsb0NBQW9DOzRDQVRyQyxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBR04scUJBQXFCO3NCQURwQixZQUFZO3VCQUFDLDJCQUEyQjs7QUF3QzNDLE1BQU0sT0FBTyxzQkFBc0I7O21IQUF0QixzQkFBc0I7b0hBQXRCLHNCQUFzQixpQkE5Q3RCLGdCQUFnQixhQTRDakIsY0FBYyxhQTVDYixnQkFBZ0IsRUEyQ0MsaUNBQWlDO29IQUdsRCxzQkFBc0IsWUFGeEIsQ0FBQyxjQUFjLENBQUMsRUFERyxpQ0FBaUM7MkZBR2xELHNCQUFzQjtrQkFMbEMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDaEMsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsaUNBQWlDLENBQUM7b0JBQzlELE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztpQkFDMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBOR1RfT0JKRUNUX0lOUFVUU19DT05UUk9MTEVSX1BST1ZJREVSLFxuICBOR1RfT0JKRUNUX0lOUFVUU19XQVRDSEVEX0NPTlRST0xMRVIsXG4gIE5ndE9iamVjdDNkSW5wdXRzQ29udHJvbGxlcixcbiAgTmd0T2JqZWN0M2RJbnB1dHNDb250cm9sbGVyTW9kdWxlLFxuICBOZ3RSZW5kZXIsXG4gIE5ndFNvYmFFeHRlbmRlcixcbn0gZnJvbSAnQGFuZ3VsYXItdGhyZWUvY29yZSc7XG5pbXBvcnQgeyBOZ3RHcm91cE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyLXRocmVlL2NvcmUvZ3JvdXAnO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBOZ01vZHVsZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25ndC1zb2JhLWJpbGxib2FyZCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5ndC1ncm91cFxuICAgICAgI25ndEdyb3VwPVwibmd0R3JvdXBcIlxuICAgICAgKHJlYWR5KT1cIm9uR3JvdXBSZWFkeSgkZXZlbnQpXCJcbiAgICAgIChhbmltYXRlUmVhZHkpPVwib25Hcm91cEFuaW1hdGUobmd0R3JvdXAuZ3JvdXAhLCAkZXZlbnQpXCJcbiAgICAgIFtvYmplY3QzZElucHV0c0NvbnRyb2xsZXJdPVwib2JqZWN0SW5wdXRzQ29udHJvbGxlclwiXG4gICAgPlxuICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDwvbmd0LWdyb3VwPlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbXG4gICAgTkdUX09CSkVDVF9JTlBVVFNfQ09OVFJPTExFUl9QUk9WSURFUixcbiAgICB7IHByb3ZpZGU6IE5ndFNvYmFFeHRlbmRlciwgdXNlRXhpc3Rpbmc6IE5ndFNvYmFCaWxsYm9hcmQgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd0U29iYUJpbGxib2FyZCBleHRlbmRzIE5ndFNvYmFFeHRlbmRlcjxUSFJFRS5Hcm91cD4ge1xuICBASW5wdXQoKSBmb2xsb3cgPSB0cnVlO1xuICBASW5wdXQoKSBsb2NrWCA9IGZhbHNlO1xuICBASW5wdXQoKSBsb2NrWSA9IGZhbHNlO1xuICBASW5wdXQoKSBsb2NrWiA9IGZhbHNlO1xuXG4gIEBDb250ZW50Q2hpbGQoTmd0T2JqZWN0M2RJbnB1dHNDb250cm9sbGVyKVxuICBjaGlsZElucHV0c0NvbnRyb2xsZXI/OiBOZ3RPYmplY3QzZElucHV0c0NvbnRyb2xsZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChOR1RfT0JKRUNUX0lOUFVUU19XQVRDSEVEX0NPTlRST0xMRVIpXG4gICAgcHVibGljIG9iamVjdElucHV0c0NvbnRyb2xsZXI6IE5ndE9iamVjdDNkSW5wdXRzQ29udHJvbGxlclxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgb25Hcm91cEFuaW1hdGUoZ3JvdXA6IFRIUkVFLkdyb3VwLCAkZXZlbnQ6IE5ndFJlbmRlcikge1xuICAgIGlmICghdGhpcy5mb2xsb3cpIHJldHVybjtcblxuICAgIHRoaXMuYW5pbWF0ZVJlYWR5LmVtaXQoJGV2ZW50KTtcblxuICAgIC8vIHNhdmUgcHJldmlvdXMgcm90YXRpb24gaW4gY2FzZSB3ZSdyZSBsb2NraW5nIGFuIGF4aXNcbiAgICBjb25zdCBwcmV2Um90YXRpb24gPSBncm91cC5yb3RhdGlvbi5jbG9uZSgpO1xuXG4gICAgLy8gYWx3YXlzIGZhY2UgdGhlIGNhbWVyYVxuICAgIGdyb3VwLnF1YXRlcm5pb24uY29weSgkZXZlbnQuY2FtZXJhLnF1YXRlcm5pb24pO1xuXG4gICAgLy8gcmVhZGp1c3QgYW55IGF4aXMgdGhhdCBpcyBsb2NrZWRcbiAgICBpZiAodGhpcy5sb2NrWCkgZ3JvdXAucm90YXRpb24ueCA9IHByZXZSb3RhdGlvbi54O1xuICAgIGlmICh0aGlzLmxvY2tZKSBncm91cC5yb3RhdGlvbi55ID0gcHJldlJvdGF0aW9uLnk7XG4gICAgaWYgKHRoaXMubG9ja1opIGdyb3VwLnJvdGF0aW9uLnogPSBwcmV2Um90YXRpb24uejtcbiAgfVxuXG4gIG9uR3JvdXBSZWFkeShncm91cDogVEhSRUUuR3JvdXApIHtcbiAgICB0aGlzLm9iamVjdCA9IGdyb3VwO1xuICAgIGlmICh0aGlzLmNoaWxkSW5wdXRzQ29udHJvbGxlcikge1xuICAgICAgdGhpcy5jaGlsZElucHV0c0NvbnRyb2xsZXIuYXBwZW5kVG8gPSBncm91cDtcbiAgICB9XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmd0U29iYUJpbGxib2FyZF0sXG4gIGV4cG9ydHM6IFtOZ3RTb2JhQmlsbGJvYXJkLCBOZ3RPYmplY3QzZElucHV0c0NvbnRyb2xsZXJNb2R1bGVdLFxuICBpbXBvcnRzOiBbTmd0R3JvdXBNb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3RTb2JhQmlsbGJvYXJkTW9kdWxlIHt9XG4iXX0=