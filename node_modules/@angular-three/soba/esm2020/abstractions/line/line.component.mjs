var _NgtSobaLine_resolution, _NgtSobaLine_sobaLineInputsController;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Controller, createControllerProviderFactory, EnhancedRxState, NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NgtObject3dInputsController, NgtObject3dInputsControllerModule, } from '@angular-three/core';
import { NgtPrimitiveModule } from '@angular-three/core/primitive';
import { ChangeDetectionStrategy, Component, Directive, Inject, Input, NgModule, NgZone, Output, } from '@angular/core';
import { selectSlice } from '@rx-angular/state';
import { combineLatest, distinctUntilChanged, map, startWith } from 'rxjs';
import * as THREE from 'three';
import { Line2, LineGeometry, LineMaterial, } from 'three-stdlib';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
import * as i2 from "@angular-three/core/primitive";
export class NgtSobaLineInputsController extends Controller {
    constructor() {
        super(...arguments);
        this.color = 'black';
        this.parameters = {};
    }
    get controller() {
        return this.sobaLineInputsController;
    }
    get props() {
        return ['color', 'vertexColors', 'lineWidth', 'dashed', 'parameters'];
    }
}
NgtSobaLineInputsController.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLineInputsController, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NgtSobaLineInputsController.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaLineInputsController, selector: "ngt-soba-line,ngt-soba-quadratic-bezier-line,ngt-soba-cubic-bezier-line", inputs: { color: "color", vertexColors: "vertexColors", lineWidth: "lineWidth", dashed: "dashed", parameters: "parameters", sobaLineInputsController: "sobaLineInputsController" }, exportAs: ["ngtSobaLineInputsController"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLineInputsController, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-soba-line,ngt-soba-quadratic-bezier-line,ngt-soba-cubic-bezier-line',
                    exportAs: 'ngtSobaLineInputsController',
                }]
        }], propDecorators: { color: [{
                type: Input
            }], vertexColors: [{
                type: Input
            }], lineWidth: [{
                type: Input
            }], dashed: [{
                type: Input
            }], parameters: [{
                type: Input
            }], sobaLineInputsController: [{
                type: Input
            }] } });
export const [NGT_SOBA_LINE_INPUTS_WATCHED_CONTROLLER, NGT_SOBA_LINE_INPUTS_CONTROLLER_PROVIDER,] = createControllerProviderFactory({
    watchedControllerTokenName: 'Watched SobaLine Inputs Controller',
    controller: NgtSobaLineInputsController,
});
export class NgtSobaLine extends EnhancedRxState {
    constructor(sobaLineInputsController, objectInputsController, ngZone) {
        super();
        this.sobaLineInputsController = sobaLineInputsController;
        this.objectInputsController = objectInputsController;
        this.ngZone = ngZone;
        _NgtSobaLine_resolution.set(this, new THREE.Vector2(512, 512));
        _NgtSobaLine_sobaLineInputsController.set(this, void 0);
        this.ready = this.select('line');
    }
    set points(points) {
        this.set({ points });
    }
    ngOnInit() {
        __classPrivateFieldSet(this, _NgtSobaLine_sobaLineInputsController, this.sobaLineInputsController.sobaLineInputsController ||
            this.sobaLineInputsController, "f");
        this.set({
            lineMaterial: new LineMaterial(),
        });
        const geometryChanges$ = combineLatest([
            this.select('points'),
            __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f").change$.pipe(map(() => __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f").vertexColors), distinctUntilChanged(), startWith(undefined)),
        ]);
        const materialChanges$ = combineLatest([
            this.select('lineMaterial'),
            __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f").change$.pipe(map((changes) => {
                return {
                    color: (changes.sobaLineInputsController
                        ? changes.sobaLineInputsController.currentValue
                        : __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f")).color,
                    vertexColors: Boolean((changes.sobaLineInputsController
                        ? changes.sobaLineInputsController.currentValue
                        : __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f")).vertexColors),
                    linewidth: (changes.sobaLineInputsController
                        ? changes.sobaLineInputsController.currentValue
                        : __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f")).lineWidth,
                    dashed: (changes.sobaLineInputsController
                        ? changes.sobaLineInputsController.currentValue
                        : __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f")).dashed,
                    parameters: (changes.sobaLineInputsController
                        ? changes.sobaLineInputsController.currentValue
                        : __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f")).parameters,
                };
            }), startWith({
                color: __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f").color,
                vertexColors: Boolean(__classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f").vertexColors),
                linewidth: __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f").lineWidth,
                dashed: __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f").dashed,
                parameters: __classPrivateFieldGet(this, _NgtSobaLine_sobaLineInputsController, "f").parameters,
            })),
        ]);
        this.hold(this.select(selectSlice(['line', 'points'])), ({ line }) => {
            line.computeLineDistances();
        });
        this.hold(materialChanges$, ([lineMaterial, { dashed, parameters, vertexColors, color, linewidth },]) => {
            const lineParameters = {
                vertexColors,
                color,
                resolution: __classPrivateFieldGet(this, _NgtSobaLine_resolution, "f"),
                ...parameters,
            };
            if (dashed !== undefined) {
                lineParameters.dashed = dashed;
            }
            if (linewidth !== undefined) {
                lineParameters.linewidth = linewidth;
            }
            lineMaterial.setValues(lineParameters);
            if (dashed) {
                lineMaterial.defines.USE_DASH = '';
            }
            else {
                // Setting lineMaterial.defines.USE_DASH to undefined is apparently not sufficient.
                delete lineMaterial.defines.USE_DASH;
            }
            lineMaterial.needsUpdate = true;
        });
        this.connect('lineGeometry', geometryChanges$, (_, [points, vertexColors]) => {
            return this.ngZone.runOutsideAngular(() => {
                const lineGeometry = new LineGeometry();
                const pValues = points.map((p) => p instanceof THREE.Vector3 ? p.toArray() : p);
                lineGeometry.setPositions(pValues.flat());
                if (vertexColors) {
                    const cValues = vertexColors.map((c) => c instanceof THREE.Color ? c.toArray() : c);
                    lineGeometry.setColors(cValues.flat());
                }
                return lineGeometry;
            });
        });
        this.holdEffect(this.select('lineGeometry'), (lineGeometry) => {
            return () => {
                lineGeometry.dispose();
            };
        });
        this.holdEffect(this.select('lineMaterial'), (lineMaterial) => {
            return () => {
                lineMaterial.dispose();
            };
        });
        this.hold(this.select(selectSlice(['lineGeometry', 'lineMaterial'])), ({ lineMaterial, lineGeometry }) => {
            const line = this.get('line');
            if (!line) {
                this.set({ line: new Line2(lineGeometry, lineMaterial) });
            }
            else {
                line.geometry = lineGeometry;
                line.computeLineDistances();
            }
        });
    }
    get line() {
        return this.get('line');
    }
}
_NgtSobaLine_resolution = new WeakMap(), _NgtSobaLine_sobaLineInputsController = new WeakMap();
NgtSobaLine.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLine, deps: [{ token: NGT_SOBA_LINE_INPUTS_WATCHED_CONTROLLER }, { token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaLine.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaLine, selector: "ngt-soba-line[points]", inputs: { points: "points" }, outputs: { ready: "ready" }, providers: [
        NGT_SOBA_LINE_INPUTS_CONTROLLER_PROVIDER,
        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
    ], usesInheritance: true, ngImport: i0, template: `
    <ngt-primitive
      [object]="line"
      [object3dInputsController]="objectInputsController"
    ></ngt-primitive>
  `, isInline: true, directives: [{ type: i1.NgtObject3dController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera  ", exportAs: ["ngtObject3dController"] }, { type: i1.NgtObject3dInputsController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-billboard,    ngt-soba-detailed,    ngt-soba-line,    ngt-soba-quadratic-bezier-line,    ngt-soba-cubic-bezier-line,    ngt-soba-orthographic-camera,    ngt-soba-gizmo-helper,    ngt-soba-gizmo-viewport,    ngt-soba-gizmo-axis-head,    ngt-soba-text  ", inputs: ["name", "position", "rotation", "quaternion", "scale", "color", "userData", "castShadow", "receiveShadow", "visible", "matrixAutoUpdate", "dispose", "raycast", "appendMode", "appendTo", "object3dInputsController"], outputs: ["click", "contextmenu", "dblclick", "pointerup", "pointerdown", "pointerover", "pointerout", "pointerenter", "pointerleave", "pointermove", "pointermissed", "pointercancel", "wheel"], exportAs: ["ngtObject3dInputsController"] }, { type: i2.NgtPrimitive, selector: "ngt-primitive[object]", inputs: ["object"], outputs: ["ready"], exportAs: ["ngtPrimitive"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLine, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-line[points]',
                    template: `
    <ngt-primitive
      [object]="line"
      [object3dInputsController]="objectInputsController"
    ></ngt-primitive>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        NGT_SOBA_LINE_INPUTS_CONTROLLER_PROVIDER,
                        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: NgtSobaLineInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_SOBA_LINE_INPUTS_WATCHED_CONTROLLER]
                }] }, { type: i1.NgtObject3dInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                }] }, { type: i0.NgZone }]; }, propDecorators: { points: [{
                type: Input
            }], ready: [{
                type: Output
            }] } });
export class NgtSobaLineModule {
}
NgtSobaLineModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaLineModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLineModule, declarations: [NgtSobaLine, NgtSobaLineInputsController], imports: [NgtPrimitiveModule], exports: [NgtSobaLine, NgtSobaLineInputsController, NgtObject3dInputsControllerModule] });
NgtSobaLineModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLineModule, imports: [[NgtPrimitiveModule], NgtObject3dInputsControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLineModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaLine, NgtSobaLineInputsController],
                    exports: [
                        NgtSobaLine,
                        NgtSobaLineInputsController,
                        NgtObject3dInputsControllerModule,
                    ],
                    imports: [NgtPrimitiveModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,