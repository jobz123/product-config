var _NgtSobaQuadraticBezierLine_instances, _NgtSobaQuadraticBezierLine_getPoints;
import { __classPrivateFieldGet } from "tslib";
import { EnhancedRxState, NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NgtObject3dInputsController, NgtObject3dInputsControllerModule, } from '@angular-three/core';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Inject, Input, NgModule, } from '@angular/core';
import { selectSlice } from '@rx-angular/state';
import * as THREE from 'three';
import { NGT_SOBA_LINE_INPUTS_CONTROLLER_PROVIDER, NGT_SOBA_LINE_INPUTS_WATCHED_CONTROLLER, NgtSobaLineInputsController, NgtSobaLineModule, } from '../line/line.component';
import * as i0 from "@angular/core";
import * as i1 from "../line/line.component";
import * as i2 from "@angular/common";
import * as i3 from "@angular-three/core";
export class NgtSobaQuadraticBezierLine extends EnhancedRxState {
    constructor(sobaLineInputsController, objectInputsController) {
        super();
        this.sobaLineInputsController = sobaLineInputsController;
        this.objectInputsController = objectInputsController;
        _NgtSobaQuadraticBezierLine_instances.add(this);
        this.v = new THREE.Vector3();
        this.set({
            start: [0, 0, 0],
            end: [0, 0, 0],
            segments: 20,
            mid: null,
            curve: new THREE.QuadraticBezierCurve3(undefined, undefined, undefined),
        });
        this.connect('points', this.select(selectSlice(['start', 'end', 'mid', 'segments'])), (_, { segments, mid, end, start }) => __classPrivateFieldGet(this, _NgtSobaQuadraticBezierLine_instances, "m", _NgtSobaQuadraticBezierLine_getPoints).call(this, start, end, mid, segments));
    }
    set start(start) {
        this.set({ start });
    }
    set end(end) {
        this.set({ end });
    }
    set mid(mid) {
        this.set({ mid });
    }
    set segments(segments) {
        this.set({ segments });
    }
    get points() {
        return this.get('points');
    }
    onLineReady(line) {
        line.setPoints = (start, end, mid) => {
            const points = __classPrivateFieldGet(this, _NgtSobaQuadraticBezierLine_instances, "m", _NgtSobaQuadraticBezierLine_getPoints).call(this, start, end, mid);
            if (line.geometry) {
                // @ts-ignore
                line.geometry.setPositions(points.map((p) => p.toArray()).flat());
            }
        };
    }
}
_NgtSobaQuadraticBezierLine_instances = new WeakSet(), _NgtSobaQuadraticBezierLine_getPoints = function _NgtSobaQuadraticBezierLine_getPoints(start, end, mid, segments = 20) {
    const curve = this.get('curve');
    if (start instanceof THREE.Vector3)
        curve.v0.copy(start);
    else
        curve.v0.set(...start);
    if (end instanceof THREE.Vector3)
        curve.v2.copy(end);
    else
        curve.v2.set(...end);
    if (mid instanceof THREE.Vector3) {
        curve.v1.copy(mid);
    }
    else {
        curve.v1.copy(curve.v0
            .clone()
            .add(curve.v2.clone().sub(curve.v0))
            .add(this.v.set(0, curve.v0.y - curve.v2.y, 0)));
    }
    return curve.getPoints(segments);
};
NgtSobaQuadraticBezierLine.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaQuadraticBezierLine, deps: [{ token: NGT_SOBA_LINE_INPUTS_WATCHED_CONTROLLER }, { token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaQuadraticBezierLine.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaQuadraticBezierLine, selector: "ngt-soba-quadratic-bezier-line[start][end]", inputs: { start: "start", end: "end", mid: "mid", segments: "segments" }, providers: [
        NGT_SOBA_LINE_INPUTS_CONTROLLER_PROVIDER,
        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
    ], usesInheritance: true, ngImport: i0, template: `
    <ngt-soba-line
      *ngIf="points"
      (ready)="onLineReady($any($event))"
      [points]="points"
      [sobaLineInputsController]="sobaLineInputsController"
      [object3dInputsController]="objectInputsController"
    ></ngt-soba-line>
  `, isInline: true, components: [{ type: i1.NgtSobaLine, selector: "ngt-soba-line[points]", inputs: ["points"], outputs: ["ready"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgtSobaLineInputsController, selector: "ngt-soba-line,ngt-soba-quadratic-bezier-line,ngt-soba-cubic-bezier-line", inputs: ["color", "vertexColors", "lineWidth", "dashed", "parameters", "sobaLineInputsController"], exportAs: ["ngtSobaLineInputsController"] }, { type: i3.NgtObject3dInputsController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-billboard,    ngt-soba-detailed,    ngt-soba-line,    ngt-soba-quadratic-bezier-line,    ngt-soba-cubic-bezier-line,    ngt-soba-orthographic-camera,    ngt-soba-gizmo-helper,    ngt-soba-gizmo-viewport,    ngt-soba-gizmo-axis-head,    ngt-soba-text  ", inputs: ["name", "position", "rotation", "quaternion", "scale", "color", "userData", "castShadow", "receiveShadow", "visible", "matrixAutoUpdate", "dispose", "raycast", "appendMode", "appendTo", "object3dInputsController"], outputs: ["click", "contextmenu", "dblclick", "pointerup", "pointerdown", "pointerover", "pointerout", "pointerenter", "pointerleave", "pointermove", "pointermissed", "pointercancel", "wheel"], exportAs: ["ngtObject3dInputsController"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaQuadraticBezierLine, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-quadratic-bezier-line[start][end]',
                    template: `
    <ngt-soba-line
      *ngIf="points"
      (ready)="onLineReady($any($event))"
      [points]="points"
      [sobaLineInputsController]="sobaLineInputsController"
      [object3dInputsController]="objectInputsController"
    ></ngt-soba-line>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        NGT_SOBA_LINE_INPUTS_CONTROLLER_PROVIDER,
                        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtSobaLineInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_SOBA_LINE_INPUTS_WATCHED_CONTROLLER]
                }] }, { type: i3.NgtObject3dInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { start: [{
                type: Input
            }], end: [{
                type: Input
            }], mid: [{
                type: Input
            }], segments: [{
                type: Input
            }] } });
export class NgtSobaQuadraticBezierLineModule {
}
NgtSobaQuadraticBezierLineModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaQuadraticBezierLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaQuadraticBezierLineModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaQuadraticBezierLineModule, declarations: [NgtSobaQuadraticBezierLine], imports: [NgtSobaLineModule, CommonModule], exports: [NgtSobaQuadraticBezierLine, NgtSobaLineModule,
        NgtObject3dInputsControllerModule] });
NgtSobaQuadraticBezierLineModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaQuadraticBezierLineModule, imports: [[NgtSobaLineModule, CommonModule], NgtSobaLineModule,
        NgtObject3dInputsControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaQuadraticBezierLineModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaQuadraticBezierLine],
                    exports: [
                        NgtSobaQuadraticBezierLine,
                        NgtSobaLineModule,
                        NgtObject3dInputsControllerModule,
                    ],
                    imports: [NgtSobaLineModule, CommonModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,