import { NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NgtMaterial, NgtObject3dInputsController, NgtObject3dInputsControllerModule, NgtSobaExtender, } from '@angular-three/core';
import { NgtPlaneGeometryModule } from '@angular-three/core/geometries';
import { NgtMeshModule } from '@angular-three/core/meshes';
import { shaderMaterial } from '@angular-three/soba';
import { NgtTextureLoaderService } from '@angular-three/soba/loaders';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Directive, Inject, Input, NgModule, } from '@angular/core';
import { tap } from 'rxjs';
import * as THREE from 'three';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/soba/loaders";
import * as i2 from "@angular/common";
import * as i3 from "@angular-three/core/meshes";
import * as i4 from "@angular-three/core";
import * as i5 from "@angular-three/core/geometries";
export const ImageShaderMaterial = shaderMaterial({
    color: new THREE.Color('white'),
    scale: [1, 1],
    imageBounds: [1, 1],
    map: null,
    zoom: 1,
    grayscale: 0,
}, 
// language=glsl
`
  varying vec2 vUv;
  void main() {
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);
    vUv = uv;
  }
`, 
// language=glsl
`
  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44
  varying vec2 vUv;
  uniform vec2 scale;
  uniform vec2 imageBounds;
  uniform vec3 color;
  uniform sampler2D map;
  uniform float zoom;
  uniform float grayscale;
  const vec3 luma = vec3(.299, 0.587, 0.114);
  vec4 toGrayscale(vec4 color, float intensity) {
    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);
  }
  vec2 aspect(vec2 size) {
    return size / min(size.x, size.y);
  }
  void main() {
    vec2 s = aspect(scale);
    vec2 i = aspect(imageBounds);
    float rs = s.x / s.y;
    float ri = i.x / i.y;
    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);
    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;
    vec2 uv = vUv * s / new + offset;
    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);
    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);
  }
`);
export class NgtSobaImageShaderMaterial extends NgtMaterial {
    constructor() {
        super(...arguments);
        this.materialType = ImageShaderMaterial;
    }
}
NgtSobaImageShaderMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaImageShaderMaterial, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NgtSobaImageShaderMaterial.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaImageShaderMaterial, selector: "ngt-soba-image-shader-material", providers: [
        { provide: NgtMaterial, useExisting: NgtSobaImageShaderMaterial },
    ], exportAs: ["ngtSobaImageShaderMaterial"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaImageShaderMaterial, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-soba-image-shader-material',
                    exportAs: 'ngtSobaImageShaderMaterial',
                    providers: [
                        { provide: NgtMaterial, useExisting: NgtSobaImageShaderMaterial },
                    ],
                }]
        }] });
export class NgtSobaImage extends NgtSobaExtender {
    constructor(textureLoaderService, objectInputsController) {
        super();
        this.textureLoaderService = textureLoaderService;
        this.objectInputsController = objectInputsController;
    }
    set url(v) {
        this.texture$ = this.textureLoaderService.load(v).pipe(tap((texture) => {
            this.imageBounds = [texture.image.width, texture.image.height];
        }));
    }
    ngOnChanges() {
        this.planeBounds = Array.isArray(this.scale)
            ? [this.scale[0], this.scale[1]]
            : [this.scale, this.scale];
    }
}
NgtSobaImage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaImage, deps: [{ token: i1.NgtTextureLoaderService }, { token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaImage.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaImage, selector: "ngt-soba-image[url]", inputs: { segments: "segments", scale: "scale", color: "color", zoom: "zoom", grayscale: "grayscale", url: "url" }, providers: [
        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
        { provide: NgtSobaExtender, useExisting: NgtSobaImage },
    ], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `
    <ng-container *ngIf="texture$ | async as texture">
      <ngt-mesh
        [scale]="scale"
        [object3dInputsController]="objectInputsController"
        (ready)="object = $event"
      >
        <ngt-plane-geometry
          [args]="[1, 1, segments, segments]"
        ></ngt-plane-geometry>
        <ngt-soba-image-shader-material
          [parameters]="{color, map: texture, zoom, grayscale, scale: planeBounds, imageBounds}"
        ></ngt-soba-image-shader-material>
        <ng-content></ng-content>
      </ngt-mesh>
    </ng-container>
  `, isInline: true, directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgtMesh, selector: "ngt-mesh", exportAs: ["ngtMesh"] }, { type: i4.NgtMaterialGeometryController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-points  ", inputs: ["morphTargetInfluences", "morphTargetDictionary"], exportAs: ["ngtMaterialGeometryController"] }, { type: i4.NgtObject3dController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera  ", exportAs: ["ngtObject3dController"] }, { type: i4.NgtObject3dInputsController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-billboard,    ngt-soba-detailed,    ngt-soba-line,    ngt-soba-quadratic-bezier-line,    ngt-soba-cubic-bezier-line,    ngt-soba-orthographic-camera,    ngt-soba-gizmo-helper,    ngt-soba-gizmo-viewport,    ngt-soba-gizmo-axis-head,    ngt-soba-text  ", inputs: ["name", "position", "rotation", "quaternion", "scale", "color", "userData", "castShadow", "receiveShadow", "visible", "matrixAutoUpdate", "dispose", "raycast", "appendMode", "appendTo", "object3dInputsController"], outputs: ["click", "contextmenu", "dblclick", "pointerup", "pointerdown", "pointerover", "pointerout", "pointerenter", "pointerleave", "pointermove", "pointermissed", "pointercancel", "wheel"], exportAs: ["ngtObject3dInputsController"] }, { type: i4.NgtContentMaterialController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-text,,    ngt-points  ", inputs: ["material", "isMaterialArray", "contentMaterialController"], exportAs: ["ngtContentMaterialController"] }, { type: i4.NgtContentGeometryController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-points  ", inputs: ["geometry", "contentGeometryController"], exportAs: ["ngtContentGeometryController"] }, { type: i5.NgtPlaneGeometry, selector: "ngt-plane-geometry", inputs: ["args"], exportAs: ["ngtPlaneGeometry"] }, { type: NgtSobaImageShaderMaterial, selector: "ngt-soba-image-shader-material", exportAs: ["ngtSobaImageShaderMaterial"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaImage, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-image[url]',
                    template: `
    <ng-container *ngIf="texture$ | async as texture">
      <ngt-mesh
        [scale]="scale"
        [object3dInputsController]="objectInputsController"
        (ready)="object = $event"
      >
        <ngt-plane-geometry
          [args]="[1, 1, segments, segments]"
        ></ngt-plane-geometry>
        <ngt-soba-image-shader-material
          [parameters]="{color, map: texture, zoom, grayscale, scale: planeBounds, imageBounds}"
        ></ngt-soba-image-shader-material>
        <ng-content></ng-content>
      </ngt-mesh>
    </ng-container>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
                        { provide: NgtSobaExtender, useExisting: NgtSobaImage },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtTextureLoaderService }, { type: i4.NgtObject3dInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { segments: [{
                type: Input
            }], scale: [{
                type: Input
            }], color: [{
                type: Input
            }], zoom: [{
                type: Input
            }], grayscale: [{
                type: Input
            }], url: [{
                type: Input
            }] } });
export class NgtSobaImageModule {
}
NgtSobaImageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaImageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaImageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaImageModule, declarations: [NgtSobaImage, NgtSobaImageShaderMaterial], imports: [NgtMeshModule, NgtPlaneGeometryModule, CommonModule], exports: [NgtSobaImage, NgtSobaImageShaderMaterial, NgtObject3dInputsControllerModule] });
NgtSobaImageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaImageModule, imports: [[NgtMeshModule, NgtPlaneGeometryModule, CommonModule], NgtObject3dInputsControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaImageModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaImage, NgtSobaImageShaderMaterial],
                    exports: [
                        NgtSobaImage,
                        NgtSobaImageShaderMaterial,
                        NgtObject3dInputsControllerModule,
                    ],
                    imports: [NgtMeshModule, NgtPlaneGeometryModule, CommonModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,