var _NgtSobaText_text;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { applyProps, NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER, NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER, NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NgtContentMaterialController, NgtContentMaterialControllerModule, NgtLoopService, NgtObject3dInputsController, NgtObject3dInputsControllerModule, NgtSobaExtender, } from '@angular-three/core';
import { NgtPrimitiveModule } from '@angular-three/core/primitive';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Inject, Input, NgModule, NgZone, Output, } from '@angular/core';
import { requestAnimationFrame } from '@rx-angular/cdk/zone-less';
// @ts-ignore
import { Text as TextMeshImpl } from 'troika-three-text';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
import * as i2 from "@angular/common";
import * as i3 from "@angular-three/core/primitive";
export class NgtSobaText extends NgtSobaExtender {
    constructor(objectInputsController, contentMaterialController, elRef, ngZone, loopService) {
        super();
        this.objectInputsController = objectInputsController;
        this.contentMaterialController = contentMaterialController;
        this.elRef = elRef;
        this.ngZone = ngZone;
        this.loopService = loopService;
        this.anchorX = 'center';
        this.anchorY = 'middle';
        this.sync = new EventEmitter();
        _NgtSobaText_text.set(this, '');
        ngZone.runOutsideAngular(() => {
            this.object = new TextMeshImpl();
        });
    }
    get text() {
        return __classPrivateFieldGet(this, _NgtSobaText_text, "f");
    }
    set text(value) {
        __classPrivateFieldSet(this, _NgtSobaText_text, value.trim(), "f");
    }
    ngOnChanges() {
        this.ngZone.runOutsideAngular(() => {
            if (this.object) {
                this.object.sync(() => {
                    this.loopService.invalidate();
                    if (this.sync.observed) {
                        this.sync.emit(this.object);
                    }
                });
            }
        });
    }
    ngOnInit() {
        requestAnimationFrame(() => {
            this.elRef.nativeElement.childNodes.forEach((childNode) => {
                if (childNode instanceof Text) {
                    this.text += childNode.textContent;
                }
            });
        });
    }
    ngOnDestroy() {
        if (this.object) {
            this.object.dispose();
        }
    }
    onTroikaTextReady(troikaText) {
        requestAnimationFrame(() => {
            troikaText.text = this.text;
            if (this.contentMaterialController.material) {
                troikaText.material = this.contentMaterialController.material;
            }
            applyProps(troikaText, {
                color: this.color,
                fontSize: this.fontSize,
                maxWidth: this.maxWidth,
                lineHeight: this.lineHeight,
                letterSpacing: this.letterSpacing,
                textAlign: this.textAlign,
                font: this.font,
                anchorX: this.anchorX,
                anchorY: this.anchorY,
                clipRect: this.clipRect,
                depthOffset: this.depthOffset,
                direction: this.direction,
                overflowWrap: this.overflowWrap,
                whiteSpace: this.whiteSpace,
                outlineWidth: this.outlineWidth,
                outlineOffsetX: this.outlineOffsetX,
                outlineOffsetY: this.outlineOffsetY,
                outlineBlur: this.outlineBlur,
                outlineColor: this.outlineColor,
                outlineOpacity: this.outlineOpacity,
                strokeWidth: this.strokeWidth,
                strokeColor: this.strokeColor,
                strokeOpacity: this.strokeOpacity,
                fillOpacity: this.fillOpacity,
                debugSDF: this.debugSDF,
            });
        });
    }
}
_NgtSobaText_text = new WeakMap();
NgtSobaText.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaText, deps: [{ token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }, { token: NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.NgtLoopService }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaText.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaText, selector: "ngt-soba-text", inputs: { color: "color", fontSize: "fontSize", maxWidth: "maxWidth", lineHeight: "lineHeight", letterSpacing: "letterSpacing", textAlign: "textAlign", font: "font", anchorX: "anchorX", anchorY: "anchorY", clipRect: "clipRect", depthOffset: "depthOffset", direction: "direction", overflowWrap: "overflowWrap", whiteSpace: "whiteSpace", outlineWidth: "outlineWidth", outlineOffsetX: "outlineOffsetX", outlineOffsetY: "outlineOffsetY", outlineBlur: "outlineBlur", outlineColor: "outlineColor", outlineOpacity: "outlineOpacity", strokeWidth: "strokeWidth", strokeColor: "strokeColor", strokeOpacity: "strokeOpacity", fillOpacity: "fillOpacity", debugSDF: "debugSDF" }, outputs: { sync: "sync" }, providers: [
        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
        NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER,
        { provide: NgtSobaExtender, useExisting: NgtSobaText },
    ], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `
    <ng-container *ngIf="object">
      <ngt-primitive
        [object]="$any(object)"
        [object3dInputsController]="objectInputsController"
        (ready)="onTroikaTextReady(object)"
      >
      </ngt-primitive>
    </ng-container>
    <ng-content></ng-content>
  `, isInline: true, directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgtObject3dController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera  ", exportAs: ["ngtObject3dController"] }, { type: i1.NgtObject3dInputsController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-billboard,    ngt-soba-detailed,    ngt-soba-line,    ngt-soba-quadratic-bezier-line,    ngt-soba-cubic-bezier-line,    ngt-soba-orthographic-camera,    ngt-soba-gizmo-helper,    ngt-soba-gizmo-viewport,    ngt-soba-gizmo-axis-head,    ngt-soba-text  ", inputs: ["name", "position", "rotation", "quaternion", "scale", "color", "userData", "castShadow", "receiveShadow", "visible", "matrixAutoUpdate", "dispose", "raycast", "appendMode", "appendTo", "object3dInputsController"], outputs: ["click", "contextmenu", "dblclick", "pointerup", "pointerdown", "pointerover", "pointerout", "pointerenter", "pointerleave", "pointermove", "pointermissed", "pointercancel", "wheel"], exportAs: ["ngtObject3dInputsController"] }, { type: i3.NgtPrimitive, selector: "ngt-primitive[object]", inputs: ["object"], outputs: ["ready"], exportAs: ["ngtPrimitive"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaText, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-text',
                    template: `
    <ng-container *ngIf="object">
      <ngt-primitive
        [object]="$any(object)"
        [object3dInputsController]="objectInputsController"
        (ready)="onTroikaTextReady(object)"
      >
      </ngt-primitive>
    </ng-container>
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
                        NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER,
                        { provide: NgtSobaExtender, useExisting: NgtSobaText },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtObject3dInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                }] }, { type: i1.NgtContentMaterialController, decorators: [{
                    type: Inject,
                    args: [NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER]
                }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.NgtLoopService }]; }, propDecorators: { color: [{
                type: Input
            }], fontSize: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], lineHeight: [{
                type: Input
            }], letterSpacing: [{
                type: Input
            }], textAlign: [{
                type: Input
            }], font: [{
                type: Input
            }], anchorX: [{
                type: Input
            }], anchorY: [{
                type: Input
            }], clipRect: [{
                type: Input
            }], depthOffset: [{
                type: Input
            }], direction: [{
                type: Input
            }], overflowWrap: [{
                type: Input
            }], whiteSpace: [{
                type: Input
            }], outlineWidth: [{
                type: Input
            }], outlineOffsetX: [{
                type: Input
            }], outlineOffsetY: [{
                type: Input
            }], outlineBlur: [{
                type: Input
            }], outlineColor: [{
                type: Input
            }], outlineOpacity: [{
                type: Input
            }], strokeWidth: [{
                type: Input
            }], strokeColor: [{
                type: Input
            }], strokeOpacity: [{
                type: Input
            }], fillOpacity: [{
                type: Input
            }], debugSDF: [{
                type: Input
            }], sync: [{
                type: Output
            }] } });
export class NgtSobaTextModule {
}
NgtSobaTextModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaTextModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaTextModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaTextModule, declarations: [NgtSobaText], imports: [CommonModule, NgtPrimitiveModule], exports: [NgtSobaText, NgtObject3dInputsControllerModule,
        NgtContentMaterialControllerModule] });
NgtSobaTextModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaTextModule, imports: [[CommonModule, NgtPrimitiveModule], NgtObject3dInputsControllerModule,
        NgtContentMaterialControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaTextModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaText],
                    exports: [
                        NgtSobaText,
                        NgtObject3dInputsControllerModule,
                        NgtContentMaterialControllerModule,
                    ],
                    imports: [CommonModule, NgtPrimitiveModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,