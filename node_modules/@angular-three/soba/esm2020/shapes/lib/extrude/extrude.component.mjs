// GENERATED
import { NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER, NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER, NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NgtContentMaterialController, NgtObject3dInputsController, NgtSobaExtender, NgtObject3dInputsControllerModule, NgtContentMaterialControllerModule, } from '@angular-three/core';
import { NgtExtrudeGeometryModule } from '@angular-three/core/geometries';
import { NgtMeshModule } from '@angular-three/core/meshes';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Inject, Input, NgModule, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core/meshes";
import * as i2 from "@angular-three/core";
import * as i3 from "@angular/common";
import * as i4 from "@angular-three/core/geometries";
export class NgtSobaExtrude extends NgtSobaExtender {
    constructor(objectInputsController, contentMaterialController) {
        super();
        this.objectInputsController = objectInputsController;
        this.contentMaterialController = contentMaterialController;
    }
}
NgtSobaExtrude.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaExtrude, deps: [{ token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }, { token: NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaExtrude.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaExtrude, selector: "ngt-soba-extrude", inputs: { args: "args" }, providers: [
        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
        NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER,
        { provide: NgtSobaExtender, useExisting: NgtSobaExtrude },
    ], usesInheritance: true, ngImport: i0, template: `
    <ngt-mesh
      (ready)="object = $event"
      [object3dInputsController]="objectInputsController"
      [contentMaterialController]="contentMaterialController"
    >
      <ngt-extrude-geometry
        *ngIf="args; else withoutArgs"
        [args]="args"
      ></ngt-extrude-geometry>
      <ng-template #withoutArgs>
        <ngt-extrude-geometry></ngt-extrude-geometry>
      </ng-template>
    </ngt-mesh>
    <ng-content></ng-content>
  `, isInline: true, directives: [{ type: i1.NgtMesh, selector: "ngt-mesh", exportAs: ["ngtMesh"] }, { type: i2.NgtMaterialGeometryController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-points  ", inputs: ["morphTargetInfluences", "morphTargetDictionary"], exportAs: ["ngtMaterialGeometryController"] }, { type: i2.NgtObject3dController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera  ", exportAs: ["ngtObject3dController"] }, { type: i2.NgtObject3dInputsController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-billboard,    ngt-soba-detailed,    ngt-soba-line,    ngt-soba-quadratic-bezier-line,    ngt-soba-cubic-bezier-line,    ngt-soba-orthographic-camera,    ngt-soba-gizmo-helper,    ngt-soba-gizmo-viewport,    ngt-soba-gizmo-axis-head,    ngt-soba-text  ", inputs: ["name", "position", "rotation", "quaternion", "scale", "color", "userData", "castShadow", "receiveShadow", "visible", "matrixAutoUpdate", "dispose", "raycast", "appendMode", "appendTo", "object3dInputsController"], outputs: ["click", "contextmenu", "dblclick", "pointerup", "pointerdown", "pointerover", "pointerout", "pointerenter", "pointerleave", "pointermove", "pointermissed", "pointercancel", "wheel"], exportAs: ["ngtObject3dInputsController"] }, { type: i2.NgtContentMaterialController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-text,,    ngt-points  ", inputs: ["material", "isMaterialArray", "contentMaterialController"], exportAs: ["ngtContentMaterialController"] }, { type: i2.NgtContentGeometryController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-points  ", inputs: ["geometry", "contentGeometryController"], exportAs: ["ngtContentGeometryController"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgtExtrudeGeometry, selector: "ngt-extrude-geometry", inputs: ["args"], exportAs: ["ngtExtrudeGeometry"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaExtrude, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-extrude',
                    template: `
    <ngt-mesh
      (ready)="object = $event"
      [object3dInputsController]="objectInputsController"
      [contentMaterialController]="contentMaterialController"
    >
      <ngt-extrude-geometry
        *ngIf="args; else withoutArgs"
        [args]="args"
      ></ngt-extrude-geometry>
      <ng-template #withoutArgs>
        <ngt-extrude-geometry></ngt-extrude-geometry>
      </ng-template>
    </ngt-mesh>
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
                        NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER,
                        { provide: NgtSobaExtender, useExisting: NgtSobaExtrude },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i2.NgtObject3dInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                }] }, { type: i2.NgtContentMaterialController, decorators: [{
                    type: Inject,
                    args: [NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { args: [{
                type: Input
            }] } });
export class NgtSobaExtrudeModule {
}
NgtSobaExtrudeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaExtrudeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaExtrudeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaExtrudeModule, declarations: [NgtSobaExtrude], imports: [NgtMeshModule, NgtExtrudeGeometryModule, CommonModule], exports: [NgtSobaExtrude, NgtObject3dInputsControllerModule,
        NgtContentMaterialControllerModule] });
NgtSobaExtrudeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaExtrudeModule, imports: [[NgtMeshModule, NgtExtrudeGeometryModule, CommonModule], NgtObject3dInputsControllerModule,
        NgtContentMaterialControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaExtrudeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaExtrude],
                    exports: [
                        NgtSobaExtrude,
                        NgtObject3dInputsControllerModule,
                        NgtContentMaterialControllerModule,
                    ],
                    imports: [NgtMeshModule, NgtExtrudeGeometryModule, CommonModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cnVkZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zb2JhL3NoYXBlcy9zcmMvbGliL2V4dHJ1ZGUvZXh0cnVkZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTtBQUNaLE9BQU8sRUFDTCx3Q0FBd0MsRUFDeEMsdUNBQXVDLEVBQ3ZDLHFDQUFxQyxFQUNyQyxvQ0FBb0MsRUFDcEMsNEJBQTRCLEVBQzVCLDJCQUEyQixFQUMzQixlQUFlLEVBQ2YsaUNBQWlDLEVBQ2pDLGtDQUFrQyxHQUNuQyxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7Ozs7OztBQTRCdkIsTUFBTSxPQUFPLGNBQWUsU0FBUSxlQUEyQjtJQUc3RCxZQUVTLHNCQUFtRCxFQUVuRCx5QkFBdUQ7UUFFOUQsS0FBSyxFQUFFLENBQUM7UUFKRCwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQTZCO1FBRW5ELDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBOEI7SUFHaEUsQ0FBQzs7MkdBVlUsY0FBYyxrQkFJZixvQ0FBb0MsYUFFcEMsdUNBQXVDOytGQU50QyxjQUFjLHFFQU5kO1FBQ1QscUNBQXFDO1FBQ3JDLHdDQUF3QztRQUN4QyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRTtLQUMxRCxpREFyQlM7Ozs7Ozs7Ozs7Ozs7OztHQWVUOzJGQVFVLGNBQWM7a0JBekIxQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7O0dBZVQ7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRTt3QkFDVCxxQ0FBcUM7d0JBQ3JDLHdDQUF3Qzt3QkFDeEMsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsZ0JBQWdCLEVBQUU7cUJBQzFEO2lCQUNGOzswQkFLSSxNQUFNOzJCQUFDLG9DQUFvQzs7MEJBRTNDLE1BQU07MkJBQUMsdUNBQXVDOzRDQUx4QyxJQUFJO3NCQUFaLEtBQUs7O0FBcUJSLE1BQU0sT0FBTyxvQkFBb0I7O2lIQUFwQixvQkFBb0I7a0hBQXBCLG9CQUFvQixpQkF0QnBCLGNBQWMsYUFvQmYsYUFBYSxFQUFFLHdCQUF3QixFQUFFLFlBQVksYUFwQnBELGNBQWMsRUFpQnZCLGlDQUFpQztRQUNqQyxrQ0FBa0M7a0hBSXpCLG9CQUFvQixZQUZ0QixDQUFDLGFBQWEsRUFBRSx3QkFBd0IsRUFBRSxZQUFZLENBQUMsRUFIOUQsaUNBQWlDO1FBQ2pDLGtDQUFrQzsyRkFJekIsb0JBQW9CO2tCQVRoQyxRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLGNBQWMsQ0FBQztvQkFDOUIsT0FBTyxFQUFFO3dCQUNQLGNBQWM7d0JBQ2QsaUNBQWlDO3dCQUNqQyxrQ0FBa0M7cUJBQ25DO29CQUNELE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSx3QkFBd0IsRUFBRSxZQUFZLENBQUM7aUJBQ2pFIiwic291cmNlc0NvbnRlbnQiOlsiLy8gR0VORVJBVEVEXG5pbXBvcnQge1xuICBOR1RfQ09OVEVOVF9NQVRFUklBTF9DT05UUk9MTEVSX1BST1ZJREVSLFxuICBOR1RfQ09OVEVOVF9NQVRFUklBTF9XQVRDSEVEX0NPTlRST0xMRVIsXG4gIE5HVF9PQkpFQ1RfSU5QVVRTX0NPTlRST0xMRVJfUFJPVklERVIsXG4gIE5HVF9PQkpFQ1RfSU5QVVRTX1dBVENIRURfQ09OVFJPTExFUixcbiAgTmd0Q29udGVudE1hdGVyaWFsQ29udHJvbGxlcixcbiAgTmd0T2JqZWN0M2RJbnB1dHNDb250cm9sbGVyLFxuICBOZ3RTb2JhRXh0ZW5kZXIsXG4gIE5ndE9iamVjdDNkSW5wdXRzQ29udHJvbGxlck1vZHVsZSxcbiAgTmd0Q29udGVudE1hdGVyaWFsQ29udHJvbGxlck1vZHVsZSxcbn0gZnJvbSAnQGFuZ3VsYXItdGhyZWUvY29yZSc7XG5pbXBvcnQgeyBOZ3RFeHRydWRlR2VvbWV0cnlNb2R1bGUgfSBmcm9tICdAYW5ndWxhci10aHJlZS9jb3JlL2dlb21ldHJpZXMnO1xuaW1wb3J0IHsgTmd0TWVzaE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyLXRocmVlL2NvcmUvbWVzaGVzJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBJbmplY3QsXG4gIElucHV0LFxuICBOZ01vZHVsZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25ndC1zb2JhLWV4dHJ1ZGUnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZ3QtbWVzaFxuICAgICAgKHJlYWR5KT1cIm9iamVjdCA9ICRldmVudFwiXG4gICAgICBbb2JqZWN0M2RJbnB1dHNDb250cm9sbGVyXT1cIm9iamVjdElucHV0c0NvbnRyb2xsZXJcIlxuICAgICAgW2NvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXJdPVwiY29udGVudE1hdGVyaWFsQ29udHJvbGxlclwiXG4gICAgPlxuICAgICAgPG5ndC1leHRydWRlLWdlb21ldHJ5XG4gICAgICAgICpuZ0lmPVwiYXJnczsgZWxzZSB3aXRob3V0QXJnc1wiXG4gICAgICAgIFthcmdzXT1cImFyZ3NcIlxuICAgICAgPjwvbmd0LWV4dHJ1ZGUtZ2VvbWV0cnk+XG4gICAgICA8bmctdGVtcGxhdGUgI3dpdGhvdXRBcmdzPlxuICAgICAgICA8bmd0LWV4dHJ1ZGUtZ2VvbWV0cnk+PC9uZ3QtZXh0cnVkZS1nZW9tZXRyeT5cbiAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPC9uZ3QtbWVzaD5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtcbiAgICBOR1RfT0JKRUNUX0lOUFVUU19DT05UUk9MTEVSX1BST1ZJREVSLFxuICAgIE5HVF9DT05URU5UX01BVEVSSUFMX0NPTlRST0xMRVJfUFJPVklERVIsXG4gICAgeyBwcm92aWRlOiBOZ3RTb2JhRXh0ZW5kZXIsIHVzZUV4aXN0aW5nOiBOZ3RTb2JhRXh0cnVkZSB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3RTb2JhRXh0cnVkZSBleHRlbmRzIE5ndFNvYmFFeHRlbmRlcjxUSFJFRS5NZXNoPiB7XG4gIEBJbnB1dCgpIGFyZ3M/OiBDb25zdHJ1Y3RvclBhcmFtZXRlcnM8dHlwZW9mIFRIUkVFLkV4dHJ1ZGVHZW9tZXRyeT47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChOR1RfT0JKRUNUX0lOUFVUU19XQVRDSEVEX0NPTlRST0xMRVIpXG4gICAgcHVibGljIG9iamVjdElucHV0c0NvbnRyb2xsZXI6IE5ndE9iamVjdDNkSW5wdXRzQ29udHJvbGxlcixcbiAgICBASW5qZWN0KE5HVF9DT05URU5UX01BVEVSSUFMX1dBVENIRURfQ09OVFJPTExFUilcbiAgICBwdWJsaWMgY29udGVudE1hdGVyaWFsQ29udHJvbGxlcjogTmd0Q29udGVudE1hdGVyaWFsQ29udHJvbGxlclxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05ndFNvYmFFeHRydWRlXSxcbiAgZXhwb3J0czogW1xuICAgIE5ndFNvYmFFeHRydWRlLFxuICAgIE5ndE9iamVjdDNkSW5wdXRzQ29udHJvbGxlck1vZHVsZSxcbiAgICBOZ3RDb250ZW50TWF0ZXJpYWxDb250cm9sbGVyTW9kdWxlLFxuICBdLFxuICBpbXBvcnRzOiBbTmd0TWVzaE1vZHVsZSwgTmd0RXh0cnVkZUdlb21ldHJ5TW9kdWxlLCBDb21tb25Nb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3RTb2JhRXh0cnVkZU1vZHVsZSB7fVxuIl19