// GENERATED
import { NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER, NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER, NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NgtContentMaterialController, NgtObject3dInputsController, NgtSobaExtender, NgtObject3dInputsControllerModule, NgtContentMaterialControllerModule, } from '@angular-three/core';
import { NgtTetrahedronGeometryModule } from '@angular-three/core/geometries';
import { NgtMeshModule } from '@angular-three/core/meshes';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Inject, Input, NgModule, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core/meshes";
import * as i2 from "@angular-three/core";
import * as i3 from "@angular/common";
import * as i4 from "@angular-three/core/geometries";
export class NgtSobaTetrahedron extends NgtSobaExtender {
    constructor(objectInputsController, contentMaterialController) {
        super();
        this.objectInputsController = objectInputsController;
        this.contentMaterialController = contentMaterialController;
    }
}
NgtSobaTetrahedron.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaTetrahedron, deps: [{ token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }, { token: NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaTetrahedron.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaTetrahedron, selector: "ngt-soba-tetrahedron", inputs: { args: "args" }, providers: [
        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
        NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER,
        { provide: NgtSobaExtender, useExisting: NgtSobaTetrahedron },
    ], usesInheritance: true, ngImport: i0, template: `
    <ngt-mesh
      (ready)="object = $event"
      [object3dInputsController]="objectInputsController"
      [contentMaterialController]="contentMaterialController"
    >
      <ngt-tetrahedron-geometry
        *ngIf="args; else withoutArgs"
        [args]="args"
      ></ngt-tetrahedron-geometry>
      <ng-template #withoutArgs>
        <ngt-tetrahedron-geometry></ngt-tetrahedron-geometry>
      </ng-template>
    </ngt-mesh>
    <ng-content></ng-content>
  `, isInline: true, directives: [{ type: i1.NgtMesh, selector: "ngt-mesh", exportAs: ["ngtMesh"] }, { type: i2.NgtMaterialGeometryController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-points  ", inputs: ["morphTargetInfluences", "morphTargetDictionary"], exportAs: ["ngtMaterialGeometryController"] }, { type: i2.NgtObject3dController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera  ", exportAs: ["ngtObject3dController"] }, { type: i2.NgtObject3dInputsController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-billboard,    ngt-soba-detailed,    ngt-soba-line,    ngt-soba-quadratic-bezier-line,    ngt-soba-cubic-bezier-line,    ngt-soba-orthographic-camera,    ngt-soba-gizmo-helper,    ngt-soba-gizmo-viewport,    ngt-soba-gizmo-axis-head,    ngt-soba-text  ", inputs: ["name", "position", "rotation", "quaternion", "scale", "color", "userData", "castShadow", "receiveShadow", "visible", "matrixAutoUpdate", "dispose", "raycast", "appendMode", "appendTo", "object3dInputsController"], outputs: ["click", "contextmenu", "dblclick", "pointerup", "pointerdown", "pointerover", "pointerout", "pointerenter", "pointerleave", "pointermove", "pointermissed", "pointercancel", "wheel"], exportAs: ["ngtObject3dInputsController"] }, { type: i2.NgtContentMaterialController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-text,,    ngt-points  ", inputs: ["material", "isMaterialArray", "contentMaterialController"], exportAs: ["ngtContentMaterialController"] }, { type: i2.NgtContentGeometryController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-points  ", inputs: ["geometry", "contentGeometryController"], exportAs: ["ngtContentGeometryController"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgtTetrahedronGeometry, selector: "ngt-tetrahedron-geometry", inputs: ["args"], exportAs: ["ngtTetrahedronGeometry"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaTetrahedron, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-tetrahedron',
                    template: `
    <ngt-mesh
      (ready)="object = $event"
      [object3dInputsController]="objectInputsController"
      [contentMaterialController]="contentMaterialController"
    >
      <ngt-tetrahedron-geometry
        *ngIf="args; else withoutArgs"
        [args]="args"
      ></ngt-tetrahedron-geometry>
      <ng-template #withoutArgs>
        <ngt-tetrahedron-geometry></ngt-tetrahedron-geometry>
      </ng-template>
    </ngt-mesh>
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
                        NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER,
                        { provide: NgtSobaExtender, useExisting: NgtSobaTetrahedron },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i2.NgtObject3dInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                }] }, { type: i2.NgtContentMaterialController, decorators: [{
                    type: Inject,
                    args: [NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { args: [{
                type: Input
            }] } });
export class NgtSobaTetrahedronModule {
}
NgtSobaTetrahedronModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaTetrahedronModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaTetrahedronModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaTetrahedronModule, declarations: [NgtSobaTetrahedron], imports: [NgtMeshModule, NgtTetrahedronGeometryModule, CommonModule], exports: [NgtSobaTetrahedron, NgtObject3dInputsControllerModule,
        NgtContentMaterialControllerModule] });
NgtSobaTetrahedronModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaTetrahedronModule, imports: [[NgtMeshModule, NgtTetrahedronGeometryModule, CommonModule], NgtObject3dInputsControllerModule,
        NgtContentMaterialControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaTetrahedronModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaTetrahedron],
                    exports: [
                        NgtSobaTetrahedron,
                        NgtObject3dInputsControllerModule,
                        NgtContentMaterialControllerModule,
                    ],
                    imports: [NgtMeshModule, NgtTetrahedronGeometryModule, CommonModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV0cmFoZWRyb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvc29iYS9zaGFwZXMvc3JjL2xpYi90ZXRyYWhlZHJvbi90ZXRyYWhlZHJvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTtBQUNaLE9BQU8sRUFDTCx3Q0FBd0MsRUFDeEMsdUNBQXVDLEVBQ3ZDLHFDQUFxQyxFQUNyQyxvQ0FBb0MsRUFDcEMsNEJBQTRCLEVBQzVCLDJCQUEyQixFQUMzQixlQUFlLEVBQ2YsaUNBQWlDLEVBQ2pDLGtDQUFrQyxHQUNuQyxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7Ozs7OztBQTRCdkIsTUFBTSxPQUFPLGtCQUFtQixTQUFRLGVBQTJCO0lBR2pFLFlBRVMsc0JBQW1ELEVBRW5ELHlCQUF1RDtRQUU5RCxLQUFLLEVBQUUsQ0FBQztRQUpELDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBNkI7UUFFbkQsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUE4QjtJQUdoRSxDQUFDOzsrR0FWVSxrQkFBa0Isa0JBSW5CLG9DQUFvQyxhQUVwQyx1Q0FBdUM7bUdBTnRDLGtCQUFrQix5RUFObEI7UUFDVCxxQ0FBcUM7UUFDckMsd0NBQXdDO1FBQ3hDLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsa0JBQWtCLEVBQUU7S0FDOUQsaURBckJTOzs7Ozs7Ozs7Ozs7Ozs7R0FlVDsyRkFRVSxrQkFBa0I7a0JBekI5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7O0dBZVQ7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRTt3QkFDVCxxQ0FBcUM7d0JBQ3JDLHdDQUF3Qzt3QkFDeEMsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsb0JBQW9CLEVBQUU7cUJBQzlEO2lCQUNGOzswQkFLSSxNQUFNOzJCQUFDLG9DQUFvQzs7MEJBRTNDLE1BQU07MkJBQUMsdUNBQXVDOzRDQUx4QyxJQUFJO3NCQUFaLEtBQUs7O0FBcUJSLE1BQU0sT0FBTyx3QkFBd0I7O3FIQUF4Qix3QkFBd0I7c0hBQXhCLHdCQUF3QixpQkF0QnhCLGtCQUFrQixhQW9CbkIsYUFBYSxFQUFFLDRCQUE0QixFQUFFLFlBQVksYUFwQnhELGtCQUFrQixFQWlCM0IsaUNBQWlDO1FBQ2pDLGtDQUFrQztzSEFJekIsd0JBQXdCLFlBRjFCLENBQUMsYUFBYSxFQUFFLDRCQUE0QixFQUFFLFlBQVksQ0FBQyxFQUhsRSxpQ0FBaUM7UUFDakMsa0NBQWtDOzJGQUl6Qix3QkFBd0I7a0JBVHBDLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7b0JBQ2xDLE9BQU8sRUFBRTt3QkFDUCxrQkFBa0I7d0JBQ2xCLGlDQUFpQzt3QkFDakMsa0NBQWtDO3FCQUNuQztvQkFDRCxPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUUsNEJBQTRCLEVBQUUsWUFBWSxDQUFDO2lCQUNyRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEdFTkVSQVRFRFxuaW1wb3J0IHtcbiAgTkdUX0NPTlRFTlRfTUFURVJJQUxfQ09OVFJPTExFUl9QUk9WSURFUixcbiAgTkdUX0NPTlRFTlRfTUFURVJJQUxfV0FUQ0hFRF9DT05UUk9MTEVSLFxuICBOR1RfT0JKRUNUX0lOUFVUU19DT05UUk9MTEVSX1BST1ZJREVSLFxuICBOR1RfT0JKRUNUX0lOUFVUU19XQVRDSEVEX0NPTlRST0xMRVIsXG4gIE5ndENvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXIsXG4gIE5ndE9iamVjdDNkSW5wdXRzQ29udHJvbGxlcixcbiAgTmd0U29iYUV4dGVuZGVyLFxuICBOZ3RPYmplY3QzZElucHV0c0NvbnRyb2xsZXJNb2R1bGUsXG4gIE5ndENvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXJNb2R1bGUsXG59IGZyb20gJ0Bhbmd1bGFyLXRocmVlL2NvcmUnO1xuaW1wb3J0IHsgTmd0VGV0cmFoZWRyb25HZW9tZXRyeU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyLXRocmVlL2NvcmUvZ2VvbWV0cmllcyc7XG5pbXBvcnQgeyBOZ3RNZXNoTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXItdGhyZWUvY29yZS9tZXNoZXMnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIE5nTW9kdWxlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd0LXNvYmEtdGV0cmFoZWRyb24nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZ3QtbWVzaFxuICAgICAgKHJlYWR5KT1cIm9iamVjdCA9ICRldmVudFwiXG4gICAgICBbb2JqZWN0M2RJbnB1dHNDb250cm9sbGVyXT1cIm9iamVjdElucHV0c0NvbnRyb2xsZXJcIlxuICAgICAgW2NvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXJdPVwiY29udGVudE1hdGVyaWFsQ29udHJvbGxlclwiXG4gICAgPlxuICAgICAgPG5ndC10ZXRyYWhlZHJvbi1nZW9tZXRyeVxuICAgICAgICAqbmdJZj1cImFyZ3M7IGVsc2Ugd2l0aG91dEFyZ3NcIlxuICAgICAgICBbYXJnc109XCJhcmdzXCJcbiAgICAgID48L25ndC10ZXRyYWhlZHJvbi1nZW9tZXRyeT5cbiAgICAgIDxuZy10ZW1wbGF0ZSAjd2l0aG91dEFyZ3M+XG4gICAgICAgIDxuZ3QtdGV0cmFoZWRyb24tZ2VvbWV0cnk+PC9uZ3QtdGV0cmFoZWRyb24tZ2VvbWV0cnk+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvbmd0LW1lc2g+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbXG4gICAgTkdUX09CSkVDVF9JTlBVVFNfQ09OVFJPTExFUl9QUk9WSURFUixcbiAgICBOR1RfQ09OVEVOVF9NQVRFUklBTF9DT05UUk9MTEVSX1BST1ZJREVSLFxuICAgIHsgcHJvdmlkZTogTmd0U29iYUV4dGVuZGVyLCB1c2VFeGlzdGluZzogTmd0U29iYVRldHJhaGVkcm9uIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIE5ndFNvYmFUZXRyYWhlZHJvbiBleHRlbmRzIE5ndFNvYmFFeHRlbmRlcjxUSFJFRS5NZXNoPiB7XG4gIEBJbnB1dCgpIGFyZ3M/OiBDb25zdHJ1Y3RvclBhcmFtZXRlcnM8dHlwZW9mIFRIUkVFLlRldHJhaGVkcm9uR2VvbWV0cnk+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoTkdUX09CSkVDVF9JTlBVVFNfV0FUQ0hFRF9DT05UUk9MTEVSKVxuICAgIHB1YmxpYyBvYmplY3RJbnB1dHNDb250cm9sbGVyOiBOZ3RPYmplY3QzZElucHV0c0NvbnRyb2xsZXIsXG4gICAgQEluamVjdChOR1RfQ09OVEVOVF9NQVRFUklBTF9XQVRDSEVEX0NPTlRST0xMRVIpXG4gICAgcHVibGljIGNvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXI6IE5ndENvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXJcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOZ3RTb2JhVGV0cmFoZWRyb25dLFxuICBleHBvcnRzOiBbXG4gICAgTmd0U29iYVRldHJhaGVkcm9uLFxuICAgIE5ndE9iamVjdDNkSW5wdXRzQ29udHJvbGxlck1vZHVsZSxcbiAgICBOZ3RDb250ZW50TWF0ZXJpYWxDb250cm9sbGVyTW9kdWxlLFxuICBdLFxuICBpbXBvcnRzOiBbTmd0TWVzaE1vZHVsZSwgTmd0VGV0cmFoZWRyb25HZW9tZXRyeU1vZHVsZSwgQ29tbW9uTW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd0U29iYVRldHJhaGVkcm9uTW9kdWxlIHt9XG4iXX0=