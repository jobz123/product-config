// GENERATED
import { NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER, NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER, NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NgtContentMaterialController, NgtObject3dInputsController, NgtSobaExtender, NgtObject3dInputsControllerModule, NgtContentMaterialControllerModule, } from '@angular-three/core';
import { NgtOctahedronGeometryModule } from '@angular-three/core/geometries';
import { NgtMeshModule } from '@angular-three/core/meshes';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Inject, Input, NgModule, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core/meshes";
import * as i2 from "@angular-three/core";
import * as i3 from "@angular/common";
import * as i4 from "@angular-three/core/geometries";
export class NgtSobaOctahedron extends NgtSobaExtender {
    constructor(objectInputsController, contentMaterialController) {
        super();
        this.objectInputsController = objectInputsController;
        this.contentMaterialController = contentMaterialController;
    }
}
NgtSobaOctahedron.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOctahedron, deps: [{ token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }, { token: NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaOctahedron.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaOctahedron, selector: "ngt-soba-octahedron", inputs: { args: "args" }, providers: [
        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
        NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER,
        { provide: NgtSobaExtender, useExisting: NgtSobaOctahedron },
    ], usesInheritance: true, ngImport: i0, template: `
    <ngt-mesh
      (ready)="object = $event"
      [object3dInputsController]="objectInputsController"
      [contentMaterialController]="contentMaterialController"
    >
      <ngt-octahedron-geometry
        *ngIf="args; else withoutArgs"
        [args]="args"
      ></ngt-octahedron-geometry>
      <ng-template #withoutArgs>
        <ngt-octahedron-geometry></ngt-octahedron-geometry>
      </ng-template>
    </ngt-mesh>
    <ng-content></ng-content>
  `, isInline: true, directives: [{ type: i1.NgtMesh, selector: "ngt-mesh", exportAs: ["ngtMesh"] }, { type: i2.NgtMaterialGeometryController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-points  ", inputs: ["morphTargetInfluences", "morphTargetDictionary"], exportAs: ["ngtMaterialGeometryController"] }, { type: i2.NgtObject3dController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera  ", exportAs: ["ngtObject3dController"] }, { type: i2.NgtObject3dInputsController, selector: "    ngt-primitive,    ngt-bone,    ngt-group,    ngt-lod,    ngt-points,    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-audio,    ngt-positional-audio,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-light-probe,    ngt-ambient-light,    ngt-ambient-light-probe,    ngt-hemisphere-light,    ngt-hemisphere-light-probe,    ngt-directional-light,    ngt-point-light,    ngt-spot-light,    ngt-rect-area-light,    ngt-arrow-helper,    ngt-axes-helper,    ngt-box3-helper,    ngt-grid-helper,    ngt-plane-helper,    ngt-polar-grid-helper,    ngt-sprite,    ngt-camera,    ngt-perspective-camera,    ngt-orthographic-camera,    ngt-array-camera,    ngt-stereo-camera,    ngt-cube-camera,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-billboard,    ngt-soba-detailed,    ngt-soba-line,    ngt-soba-quadratic-bezier-line,    ngt-soba-cubic-bezier-line,    ngt-soba-orthographic-camera,    ngt-soba-gizmo-helper,    ngt-soba-gizmo-viewport,    ngt-soba-gizmo-axis-head,    ngt-soba-text  ", inputs: ["name", "position", "rotation", "quaternion", "scale", "color", "userData", "castShadow", "receiveShadow", "visible", "matrixAutoUpdate", "dispose", "raycast", "appendMode", "appendTo", "object3dInputsController"], outputs: ["click", "contextmenu", "dblclick", "pointerup", "pointerdown", "pointerover", "pointerout", "pointerenter", "pointerleave", "pointermove", "pointermissed", "pointercancel", "wheel"], exportAs: ["ngtObject3dInputsController"] }, { type: i2.NgtContentMaterialController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-soba-plane,    ngt-soba-box,    ngt-soba-cylinder,    ngt-soba-cone,    ngt-soba-circle,    ngt-soba-sphere,    ngt-soba-tube,    ngt-soba-torus,    ngt-soba-tetrahedron,    ngt-soba-ring,    ngt-soba-polyhedron,    ngt-soba-octahedron,    ngt-soba-dodecahedron,    ngt-soba-icosahedron,    ngt-soba-extrude,    ngt-soba-lathe,    ngt-soba-torus-knot,    ngt-soba-text,,    ngt-points  ", inputs: ["material", "isMaterialArray", "contentMaterialController"], exportAs: ["ngtContentMaterialController"] }, { type: i2.NgtContentGeometryController, selector: "    ngt-mesh,    ngt-instanced-mesh,    ngt-skinned-mesh,    ngt-line,    ngt-line-loop,    ngt-line-segments,    ngt-points  ", inputs: ["geometry", "contentGeometryController"], exportAs: ["ngtContentGeometryController"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgtOctahedronGeometry, selector: "ngt-octahedron-geometry", inputs: ["args"], exportAs: ["ngtOctahedronGeometry"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOctahedron, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-octahedron',
                    template: `
    <ngt-mesh
      (ready)="object = $event"
      [object3dInputsController]="objectInputsController"
      [contentMaterialController]="contentMaterialController"
    >
      <ngt-octahedron-geometry
        *ngIf="args; else withoutArgs"
        [args]="args"
      ></ngt-octahedron-geometry>
      <ng-template #withoutArgs>
        <ngt-octahedron-geometry></ngt-octahedron-geometry>
      </ng-template>
    </ngt-mesh>
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
                        NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER,
                        { provide: NgtSobaExtender, useExisting: NgtSobaOctahedron },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i2.NgtObject3dInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                }] }, { type: i2.NgtContentMaterialController, decorators: [{
                    type: Inject,
                    args: [NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { args: [{
                type: Input
            }] } });
export class NgtSobaOctahedronModule {
}
NgtSobaOctahedronModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOctahedronModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaOctahedronModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOctahedronModule, declarations: [NgtSobaOctahedron], imports: [NgtMeshModule, NgtOctahedronGeometryModule, CommonModule], exports: [NgtSobaOctahedron, NgtObject3dInputsControllerModule,
        NgtContentMaterialControllerModule] });
NgtSobaOctahedronModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOctahedronModule, imports: [[NgtMeshModule, NgtOctahedronGeometryModule, CommonModule], NgtObject3dInputsControllerModule,
        NgtContentMaterialControllerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOctahedronModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaOctahedron],
                    exports: [
                        NgtSobaOctahedron,
                        NgtObject3dInputsControllerModule,
                        NgtContentMaterialControllerModule,
                    ],
                    imports: [NgtMeshModule, NgtOctahedronGeometryModule, CommonModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2N0YWhlZHJvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zb2JhL3NoYXBlcy9zcmMvbGliL29jdGFoZWRyb24vb2N0YWhlZHJvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTtBQUNaLE9BQU8sRUFDTCx3Q0FBd0MsRUFDeEMsdUNBQXVDLEVBQ3ZDLHFDQUFxQyxFQUNyQyxvQ0FBb0MsRUFDcEMsNEJBQTRCLEVBQzVCLDJCQUEyQixFQUMzQixlQUFlLEVBQ2YsaUNBQWlDLEVBQ2pDLGtDQUFrQyxHQUNuQyxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7Ozs7OztBQTRCdkIsTUFBTSxPQUFPLGlCQUFrQixTQUFRLGVBQTJCO0lBR2hFLFlBRVMsc0JBQW1ELEVBRW5ELHlCQUF1RDtRQUU5RCxLQUFLLEVBQUUsQ0FBQztRQUpELDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBNkI7UUFFbkQsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUE4QjtJQUdoRSxDQUFDOzs4R0FWVSxpQkFBaUIsa0JBSWxCLG9DQUFvQyxhQUVwQyx1Q0FBdUM7a0dBTnRDLGlCQUFpQix3RUFOakI7UUFDVCxxQ0FBcUM7UUFDckMsd0NBQXdDO1FBQ3hDLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUU7S0FDN0QsaURBckJTOzs7Ozs7Ozs7Ozs7Ozs7R0FlVDsyRkFRVSxpQkFBaUI7a0JBekI3QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7O0dBZVQ7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRTt3QkFDVCxxQ0FBcUM7d0JBQ3JDLHdDQUF3Qzt3QkFDeEMsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsbUJBQW1CLEVBQUU7cUJBQzdEO2lCQUNGOzswQkFLSSxNQUFNOzJCQUFDLG9DQUFvQzs7MEJBRTNDLE1BQU07MkJBQUMsdUNBQXVDOzRDQUx4QyxJQUFJO3NCQUFaLEtBQUs7O0FBcUJSLE1BQU0sT0FBTyx1QkFBdUI7O29IQUF2Qix1QkFBdUI7cUhBQXZCLHVCQUF1QixpQkF0QnZCLGlCQUFpQixhQW9CbEIsYUFBYSxFQUFFLDJCQUEyQixFQUFFLFlBQVksYUFwQnZELGlCQUFpQixFQWlCMUIsaUNBQWlDO1FBQ2pDLGtDQUFrQztxSEFJekIsdUJBQXVCLFlBRnpCLENBQUMsYUFBYSxFQUFFLDJCQUEyQixFQUFFLFlBQVksQ0FBQyxFQUhqRSxpQ0FBaUM7UUFDakMsa0NBQWtDOzJGQUl6Qix1QkFBdUI7a0JBVG5DLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsaUJBQWlCLENBQUM7b0JBQ2pDLE9BQU8sRUFBRTt3QkFDUCxpQkFBaUI7d0JBQ2pCLGlDQUFpQzt3QkFDakMsa0NBQWtDO3FCQUNuQztvQkFDRCxPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUUsMkJBQTJCLEVBQUUsWUFBWSxDQUFDO2lCQUNwRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEdFTkVSQVRFRFxuaW1wb3J0IHtcbiAgTkdUX0NPTlRFTlRfTUFURVJJQUxfQ09OVFJPTExFUl9QUk9WSURFUixcbiAgTkdUX0NPTlRFTlRfTUFURVJJQUxfV0FUQ0hFRF9DT05UUk9MTEVSLFxuICBOR1RfT0JKRUNUX0lOUFVUU19DT05UUk9MTEVSX1BST1ZJREVSLFxuICBOR1RfT0JKRUNUX0lOUFVUU19XQVRDSEVEX0NPTlRST0xMRVIsXG4gIE5ndENvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXIsXG4gIE5ndE9iamVjdDNkSW5wdXRzQ29udHJvbGxlcixcbiAgTmd0U29iYUV4dGVuZGVyLFxuICBOZ3RPYmplY3QzZElucHV0c0NvbnRyb2xsZXJNb2R1bGUsXG4gIE5ndENvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXJNb2R1bGUsXG59IGZyb20gJ0Bhbmd1bGFyLXRocmVlL2NvcmUnO1xuaW1wb3J0IHsgTmd0T2N0YWhlZHJvbkdlb21ldHJ5TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXItdGhyZWUvY29yZS9nZW9tZXRyaWVzJztcbmltcG9ydCB7IE5ndE1lc2hNb2R1bGUgfSBmcm9tICdAYW5ndWxhci10aHJlZS9jb3JlL21lc2hlcyc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgTmdNb2R1bGUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3Qtc29iYS1vY3RhaGVkcm9uJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmd0LW1lc2hcbiAgICAgIChyZWFkeSk9XCJvYmplY3QgPSAkZXZlbnRcIlxuICAgICAgW29iamVjdDNkSW5wdXRzQ29udHJvbGxlcl09XCJvYmplY3RJbnB1dHNDb250cm9sbGVyXCJcbiAgICAgIFtjb250ZW50TWF0ZXJpYWxDb250cm9sbGVyXT1cImNvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXJcIlxuICAgID5cbiAgICAgIDxuZ3Qtb2N0YWhlZHJvbi1nZW9tZXRyeVxuICAgICAgICAqbmdJZj1cImFyZ3M7IGVsc2Ugd2l0aG91dEFyZ3NcIlxuICAgICAgICBbYXJnc109XCJhcmdzXCJcbiAgICAgID48L25ndC1vY3RhaGVkcm9uLWdlb21ldHJ5PlxuICAgICAgPG5nLXRlbXBsYXRlICN3aXRob3V0QXJncz5cbiAgICAgICAgPG5ndC1vY3RhaGVkcm9uLWdlb21ldHJ5Pjwvbmd0LW9jdGFoZWRyb24tZ2VvbWV0cnk+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvbmd0LW1lc2g+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbXG4gICAgTkdUX09CSkVDVF9JTlBVVFNfQ09OVFJPTExFUl9QUk9WSURFUixcbiAgICBOR1RfQ09OVEVOVF9NQVRFUklBTF9DT05UUk9MTEVSX1BST1ZJREVSLFxuICAgIHsgcHJvdmlkZTogTmd0U29iYUV4dGVuZGVyLCB1c2VFeGlzdGluZzogTmd0U29iYU9jdGFoZWRyb24gfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd0U29iYU9jdGFoZWRyb24gZXh0ZW5kcyBOZ3RTb2JhRXh0ZW5kZXI8VEhSRUUuTWVzaD4ge1xuICBASW5wdXQoKSBhcmdzPzogQ29uc3RydWN0b3JQYXJhbWV0ZXJzPHR5cGVvZiBUSFJFRS5PY3RhaGVkcm9uR2VvbWV0cnk+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoTkdUX09CSkVDVF9JTlBVVFNfV0FUQ0hFRF9DT05UUk9MTEVSKVxuICAgIHB1YmxpYyBvYmplY3RJbnB1dHNDb250cm9sbGVyOiBOZ3RPYmplY3QzZElucHV0c0NvbnRyb2xsZXIsXG4gICAgQEluamVjdChOR1RfQ09OVEVOVF9NQVRFUklBTF9XQVRDSEVEX0NPTlRST0xMRVIpXG4gICAgcHVibGljIGNvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXI6IE5ndENvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXJcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOZ3RTb2JhT2N0YWhlZHJvbl0sXG4gIGV4cG9ydHM6IFtcbiAgICBOZ3RTb2JhT2N0YWhlZHJvbixcbiAgICBOZ3RPYmplY3QzZElucHV0c0NvbnRyb2xsZXJNb2R1bGUsXG4gICAgTmd0Q29udGVudE1hdGVyaWFsQ29udHJvbGxlck1vZHVsZSxcbiAgXSxcbiAgaW1wb3J0czogW05ndE1lc2hNb2R1bGUsIE5ndE9jdGFoZWRyb25HZW9tZXRyeU1vZHVsZSwgQ29tbW9uTW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd0U29iYU9jdGFoZWRyb25Nb2R1bGUge31cbiJdfQ==