var _NgtSobaLoader_initShown$, _NgtSobaLoader_progress$, _NgtSobaLoader_progress;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { EnhancedRxState } from '@angular-three/core';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, NgModule, ViewChild, } from '@angular/core';
import { cancelAnimationFrame, requestAnimationFrame, } from '@rx-angular/cdk/zone-less';
import { selectSlice } from '@rx-angular/state';
import { combineLatest, map, timer } from 'rxjs';
import { NgtSobaProgress } from '../progress/progress.service';
import * as i0 from "@angular/core";
import * as i1 from "../progress/progress.service";
import * as i2 from "@angular/common";
export class NgtSobaLoader extends EnhancedRxState {
    constructor(sobaProgress) {
        super();
        this.sobaProgress = sobaProgress;
        this.vm$ = combineLatest([
            this.select(),
            this.sobaProgress.select(selectSlice(['active', 'progress'])),
        ]).pipe(map(([state, { progress, active }]) => ({
            shown: state.shown,
            containerClass: state.loaderConfig.containerClass,
            innerContainerClass: state.loaderConfig.innerContainerClass,
            barClass: state.loaderConfig.barClass,
            dataClass: state.loaderConfig.dataClass,
            progress,
            active,
        })));
        _NgtSobaLoader_initShown$.set(this, combineLatest([
            this.select('shown'),
            this.sobaProgress.select('active'),
        ]).pipe(map(([shown, active]) => ({ shown, active }))));
        _NgtSobaLoader_progress$.set(this, combineLatest([
            this.select('loaderConfig', 'dataInterpolation'),
            this.sobaProgress.select('progress'),
        ]).pipe(map(([dataInterpolation, progress]) => ({ dataInterpolation, progress }))));
        _NgtSobaLoader_progress.set(this, 0);
        this.set({
            shown: sobaProgress.get('active'),
            loaderConfig: {
                dataInterpolation: (value) => `Loading ${value.toFixed(2)}%`,
            },
        });
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaLoader_initShown$, "f"), ({ shown, active }) => {
            if (shown !== active) {
                const timer$ = timer(300).subscribe(() => this.set({ shown: active }));
                return timer$.unsubscribe.bind(timer$);
            }
            return undefined;
        });
    }
    ngAfterViewInit() {
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaLoader_progress$, "f"), ({ progress, dataInterpolation }) => {
            let raf;
            const updateProgress = () => {
                if (this.progressSpan) {
                    __classPrivateFieldSet(this, _NgtSobaLoader_progress, __classPrivateFieldGet(this, _NgtSobaLoader_progress, "f") + (progress - __classPrivateFieldGet(this, _NgtSobaLoader_progress, "f")) / 2, "f");
                    if (__classPrivateFieldGet(this, _NgtSobaLoader_progress, "f") > 0.95 * progress || progress === 100)
                        __classPrivateFieldSet(this, _NgtSobaLoader_progress, progress, "f");
                    this.progressSpan.nativeElement.innerText =
                        dataInterpolation?.(__classPrivateFieldGet(this, _NgtSobaLoader_progress, "f")) || '';
                    if (__classPrivateFieldGet(this, _NgtSobaLoader_progress, "f") < progress)
                        raf = requestAnimationFrame(updateProgress);
                }
            };
            updateProgress();
            return () => {
                if (raf) {
                    cancelAnimationFrame(raf);
                }
            };
        });
    }
}
_NgtSobaLoader_initShown$ = new WeakMap(), _NgtSobaLoader_progress$ = new WeakMap(), _NgtSobaLoader_progress = new WeakMap();
NgtSobaLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoader, deps: [{ token: i1.NgtSobaProgress }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaLoader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaLoader, selector: "ngt-soba-loader", providers: [NgtSobaProgress], viewQueries: [{ propertyName: "progressSpan", first: true, predicate: ["progressSpan"], descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <ng-container *ngIf="vm$ | async as vm">
      <div
        *ngIf="vm.shown"
        class="container"
        [style.opacity]="vm.active ? 1 : 0"
        [class]="vm.containerClass"
      >
        <div>
          <div class="inner" [class]="vm.innerContainerClass">
            <div
              class="bar"
              [class]="vm.barClass"
              [style.transform]="'scaleX(' + vm.progress / 100 + ')'"
            ></div>
            <span #progressSpan class="data" [class]="vm.dataClass"></span>
          </div>
        </div>
      </div>
    </ng-container>
  `, isInline: true, styles: [".container{position:absolute;top:0;left:0;width:100%;height:100%;background:#171717;display:flex;align-items:center;justify-content:center;transition:opacity .3s ease;z-index:1000}.inner{width:100px;height:3px;background:#272727;text-align:center}.bar{height:3px;width:100%;background:white;transition:transform .2s;transform-origin:left center}.data{display:inline-block;position:relative;font-feature-settings:\"tnum\";font-variant-numeric:tabular-nums;margin-top:.8em;color:#f0f0f0;font-size:.6em;font-family:-apple-system,BlinkMacSystemFont,Inter,Segoe UI,Helvetica Neue,Helvetica,Arial,Roboto,Ubuntu,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",Segoe UI Symbol;white-space:nowrap}\n"], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoader, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-loader',
                    template: `
    <ng-container *ngIf="vm$ | async as vm">
      <div
        *ngIf="vm.shown"
        class="container"
        [style.opacity]="vm.active ? 1 : 0"
        [class]="vm.containerClass"
      >
        <div>
          <div class="inner" [class]="vm.innerContainerClass">
            <div
              class="bar"
              [class]="vm.barClass"
              [style.transform]="'scaleX(' + vm.progress / 100 + ')'"
            ></div>
            <span #progressSpan class="data" [class]="vm.dataClass"></span>
          </div>
        </div>
      </div>
    </ng-container>
  `,
                    styles: [
                        // language=SCSS
                        `
      .container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #171717;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: opacity 300ms ease;
        z-index: 1000;
      }

      .inner {
        width: 100px;
        height: 3px;
        background: #272727;
        text-align: center;
      }

      .bar {
        height: 3px;
        width: 100%;
        background: white;
        transition: transform 200ms;
        transform-origin: left center;
      }

      .data {
        display: inline-block;
        position: relative;
        font-variant-numeric: tabular-nums;
        margin-top: 0.8em;
        color: #f0f0f0;
        font-size: 0.6em;
        font-family: -apple-system, BlinkMacSystemFont, 'Inter', 'Segoe UI',
          'Helvetica Neue', Helvetica, Arial, Roboto, Ubuntu, sans-serif,
          'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
        white-space: nowrap;
      }
    `,
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [NgtSobaProgress],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtSobaProgress }]; }, propDecorators: { progressSpan: [{
                type: ViewChild,
                args: ['progressSpan']
            }] } });
export class NgtSobaLoaderModule {
}
NgtSobaLoaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaLoaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoaderModule, declarations: [NgtSobaLoader], imports: [CommonModule], exports: [NgtSobaLoader] });
NgtSobaLoaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoaderModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoaderModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaLoader],
                    exports: [NgtSobaLoader],
                    imports: [CommonModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,