import { NgtLoaderService, NgtStore } from '@angular-three/core';
import { Injectable } from '@angular/core';
import { combineLatest, map, tap } from 'rxjs';
import * as THREE from 'three';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
export const IsObject = (url) => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';
export class NgtTextureLoaderService {
    constructor(store, loaderService) {
        this.store = store;
        this.loaderService = loaderService;
    }
    load(input) {
        return combineLatest([
            this.store.select('renderer'),
            this.loaderService.use(THREE.TextureLoader, IsObject(input) ? Object.values(input) : input),
        ]).pipe(tap(([renderer, textures]) => {
            if (renderer) {
                (Array.isArray(textures) ? textures : [textures]).forEach(renderer.initTexture.bind(renderer));
            }
        }), map(([, textures]) => {
            if (IsObject(input)) {
                return Object.keys(input).reduce((record, key, index) => {
                    record[key] = textures[index];
                    return record;
                }, {});
            }
            return textures;
        }));
    }
}
NgtTextureLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtTextureLoaderService, deps: [{ token: i1.NgtStore }, { token: i1.NgtLoaderService }], target: i0.ɵɵFactoryTarget.Injectable });
NgtTextureLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtTextureLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtTextureLoaderService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.NgtStore }, { type: i1.NgtLoaderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHVyZS1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3NvYmEvbG9hZGVycy9zcmMvbGliL3RleHR1cmUtbG9hZGVyL3RleHR1cmUtbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxHQUFHLEVBQWMsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDOzs7QUFFL0IsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBUSxFQUFpQyxFQUFFLENBQ2xFLEdBQUcsS0FBSyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE9BQU8sR0FBRyxLQUFLLFVBQVUsQ0FBQztBQUcxRSxNQUFNLE9BQU8sdUJBQXVCO0lBQ2xDLFlBQ1UsS0FBZSxFQUNmLGFBQStCO1FBRC9CLFVBQUssR0FBTCxLQUFLLENBQVU7UUFDZixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7SUFDdEMsQ0FBQztJQUVKLElBQUksQ0FDRixLQUFhO1FBUWIsT0FBTyxhQUFhLENBQUM7WUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO1lBQzdCLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUNwQixLQUFLLENBQUMsYUFBYSxFQUNuQixRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FDL0M7U0FDRixDQUFDLENBQUMsSUFBSSxDQUNMLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQ3ZELFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUNwQyxDQUFDO2FBQ0g7UUFDSCxDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFBRTtZQUNuQixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDbkIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7b0JBQ3RELE1BQU0sQ0FBQyxHQUFtQixDQUFDLEdBQUksUUFBNEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDbkUsT0FBTyxNQUFNLENBQUM7Z0JBQ2hCLENBQUMsRUFBRSxFQUF5QyxDQUFDLENBQUM7YUFDL0M7WUFFRCxPQUFPLFFBQVEsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FPSCxDQUFDO0lBQ0osQ0FBQzs7b0hBOUNVLHVCQUF1Qjt3SEFBdkIsdUJBQXVCLGNBRFYsTUFBTTsyRkFDbkIsdUJBQXVCO2tCQURuQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5ndExvYWRlclNlcnZpY2UsIE5ndFN0b3JlIH0gZnJvbSAnQGFuZ3VsYXItdGhyZWUvY29yZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBtYXAsIE9ic2VydmFibGUsIHRhcCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5leHBvcnQgY29uc3QgSXNPYmplY3QgPSAodXJsOiBhbnkpOiB1cmwgaXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9PlxuICB1cmwgPT09IE9iamVjdCh1cmwpICYmICFBcnJheS5pc0FycmF5KHVybCkgJiYgdHlwZW9mIHVybCAhPT0gJ2Z1bmN0aW9uJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBOZ3RUZXh0dXJlTG9hZGVyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc3RvcmU6IE5ndFN0b3JlLFxuICAgIHByaXZhdGUgbG9hZGVyU2VydmljZTogTmd0TG9hZGVyU2VydmljZVxuICApIHt9XG5cbiAgbG9hZDxUSW5wdXQgZXh0ZW5kcyBzdHJpbmcgfCBzdHJpbmdbXSB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KFxuICAgIGlucHV0OiBUSW5wdXRcbiAgKTogT2JzZXJ2YWJsZTxcbiAgICBUSW5wdXQgZXh0ZW5kcyBhbnlbXVxuICAgICAgPyBUSFJFRS5UZXh0dXJlW11cbiAgICAgIDogVElucHV0IGV4dGVuZHMgb2JqZWN0XG4gICAgICA/IFJlY29yZDxrZXlvZiBUSW5wdXQsIFRIUkVFLlRleHR1cmU+XG4gICAgICA6IFRIUkVFLlRleHR1cmVcbiAgPiB7XG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW1xuICAgICAgdGhpcy5zdG9yZS5zZWxlY3QoJ3JlbmRlcmVyJyksXG4gICAgICB0aGlzLmxvYWRlclNlcnZpY2UudXNlKFxuICAgICAgICBUSFJFRS5UZXh0dXJlTG9hZGVyLFxuICAgICAgICBJc09iamVjdChpbnB1dCkgPyBPYmplY3QudmFsdWVzKGlucHV0KSA6IGlucHV0XG4gICAgICApLFxuICAgIF0pLnBpcGUoXG4gICAgICB0YXAoKFtyZW5kZXJlciwgdGV4dHVyZXNdKSA9PiB7XG4gICAgICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgICAgIChBcnJheS5pc0FycmF5KHRleHR1cmVzKSA/IHRleHR1cmVzIDogW3RleHR1cmVzXSkuZm9yRWFjaChcbiAgICAgICAgICAgIHJlbmRlcmVyLmluaXRUZXh0dXJlLmJpbmQocmVuZGVyZXIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBtYXAoKFssIHRleHR1cmVzXSkgPT4ge1xuICAgICAgICBpZiAoSXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGlucHV0KS5yZWR1Y2UoKHJlY29yZCwga2V5LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmVjb3JkW2tleSBhcyBrZXlvZiBUSW5wdXRdID0gKHRleHR1cmVzIGFzIFRIUkVFLlRleHR1cmVbXSlbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgICAgICB9LCB7fSBhcyBSZWNvcmQ8a2V5b2YgVElucHV0LCBUSFJFRS5UZXh0dXJlPik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGV4dHVyZXM7XG4gICAgICB9KVxuICAgICkgYXMgT2JzZXJ2YWJsZTxcbiAgICAgIFRJbnB1dCBleHRlbmRzIGFueVtdXG4gICAgICAgID8gVEhSRUUuVGV4dHVyZVtdXG4gICAgICAgIDogVElucHV0IGV4dGVuZHMgb2JqZWN0XG4gICAgICAgID8gUmVjb3JkPGtleW9mIFRJbnB1dCwgVEhSRUUuVGV4dHVyZT5cbiAgICAgICAgOiBUSFJFRS5UZXh0dXJlXG4gICAgPjtcbiAgfVxufVxuIl19