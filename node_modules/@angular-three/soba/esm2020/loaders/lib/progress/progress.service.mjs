import { EnhancedRxState } from '@angular-three/core';
import { Injectable } from '@angular/core';
import * as THREE from 'three';
import * as i0 from "@angular/core";
export class NgtSobaProgress extends EnhancedRxState {
    constructor() {
        super();
        let saveLastTotalLoaded = 0;
        this.set({ active: false, errors: [] });
        THREE.DefaultLoadingManager.onStart = (item, loaded, total) => {
            this.set({
                active: true,
                item,
                loaded,
                total,
                progress: ((loaded - saveLastTotalLoaded) / (total - saveLastTotalLoaded)) *
                    100,
            });
        };
        THREE.DefaultLoadingManager.onLoad = () => {
            this.set({ active: false });
        };
        THREE.DefaultLoadingManager.onError = (url) => {
            this.set((state) => ({ errors: [...state.errors, url] }));
        };
        THREE.DefaultLoadingManager.onProgress = (item, loaded, total) => {
            if (loaded === total) {
                saveLastTotalLoaded = total;
            }
            this.set({
                active: true,
                item,
                loaded,
                total,
                progress: ((loaded - saveLastTotalLoaded) / (total - saveLastTotalLoaded)) *
                    100 || 100,
            });
        };
    }
}
NgtSobaProgress.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaProgress, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgtSobaProgress.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaProgress });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaProgress, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3NvYmEvbG9hZGVycy9zcmMvbGliL3Byb2dyZXNzL3Byb2dyZXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7O0FBWS9CLE1BQU0sT0FBTyxlQUFnQixTQUFRLGVBQWtDO0lBQ3JFO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLG1CQUFtQixHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4QyxLQUFLLENBQUMscUJBQXFCLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUM1RCxJQUFJLENBQUMsR0FBRyxDQUFDO2dCQUNQLE1BQU0sRUFBRSxJQUFJO2dCQUNaLElBQUk7Z0JBQ0osTUFBTTtnQkFDTixLQUFLO2dCQUNMLFFBQVEsRUFDTixDQUFDLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsbUJBQW1CLENBQUMsQ0FBQztvQkFDaEUsR0FBRzthQUNOLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUVGLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUM7UUFFRixLQUFLLENBQUMscUJBQXFCLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7WUFDcEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1RCxDQUFDLENBQUM7UUFFRixLQUFLLENBQUMscUJBQXFCLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUMvRCxJQUFJLE1BQU0sS0FBSyxLQUFLLEVBQUU7Z0JBQ3BCLG1CQUFtQixHQUFHLEtBQUssQ0FBQzthQUM3QjtZQUNELElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ1AsTUFBTSxFQUFFLElBQUk7Z0JBQ1osSUFBSTtnQkFDSixNQUFNO2dCQUNOLEtBQUs7Z0JBQ0wsUUFBUSxFQUNOLENBQUMsQ0FBQyxNQUFNLEdBQUcsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxDQUFDO29CQUM5RCxHQUFHLElBQUksR0FBRzthQUNmLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztJQUNKLENBQUM7OzRHQXZDVSxlQUFlO2dIQUFmLGVBQWU7MkZBQWYsZUFBZTtrQkFEM0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVuaGFuY2VkUnhTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyLXRocmVlL2NvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5pbnRlcmZhY2UgTmd0UHJvZ3Jlc3NSZXN1bHQge1xuICBlcnJvcnM6IHN0cmluZ1tdO1xuICBhY3RpdmU6IGJvb2xlYW47XG4gIHByb2dyZXNzOiBudW1iZXI7XG4gIGl0ZW06IHN0cmluZztcbiAgbG9hZGVkOiBudW1iZXI7XG4gIHRvdGFsOiBudW1iZXI7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3RTb2JhUHJvZ3Jlc3MgZXh0ZW5kcyBFbmhhbmNlZFJ4U3RhdGU8Tmd0UHJvZ3Jlc3NSZXN1bHQ+IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBsZXQgc2F2ZUxhc3RUb3RhbExvYWRlZCA9IDA7XG4gICAgdGhpcy5zZXQoeyBhY3RpdmU6IGZhbHNlLCBlcnJvcnM6IFtdIH0pO1xuICAgIFRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlci5vblN0YXJ0ID0gKGl0ZW0sIGxvYWRlZCwgdG90YWwpID0+IHtcbiAgICAgIHRoaXMuc2V0KHtcbiAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICBpdGVtLFxuICAgICAgICBsb2FkZWQsXG4gICAgICAgIHRvdGFsLFxuICAgICAgICBwcm9ncmVzczpcbiAgICAgICAgICAoKGxvYWRlZCAtIHNhdmVMYXN0VG90YWxMb2FkZWQpIC8gKHRvdGFsIC0gc2F2ZUxhc3RUb3RhbExvYWRlZCkpICpcbiAgICAgICAgICAxMDAsXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgVEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyLm9uTG9hZCA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2V0KHsgYWN0aXZlOiBmYWxzZSB9KTtcbiAgICB9O1xuXG4gICAgVEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyLm9uRXJyb3IgPSAodXJsOiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuc2V0KChzdGF0ZSkgPT4gKHsgZXJyb3JzOiBbLi4uc3RhdGUuZXJyb3JzLCB1cmxdIH0pKTtcbiAgICB9O1xuXG4gICAgVEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyLm9uUHJvZ3Jlc3MgPSAoaXRlbSwgbG9hZGVkLCB0b3RhbCkgPT4ge1xuICAgICAgaWYgKGxvYWRlZCA9PT0gdG90YWwpIHtcbiAgICAgICAgc2F2ZUxhc3RUb3RhbExvYWRlZCA9IHRvdGFsO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXQoe1xuICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIGl0ZW0sXG4gICAgICAgIGxvYWRlZCxcbiAgICAgICAgdG90YWwsXG4gICAgICAgIHByb2dyZXNzOlxuICAgICAgICAgICgobG9hZGVkIC0gc2F2ZUxhc3RUb3RhbExvYWRlZCkgLyAodG90YWwgLSBzYXZlTGFzdFRvdGFsTG9hZGVkKSkgKlxuICAgICAgICAgICAgMTAwIHx8IDEwMCxcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn1cbiJdfQ==