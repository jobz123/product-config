import { NgtLoaderService } from '@angular-three/core';
import { Injectable } from '@angular/core';
// @ts-ignore
import { MeshoptDecoder } from 'three-stdlib';
import { DRACOLoader } from 'three-stdlib/loaders/DRACOLoader';
import { GLTFLoader } from 'three-stdlib/loaders/GLTFLoader';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
let dracoLoader = null;
function _extensions(useDraco, useMeshOpt, extensions) {
    return (loader) => {
        if (extensions) {
            extensions(loader);
        }
        if (useDraco) {
            if (!dracoLoader) {
                dracoLoader = new DRACOLoader();
            }
            dracoLoader.setDecoderPath(typeof useDraco === 'string'
                ? useDraco
                : 'https://www.gstatic.com/draco/versioned/decoders/1.4.3/');
            loader.setDRACOLoader(dracoLoader);
        }
        if (useMeshOpt) {
            loader.setMeshoptDecoder(typeof MeshoptDecoder === 'function' ? MeshoptDecoder() : MeshoptDecoder);
        }
    };
}
export class NgtGLTFLoaderService {
    constructor(loaderService) {
        this.loaderService = loaderService;
    }
    load(path, useDraco = true, useMeshOpt = true, extensions) {
        return this.loaderService.use(GLTFLoader, path, _extensions(useDraco, useMeshOpt, extensions));
    }
}
NgtGLTFLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtGLTFLoaderService, deps: [{ token: i1.NgtLoaderService }], target: i0.ɵɵFactoryTarget.Injectable });
NgtGLTFLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtGLTFLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtGLTFLoaderService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.NgtLoaderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2x0Zi1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3NvYmEvbG9hZGVycy9zcmMvbGliL2dsdGYtbG9hZGVyL2dsdGYtbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFnQixNQUFNLHFCQUFxQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsYUFBYTtBQUNiLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9ELE9BQU8sRUFBUSxVQUFVLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7O0FBRW5FLElBQUksV0FBVyxHQUF1QixJQUFJLENBQUM7QUFFM0MsU0FBUyxXQUFXLENBQ2xCLFFBQTBCLEVBQzFCLFVBQW1CLEVBQ25CLFVBQXlDO0lBRXpDLE9BQU8sQ0FBQyxNQUFvQixFQUFFLEVBQUU7UUFDOUIsSUFBSSxVQUFVLEVBQUU7WUFDZCxVQUFVLENBQUMsTUFBb0IsQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsSUFBSSxRQUFRLEVBQUU7WUFDWixJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNoQixXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQzthQUNqQztZQUVELFdBQVcsQ0FBQyxjQUFjLENBQ3hCLE9BQU8sUUFBUSxLQUFLLFFBQVE7Z0JBQzFCLENBQUMsQ0FBQyxRQUFRO2dCQUNWLENBQUMsQ0FBQyx5REFBeUQsQ0FDOUQsQ0FBQztZQUNELE1BQXFCLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBSSxVQUFVLEVBQUU7WUFDYixNQUFxQixDQUFDLGlCQUFpQixDQUN0QyxPQUFPLGNBQWMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQ3pFLENBQUM7U0FDSDtJQUNILENBQUMsQ0FBQztBQUNKLENBQUM7QUFHRCxNQUFNLE9BQU8sb0JBQW9CO0lBQy9CLFlBQW9CLGFBQStCO1FBQS9CLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtJQUFHLENBQUM7SUFFdkQsSUFBSSxDQUNGLElBQVksRUFDWixXQUE2QixJQUFJLEVBQ2pDLGFBQXNCLElBQUksRUFDMUIsVUFBeUM7UUFJekMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FDM0IsVUFBVSxFQUNWLElBQUksRUFDSixXQUFXLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FHOUMsQ0FBQztJQUNKLENBQUM7O2lIQWxCVSxvQkFBb0I7cUhBQXBCLG9CQUFvQixjQURQLE1BQU07MkZBQ25CLG9CQUFvQjtrQkFEaEMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ3RMb2FkZXJTZXJ2aWNlLCBOZ3RPYmplY3RNYXAgfSBmcm9tICdAYW5ndWxhci10aHJlZS9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IE1lc2hvcHREZWNvZGVyIH0gZnJvbSAndGhyZWUtc3RkbGliJztcbmltcG9ydCB7IERSQUNPTG9hZGVyIH0gZnJvbSAndGhyZWUtc3RkbGliL2xvYWRlcnMvRFJBQ09Mb2FkZXInO1xuaW1wb3J0IHsgR0xURiwgR0xURkxvYWRlciB9IGZyb20gJ3RocmVlLXN0ZGxpYi9sb2FkZXJzL0dMVEZMb2FkZXInO1xuXG5sZXQgZHJhY29Mb2FkZXI6IERSQUNPTG9hZGVyIHwgbnVsbCA9IG51bGw7XG5cbmZ1bmN0aW9uIF9leHRlbnNpb25zKFxuICB1c2VEcmFjbzogYm9vbGVhbiB8IHN0cmluZyxcbiAgdXNlTWVzaE9wdDogYm9vbGVhbixcbiAgZXh0ZW5zaW9ucz86IChsb2FkZXI6IEdMVEZMb2FkZXIpID0+IHZvaWRcbikge1xuICByZXR1cm4gKGxvYWRlcjogVEhSRUUuTG9hZGVyKSA9PiB7XG4gICAgaWYgKGV4dGVuc2lvbnMpIHtcbiAgICAgIGV4dGVuc2lvbnMobG9hZGVyIGFzIEdMVEZMb2FkZXIpO1xuICAgIH1cblxuICAgIGlmICh1c2VEcmFjbykge1xuICAgICAgaWYgKCFkcmFjb0xvYWRlcikge1xuICAgICAgICBkcmFjb0xvYWRlciA9IG5ldyBEUkFDT0xvYWRlcigpO1xuICAgICAgfVxuXG4gICAgICBkcmFjb0xvYWRlci5zZXREZWNvZGVyUGF0aChcbiAgICAgICAgdHlwZW9mIHVzZURyYWNvID09PSAnc3RyaW5nJ1xuICAgICAgICAgID8gdXNlRHJhY29cbiAgICAgICAgICA6ICdodHRwczovL3d3dy5nc3RhdGljLmNvbS9kcmFjby92ZXJzaW9uZWQvZGVjb2RlcnMvMS40LjMvJ1xuICAgICAgKTtcbiAgICAgIChsb2FkZXIgYXMgR0xURkxvYWRlcikuc2V0RFJBQ09Mb2FkZXIoZHJhY29Mb2FkZXIpO1xuICAgIH1cblxuICAgIGlmICh1c2VNZXNoT3B0KSB7XG4gICAgICAobG9hZGVyIGFzIEdMVEZMb2FkZXIpLnNldE1lc2hvcHREZWNvZGVyKFxuICAgICAgICB0eXBlb2YgTWVzaG9wdERlY29kZXIgPT09ICdmdW5jdGlvbicgPyBNZXNob3B0RGVjb2RlcigpIDogTWVzaG9wdERlY29kZXJcbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE5ndEdMVEZMb2FkZXJTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2FkZXJTZXJ2aWNlOiBOZ3RMb2FkZXJTZXJ2aWNlKSB7fVxuXG4gIGxvYWQ8VElucHV0IGV4dGVuZHMgc3RyaW5nIHwgc3RyaW5nW10+KFxuICAgIHBhdGg6IFRJbnB1dCxcbiAgICB1c2VEcmFjbzogYm9vbGVhbiB8IHN0cmluZyA9IHRydWUsXG4gICAgdXNlTWVzaE9wdDogYm9vbGVhbiA9IHRydWUsXG4gICAgZXh0ZW5zaW9ucz86IChsb2FkZXI6IEdMVEZMb2FkZXIpID0+IHZvaWRcbiAgKTogT2JzZXJ2YWJsZTxcbiAgICBUSW5wdXQgZXh0ZW5kcyBhbnlbXSA/IChHTFRGICYgTmd0T2JqZWN0TWFwKVtdIDogR0xURiAmIE5ndE9iamVjdE1hcFxuICA+IHtcbiAgICByZXR1cm4gdGhpcy5sb2FkZXJTZXJ2aWNlLnVzZShcbiAgICAgIEdMVEZMb2FkZXIsXG4gICAgICBwYXRoLFxuICAgICAgX2V4dGVuc2lvbnModXNlRHJhY28sIHVzZU1lc2hPcHQsIGV4dGVuc2lvbnMpXG4gICAgKSBhcyBPYnNlcnZhYmxlPFxuICAgICAgVElucHV0IGV4dGVuZHMgYW55W10gPyAoR0xURiAmIE5ndE9iamVjdE1hcClbXSA6IEdMVEYgJiBOZ3RPYmplY3RNYXBcbiAgICA+O1xuICB9XG59XG4iXX0=