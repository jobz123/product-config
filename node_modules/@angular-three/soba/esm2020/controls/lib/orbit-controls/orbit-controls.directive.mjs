var _NgtSobaOrbitControls_controlsEventsChanges$, _NgtSobaOrbitControls_makeDefaultParams$, _NgtSobaOrbitControls_controlsTargetParams$;
import { __classPrivateFieldGet } from "tslib";
import { EnhancedRxState, makeVector3, NgtAnimationFrameStore, NgtEventsStore, NgtLoopService, NgtPerformanceStore, NgtStore, } from '@angular-three/core';
import { Directive, EventEmitter, Input, NgModule, NgZone, Output, } from '@angular/core';
import { selectSlice } from '@rx-angular/state';
import { of, switchMap } from 'rxjs';
import * as THREE from 'three';
import { OrbitControls } from 'three-stdlib/controls/OrbitControls';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
export class NgtSobaOrbitControls extends EnhancedRxState {
    constructor(loopService, store, eventsStore, animationFrameStore, performanceStore, ngZone) {
        super();
        this.loopService = loopService;
        this.store = store;
        this.eventsStore = eventsStore;
        this.animationFrameStore = animationFrameStore;
        this.performanceStore = performanceStore;
        this.ngZone = ngZone;
        this.ready = this.select('controls');
        this.change = new EventEmitter();
        this.start = new EventEmitter();
        this.end = new EventEmitter();
        _NgtSobaOrbitControls_controlsEventsChanges$.set(this, this.select(selectSlice(['regress', 'controls', 'domElement'])));
        _NgtSobaOrbitControls_makeDefaultParams$.set(this, this.select(selectSlice(['makeDefault', 'controls'])));
        _NgtSobaOrbitControls_controlsTargetParams$.set(this, this.select(selectSlice(['target', 'controls'])));
        this.set({
            target: undefined,
            regress: false,
            enableDamping: true,
            makeDefault: false,
            camera: undefined,
            domElement: undefined,
        });
    }
    set target(v) {
        this.set({ target: v });
    }
    set camera(v) {
        this.set({ camera: v });
    }
    set domElement(v) {
        this.set({ domElement: v });
    }
    set regress(v) {
        this.set({ regress: v });
    }
    set enableDamping(v) {
        this.set({ enableDamping: v });
    }
    set makeDefault(v) {
        this.set({ makeDefault: v });
    }
    ngOnInit() {
        this.connect('camera', this.store.select('camera'));
        this.connect('domElement', this.eventsStore.select('connected').pipe(switchMap((connected) => {
            if (typeof connected !== 'boolean')
                return of(connected);
            return this.store.select('renderer', 'domElement');
        })));
        this.holdEffect(this.select('controls'), (controls) => {
            let animationUuid;
            if (controls.enabled) {
                animationUuid = this.animationFrameStore.register({
                    callback: () => {
                        controls.update();
                    },
                });
            }
            return () => {
                this.animationFrameStore.actions.unsubscriberUuid(animationUuid);
            };
        });
        this.hold(this.select('camera'), (camera) => {
            const enableDamping = this.get('enableDamping');
            if (camera) {
                const controls = new OrbitControls(camera);
                controls.enableDamping = enableDamping;
                this.set({ controls });
            }
        });
        this.hold(__classPrivateFieldGet(this, _NgtSobaOrbitControls_controlsTargetParams$, "f"), ({ controls, target }) => {
            if (controls) {
                const vector3Target = makeVector3(target);
                if (vector3Target) {
                    controls.target = vector3Target;
                }
            }
        });
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaOrbitControls_controlsEventsChanges$, "f"), ({ controls, regress, domElement }) => {
            return this.ngZone.runOutsideAngular(() => {
                const changeCallback = (e) => {
                    this.loopService.invalidate();
                    if (regress) {
                        this.performanceStore.regress();
                    }
                    if (this.change.observed) {
                        this.change.emit(e);
                    }
                };
                let startCallback;
                let endCallback;
                if (domElement) {
                    controls.connect(domElement);
                }
                controls.addEventListener('change', changeCallback);
                if (this.start.observed) {
                    startCallback = (event) => {
                        this.start.emit(event);
                    };
                    controls.addEventListener('start', startCallback);
                }
                if (this.end.observed) {
                    endCallback = (event) => {
                        this.end.emit(event);
                    };
                    controls.addEventListener('end', endCallback);
                }
                return () => {
                    controls.removeEventListener('change', changeCallback);
                    if (endCallback)
                        controls.removeEventListener('end', endCallback);
                    if (startCallback)
                        controls.removeEventListener('start', startCallback);
                    controls.dispose();
                };
            });
        });
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaOrbitControls_makeDefaultParams$, "f"), ({ controls, makeDefault }) => {
            const oldControls = this.store.get('controls');
            if (makeDefault) {
                this.store.set({ controls });
            }
            return () => {
                this.store.set({ controls: oldControls });
            };
        });
    }
    get controls() {
        return (this.store.get('controls') ||
            this.get('controls'));
    }
}
_NgtSobaOrbitControls_controlsEventsChanges$ = new WeakMap(), _NgtSobaOrbitControls_makeDefaultParams$ = new WeakMap(), _NgtSobaOrbitControls_controlsTargetParams$ = new WeakMap();
NgtSobaOrbitControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControls, deps: [{ token: i1.NgtLoopService }, { token: i1.NgtStore }, { token: i1.NgtEventsStore }, { token: i1.NgtAnimationFrameStore }, { token: i1.NgtPerformanceStore }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgtSobaOrbitControls.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaOrbitControls, selector: "ngt-soba-orbit-controls", inputs: { target: "target", camera: "camera", domElement: "domElement", regress: "regress", enableDamping: "enableDamping", makeDefault: "makeDefault" }, outputs: { ready: "ready", change: "change", start: "start", end: "end" }, exportAs: ["ngtSobaOrbitControls"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControls, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-soba-orbit-controls',
                    exportAs: 'ngtSobaOrbitControls',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtLoopService }, { type: i1.NgtStore }, { type: i1.NgtEventsStore }, { type: i1.NgtAnimationFrameStore }, { type: i1.NgtPerformanceStore }, { type: i0.NgZone }]; }, propDecorators: { target: [{
                type: Input
            }], camera: [{
                type: Input
            }], domElement: [{
                type: Input
            }], regress: [{
                type: Input
            }], enableDamping: [{
                type: Input
            }], makeDefault: [{
                type: Input
            }], ready: [{
                type: Output
            }], change: [{
                type: Output
            }], start: [{
                type: Output
            }], end: [{
                type: Output
            }] } });
export class NgtSobaOrbitControlsModule {
}
NgtSobaOrbitControlsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControlsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaOrbitControlsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControlsModule, declarations: [NgtSobaOrbitControls], exports: [NgtSobaOrbitControls] });
NgtSobaOrbitControlsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControlsModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControlsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaOrbitControls],
                    exports: [NgtSobaOrbitControls],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,