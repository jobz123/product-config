import { EnhancedRxState, NgtAnimationFrameStore, NgtLoopService, NgtStore, } from '@angular-three/core';
import { Directive, EventEmitter, NgModule, NgZone, Output, } from '@angular/core';
import { selectSlice } from '@rx-angular/state';
import { FlyControls } from 'three-stdlib';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
export class NgtSobaFlyControls extends EnhancedRxState {
    constructor(store, loopService, animationFrameStore, ngZone) {
        super();
        this.store = store;
        this.loopService = loopService;
        this.animationFrameStore = animationFrameStore;
        this.ngZone = ngZone;
        this.ready = this.select('controls');
        this.change = new EventEmitter();
    }
    ngOnInit() {
        this.holdEffect(this.select('controls'), (controls) => {
            const callback = (e) => {
                this.loopService.invalidate();
                if (this.change.observed) {
                    this.change.emit(e);
                }
            };
            controls.addEventListener('change', callback);
            return () => {
                controls.removeEventListener('change', callback);
            };
        });
        this.hold(this.store.select(selectSlice(['camera', 'renderer'])), ({ renderer, camera }) => {
            this.ngZone.runOutsideAngular(() => {
                if (camera && renderer) {
                    this.set({
                        controls: new FlyControls(camera, renderer.domElement),
                    });
                }
            });
        });
        this.holdEffect(this.select('controls'), (controls) => {
            const animationUuid = this.animationFrameStore.register({
                callback: ({ delta }) => {
                    controls.update(delta);
                },
            });
            return () => {
                this.animationFrameStore.actions.unsubscriberUuid(animationUuid);
            };
        });
    }
    get controls() {
        return this.get('controls');
    }
}
NgtSobaFlyControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControls, deps: [{ token: i1.NgtStore }, { token: i1.NgtLoopService }, { token: i1.NgtAnimationFrameStore }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgtSobaFlyControls.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaFlyControls, selector: "ngt-soba-fly-controls", outputs: { ready: "ready", change: "change" }, exportAs: ["ngtSobaFlyControls"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControls, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-soba-fly-controls',
                    exportAs: 'ngtSobaFlyControls',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtStore }, { type: i1.NgtLoopService }, { type: i1.NgtAnimationFrameStore }, { type: i0.NgZone }]; }, propDecorators: { ready: [{
                type: Output
            }], change: [{
                type: Output
            }] } });
export class NgtSobaFlyControlsModule {
}
NgtSobaFlyControlsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControlsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaFlyControlsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControlsModule, declarations: [NgtSobaFlyControls], exports: [NgtSobaFlyControls] });
NgtSobaFlyControlsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControlsModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControlsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaFlyControls],
                    exports: [NgtSobaFlyControls],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5LWNvbnRyb2xzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3NvYmEvY29udHJvbHMvc3JjL2xpYi9mbHktY29udHJvbHMvZmx5LWNvbnRyb2xzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsZUFBZSxFQUNmLHNCQUFzQixFQUN0QixjQUFjLEVBQ2QsUUFBUSxHQUNULE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osUUFBUSxFQUNSLE1BQU0sRUFFTixNQUFNLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRWhELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxjQUFjLENBQUM7OztBQVUzQyxNQUFNLE9BQU8sa0JBQ1gsU0FBUSxlQUF3QztJQU1oRCxZQUNVLEtBQWUsRUFDZixXQUEyQixFQUMzQixtQkFBMkMsRUFDM0MsTUFBYztRQUV0QixLQUFLLEVBQUUsQ0FBQztRQUxBLFVBQUssR0FBTCxLQUFLLENBQVU7UUFDZixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFDM0Isd0JBQW1CLEdBQW5CLG1CQUFtQixDQUF3QjtRQUMzQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBUGQsVUFBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFlLENBQUM7SUFTbkQsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNwRCxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQWMsRUFBRSxFQUFFO2dCQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUM5QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO29CQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDckI7WUFDSCxDQUFDLENBQUM7WUFFRixRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBRTlDLE9BQU8sR0FBRyxFQUFFO2dCQUNWLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbkQsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxDQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQ3RELENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtZQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtnQkFDakMsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFO29CQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDO3dCQUNQLFFBQVEsRUFBRSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLFVBQVUsQ0FBQztxQkFDdkQsQ0FBQyxDQUFDO2lCQUNKO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQ0YsQ0FBQztRQUVGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUM7Z0JBQ3RELFFBQVEsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtvQkFDdEIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDekIsQ0FBQzthQUNGLENBQUMsQ0FBQztZQUVILE9BQU8sR0FBRyxFQUFFO2dCQUNWLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDbkUsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBZ0IsQ0FBQztJQUM3QyxDQUFDOzsrR0E1RFUsa0JBQWtCO21HQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFKOUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxRQUFRLEVBQUUsb0JBQW9CO2lCQUMvQjtzTEFLVyxLQUFLO3NCQUFkLE1BQU07Z0JBQ0csTUFBTTtzQkFBZixNQUFNOztBQThEVCxNQUFNLE9BQU8sd0JBQXdCOztxSEFBeEIsd0JBQXdCO3NIQUF4Qix3QkFBd0IsaUJBbkV4QixrQkFBa0IsYUFBbEIsa0JBQWtCO3NIQW1FbEIsd0JBQXdCOzJGQUF4Qix3QkFBd0I7a0JBSnBDLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7b0JBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO2lCQUM5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEVuaGFuY2VkUnhTdGF0ZSxcbiAgTmd0QW5pbWF0aW9uRnJhbWVTdG9yZSxcbiAgTmd0TG9vcFNlcnZpY2UsXG4gIE5ndFN0b3JlLFxufSBmcm9tICdAYW5ndWxhci10aHJlZS9jb3JlJztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBOZ01vZHVsZSxcbiAgTmdab25lLFxuICBPbkluaXQsXG4gIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBzZWxlY3RTbGljZSB9IGZyb20gJ0ByeC1hbmd1bGFyL3N0YXRlJztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IEZseUNvbnRyb2xzIH0gZnJvbSAndGhyZWUtc3RkbGliJztcblxuaW50ZXJmYWNlIE5ndFNvYmFGbHlDb250cm9sc1N0YXRlIHtcbiAgY29udHJvbHM6IEZseUNvbnRyb2xzO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICduZ3Qtc29iYS1mbHktY29udHJvbHMnLFxuICBleHBvcnRBczogJ25ndFNvYmFGbHlDb250cm9scycsXG59KVxuZXhwb3J0IGNsYXNzIE5ndFNvYmFGbHlDb250cm9sc1xuICBleHRlbmRzIEVuaGFuY2VkUnhTdGF0ZTxOZ3RTb2JhRmx5Q29udHJvbHNTdGF0ZT5cbiAgaW1wbGVtZW50cyBPbkluaXRcbntcbiAgQE91dHB1dCgpIHJlYWR5ID0gdGhpcy5zZWxlY3QoJ2NvbnRyb2xzJyk7XG4gIEBPdXRwdXQoKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPFRIUkVFLkV2ZW50PigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc3RvcmU6IE5ndFN0b3JlLFxuICAgIHByaXZhdGUgbG9vcFNlcnZpY2U6IE5ndExvb3BTZXJ2aWNlLFxuICAgIHByaXZhdGUgYW5pbWF0aW9uRnJhbWVTdG9yZTogTmd0QW5pbWF0aW9uRnJhbWVTdG9yZSxcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmhvbGRFZmZlY3QodGhpcy5zZWxlY3QoJ2NvbnRyb2xzJyksIChjb250cm9scykgPT4ge1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSAoZTogVEhSRUUuRXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5sb29wU2VydmljZS5pbnZhbGlkYXRlKCk7XG4gICAgICAgIGlmICh0aGlzLmNoYW5nZS5vYnNlcnZlZCkge1xuICAgICAgICAgIHRoaXMuY2hhbmdlLmVtaXQoZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGNhbGxiYWNrKTtcblxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29udHJvbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgY2FsbGJhY2spO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHRoaXMuaG9sZChcbiAgICAgIHRoaXMuc3RvcmUuc2VsZWN0KHNlbGVjdFNsaWNlKFsnY2FtZXJhJywgJ3JlbmRlcmVyJ10pKSxcbiAgICAgICh7IHJlbmRlcmVyLCBjYW1lcmEgfSkgPT4ge1xuICAgICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgaWYgKGNhbWVyYSAmJiByZW5kZXJlcikge1xuICAgICAgICAgICAgdGhpcy5zZXQoe1xuICAgICAgICAgICAgICBjb250cm9sczogbmV3IEZseUNvbnRyb2xzKGNhbWVyYSwgcmVuZGVyZXIuZG9tRWxlbWVudCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLmhvbGRFZmZlY3QodGhpcy5zZWxlY3QoJ2NvbnRyb2xzJyksIChjb250cm9scykgPT4ge1xuICAgICAgY29uc3QgYW5pbWF0aW9uVXVpZCA9IHRoaXMuYW5pbWF0aW9uRnJhbWVTdG9yZS5yZWdpc3Rlcih7XG4gICAgICAgIGNhbGxiYWNrOiAoeyBkZWx0YSB9KSA9PiB7XG4gICAgICAgICAgY29udHJvbHMudXBkYXRlKGRlbHRhKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lU3RvcmUuYWN0aW9ucy51bnN1YnNjcmliZXJVdWlkKGFuaW1hdGlvblV1aWQpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBjb250cm9scygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2NvbnRyb2xzJykgYXMgRmx5Q29udHJvbHM7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmd0U29iYUZseUNvbnRyb2xzXSxcbiAgZXhwb3J0czogW05ndFNvYmFGbHlDb250cm9sc10sXG59KVxuZXhwb3J0IGNsYXNzIE5ndFNvYmFGbHlDb250cm9sc01vZHVsZSB7fVxuIl19