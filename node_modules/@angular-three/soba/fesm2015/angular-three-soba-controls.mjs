import { __classPrivateFieldGet } from 'tslib';
import * as i1 from '@angular-three/core';
import { EnhancedRxState, makeVector3 } from '@angular-three/core';
import * as i0 from '@angular/core';
import { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';
import { selectSlice } from '@rx-angular/state';
import { switchMap, of } from 'rxjs';
import { OrbitControls } from 'three-stdlib/controls/OrbitControls';
import { FlyControls, FirstPersonControls } from 'three-stdlib';

var _NgtSobaOrbitControls_controlsEventsChanges$, _NgtSobaOrbitControls_makeDefaultParams$, _NgtSobaOrbitControls_controlsTargetParams$;
class NgtSobaOrbitControls extends EnhancedRxState {
    constructor(loopService, store, eventsStore, animationFrameStore, performanceStore, ngZone) {
        super();
        this.loopService = loopService;
        this.store = store;
        this.eventsStore = eventsStore;
        this.animationFrameStore = animationFrameStore;
        this.performanceStore = performanceStore;
        this.ngZone = ngZone;
        this.ready = this.select('controls');
        this.change = new EventEmitter();
        this.start = new EventEmitter();
        this.end = new EventEmitter();
        _NgtSobaOrbitControls_controlsEventsChanges$.set(this, this.select(selectSlice(['regress', 'controls', 'domElement'])));
        _NgtSobaOrbitControls_makeDefaultParams$.set(this, this.select(selectSlice(['makeDefault', 'controls'])));
        _NgtSobaOrbitControls_controlsTargetParams$.set(this, this.select(selectSlice(['target', 'controls'])));
        this.set({
            target: undefined,
            regress: false,
            enableDamping: true,
            makeDefault: false,
            camera: undefined,
            domElement: undefined,
        });
    }
    set target(v) {
        this.set({ target: v });
    }
    set camera(v) {
        this.set({ camera: v });
    }
    set domElement(v) {
        this.set({ domElement: v });
    }
    set regress(v) {
        this.set({ regress: v });
    }
    set enableDamping(v) {
        this.set({ enableDamping: v });
    }
    set makeDefault(v) {
        this.set({ makeDefault: v });
    }
    ngOnInit() {
        this.connect('camera', this.store.select('camera'));
        this.connect('domElement', this.eventsStore.select('connected').pipe(switchMap((connected) => {
            if (typeof connected !== 'boolean')
                return of(connected);
            return this.store.select('renderer', 'domElement');
        })));
        this.holdEffect(this.select('controls'), (controls) => {
            let animationUuid;
            if (controls.enabled) {
                animationUuid = this.animationFrameStore.register({
                    callback: () => {
                        controls.update();
                    },
                });
            }
            return () => {
                this.animationFrameStore.actions.unsubscriberUuid(animationUuid);
            };
        });
        this.hold(this.select('camera'), (camera) => {
            const enableDamping = this.get('enableDamping');
            if (camera) {
                const controls = new OrbitControls(camera);
                controls.enableDamping = enableDamping;
                this.set({ controls });
            }
        });
        this.hold(__classPrivateFieldGet(this, _NgtSobaOrbitControls_controlsTargetParams$, "f"), ({ controls, target }) => {
            if (controls) {
                const vector3Target = makeVector3(target);
                if (vector3Target) {
                    controls.target = vector3Target;
                }
            }
        });
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaOrbitControls_controlsEventsChanges$, "f"), ({ controls, regress, domElement }) => {
            return this.ngZone.runOutsideAngular(() => {
                const changeCallback = (e) => {
                    this.loopService.invalidate();
                    if (regress) {
                        this.performanceStore.regress();
                    }
                    if (this.change.observed) {
                        this.change.emit(e);
                    }
                };
                let startCallback;
                let endCallback;
                if (domElement) {
                    controls.connect(domElement);
                }
                controls.addEventListener('change', changeCallback);
                if (this.start.observed) {
                    startCallback = (event) => {
                        this.start.emit(event);
                    };
                    controls.addEventListener('start', startCallback);
                }
                if (this.end.observed) {
                    endCallback = (event) => {
                        this.end.emit(event);
                    };
                    controls.addEventListener('end', endCallback);
                }
                return () => {
                    controls.removeEventListener('change', changeCallback);
                    if (endCallback)
                        controls.removeEventListener('end', endCallback);
                    if (startCallback)
                        controls.removeEventListener('start', startCallback);
                    controls.dispose();
                };
            });
        });
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaOrbitControls_makeDefaultParams$, "f"), ({ controls, makeDefault }) => {
            const oldControls = this.store.get('controls');
            if (makeDefault) {
                this.store.set({ controls });
            }
            return () => {
                this.store.set({ controls: oldControls });
            };
        });
    }
    get controls() {
        return (this.store.get('controls') ||
            this.get('controls'));
    }
}
_NgtSobaOrbitControls_controlsEventsChanges$ = new WeakMap(), _NgtSobaOrbitControls_makeDefaultParams$ = new WeakMap(), _NgtSobaOrbitControls_controlsTargetParams$ = new WeakMap();
NgtSobaOrbitControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControls, deps: [{ token: i1.NgtLoopService }, { token: i1.NgtStore }, { token: i1.NgtEventsStore }, { token: i1.NgtAnimationFrameStore }, { token: i1.NgtPerformanceStore }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgtSobaOrbitControls.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaOrbitControls, selector: "ngt-soba-orbit-controls", inputs: { target: "target", camera: "camera", domElement: "domElement", regress: "regress", enableDamping: "enableDamping", makeDefault: "makeDefault" }, outputs: { ready: "ready", change: "change", start: "start", end: "end" }, exportAs: ["ngtSobaOrbitControls"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControls, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-soba-orbit-controls',
                    exportAs: 'ngtSobaOrbitControls',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtLoopService }, { type: i1.NgtStore }, { type: i1.NgtEventsStore }, { type: i1.NgtAnimationFrameStore }, { type: i1.NgtPerformanceStore }, { type: i0.NgZone }]; }, propDecorators: { target: [{
                type: Input
            }], camera: [{
                type: Input
            }], domElement: [{
                type: Input
            }], regress: [{
                type: Input
            }], enableDamping: [{
                type: Input
            }], makeDefault: [{
                type: Input
            }], ready: [{
                type: Output
            }], change: [{
                type: Output
            }], start: [{
                type: Output
            }], end: [{
                type: Output
            }] } });
class NgtSobaOrbitControlsModule {
}
NgtSobaOrbitControlsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControlsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaOrbitControlsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControlsModule, declarations: [NgtSobaOrbitControls], exports: [NgtSobaOrbitControls] });
NgtSobaOrbitControlsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControlsModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaOrbitControlsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaOrbitControls],
                    exports: [NgtSobaOrbitControls],
                }]
        }] });

class NgtSobaFlyControls extends EnhancedRxState {
    constructor(store, loopService, animationFrameStore, ngZone) {
        super();
        this.store = store;
        this.loopService = loopService;
        this.animationFrameStore = animationFrameStore;
        this.ngZone = ngZone;
        this.ready = this.select('controls');
        this.change = new EventEmitter();
    }
    ngOnInit() {
        this.holdEffect(this.select('controls'), (controls) => {
            const callback = (e) => {
                this.loopService.invalidate();
                if (this.change.observed) {
                    this.change.emit(e);
                }
            };
            controls.addEventListener('change', callback);
            return () => {
                controls.removeEventListener('change', callback);
            };
        });
        this.hold(this.store.select(selectSlice(['camera', 'renderer'])), ({ renderer, camera }) => {
            this.ngZone.runOutsideAngular(() => {
                if (camera && renderer) {
                    this.set({
                        controls: new FlyControls(camera, renderer.domElement),
                    });
                }
            });
        });
        this.holdEffect(this.select('controls'), (controls) => {
            const animationUuid = this.animationFrameStore.register({
                callback: ({ delta }) => {
                    controls.update(delta);
                },
            });
            return () => {
                this.animationFrameStore.actions.unsubscriberUuid(animationUuid);
            };
        });
    }
    get controls() {
        return this.get('controls');
    }
}
NgtSobaFlyControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControls, deps: [{ token: i1.NgtStore }, { token: i1.NgtLoopService }, { token: i1.NgtAnimationFrameStore }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgtSobaFlyControls.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaFlyControls, selector: "ngt-soba-fly-controls", outputs: { ready: "ready", change: "change" }, exportAs: ["ngtSobaFlyControls"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControls, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-soba-fly-controls',
                    exportAs: 'ngtSobaFlyControls',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtStore }, { type: i1.NgtLoopService }, { type: i1.NgtAnimationFrameStore }, { type: i0.NgZone }]; }, propDecorators: { ready: [{
                type: Output
            }], change: [{
                type: Output
            }] } });
class NgtSobaFlyControlsModule {
}
NgtSobaFlyControlsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControlsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaFlyControlsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControlsModule, declarations: [NgtSobaFlyControls], exports: [NgtSobaFlyControls] });
NgtSobaFlyControlsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControlsModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFlyControlsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaFlyControls],
                    exports: [NgtSobaFlyControls],
                }]
        }] });

class NgtSobaFirstPersonControls extends EnhancedRxState {
    constructor(store, animationFrameStore, ngZone) {
        super();
        this.store = store;
        this.animationFrameStore = animationFrameStore;
        this.ngZone = ngZone;
        this.ready = this.select('controls');
    }
    ngOnInit() {
        this.hold(this.store.select(selectSlice(['camera', 'renderer'])), ({ renderer, camera }) => {
            this.ngZone.runOutsideAngular(() => {
                if (camera && renderer) {
                    this.set({
                        controls: new FirstPersonControls(camera, renderer.domElement),
                    });
                }
            });
        });
        this.holdEffect(this.select('controls'), (controls) => {
            const animationUuid = this.animationFrameStore.register({
                callback: ({ delta }) => {
                    controls.update(delta);
                },
            });
            return () => {
                this.animationFrameStore.actions.unsubscriberUuid(animationUuid);
            };
        });
    }
    get controls() {
        return this.get('controls');
    }
}
NgtSobaFirstPersonControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFirstPersonControls, deps: [{ token: i1.NgtStore }, { token: i1.NgtAnimationFrameStore }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgtSobaFirstPersonControls.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaFirstPersonControls, selector: "ngt-soba-first-person-controls", outputs: { ready: "ready" }, exportAs: ["ngtSobaFirstPersonControls"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFirstPersonControls, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-soba-first-person-controls',
                    exportAs: 'ngtSobaFirstPersonControls',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtStore }, { type: i1.NgtAnimationFrameStore }, { type: i0.NgZone }]; }, propDecorators: { ready: [{
                type: Output
            }] } });
class NgtSobaFirstPersonControlsModule {
}
NgtSobaFirstPersonControlsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFirstPersonControlsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaFirstPersonControlsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFirstPersonControlsModule, declarations: [NgtSobaFirstPersonControls], exports: [NgtSobaFirstPersonControls] });
NgtSobaFirstPersonControlsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFirstPersonControlsModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaFirstPersonControlsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaFirstPersonControls],
                    exports: [NgtSobaFirstPersonControls],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NgtSobaFirstPersonControls, NgtSobaFirstPersonControlsModule, NgtSobaFlyControls, NgtSobaFlyControlsModule, NgtSobaOrbitControls, NgtSobaOrbitControlsModule };
//# sourceMappingURL=angular-three-soba-controls.mjs.map
