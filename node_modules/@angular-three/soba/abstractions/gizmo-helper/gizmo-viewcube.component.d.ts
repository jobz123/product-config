import { Controller, EnhancedRxState, NgtEvent, NgtSobaExtender, NgtStore } from '@angular-three/core';
import { EventEmitter, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import * as THREE from 'three';
import { NgtSobaGizmoHelperStore } from './gizmo-helper.store';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core/group";
import * as i2 from "@angular-three/core/lights";
import * as i3 from "@angular-three/core/materials";
import * as i4 from "@angular/common";
import * as i5 from "@angular-three/core";
import * as i6 from "@angular-three/soba/shapes";
declare type XYZ = [number, number, number];
declare type GenericProps = {
    font: string;
    opacity: number;
    color: string;
    hoverColor: string;
    textColor: string;
    strokeColor: string;
    faces: string[];
};
export declare class GenericController extends Controller {
    private state;
    get props(): string[];
    get controller(): Controller | undefined;
    genericController?: GenericController;
    set font(font: string);
    set opacity(opacity: number);
    set color(color: string);
    set hoverColor(hoverColor: string);
    set textColor(textColor: string);
    set strokeColor(strokeColor: string);
    set faces(faces: string[]);
    click: EventEmitter<NgtEvent<MouseEvent>>;
    constructor(ngZone: NgZone, state: EnhancedRxState<GenericProps>);
    get rxState(): EnhancedRxState<GenericProps>;
    get clickOutput(): EventEmitter<NgtEvent<MouseEvent>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<GenericController, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<GenericController, "    ngt-soba-gizmo-viewcube,    ngt-soba-gizmo-edgecube,    ngt-soba-gizmo-facecube,    ngt-soba-gizmo-face-material  ", never, { "genericController": "genericController"; "font": "font"; "opacity": "opacity"; "color": "color"; "hoverColor": "hoverColor"; "textColor": "textColor"; "strokeColor": "strokeColor"; "faces": "faces"; }, { "click": "click"; }, never>;
}
export declare const NGT_VIEWCUBE_GENERIC_WATCHED_CONTROLLER: import("@angular/core").InjectionToken<GenericController>, NGT_VIEWCUBE_GENERIC_CONTROLLER_PROVIDER: import("@angular/core").Provider[];
export declare class NgtSobaGizmoViewcube extends NgtSobaExtender<THREE.Group> {
    genericController: GenericController;
    private gizmoHelperStore;
    corners: THREE.Vector3[];
    edges: THREE.Vector3[];
    cornerDimensions: XYZ;
    edgeDimensions: XYZ[];
    readonly gizmo$: Observable<THREE.Group>;
    constructor(genericController: GenericController, gizmoHelperStore: NgtSobaGizmoHelperStore);
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtSobaGizmoViewcube, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgtSobaGizmoViewcube, "ngt-soba-gizmo-viewcube", never, {}, {}, never, never>;
}
export declare class NgtSobaGizmoEdgecube extends NgtSobaExtender<THREE.Mesh> {
    genericController: GenericController;
    private gizmoHelperStore;
    private state;
    set dimensions(dimensions: XYZ);
    set position(position: THREE.Vector3);
    hover: boolean;
    readonly raycast$: Observable<(raycaster: THREE.Raycaster, intersects: THREE.Intersection<THREE.Object3D<THREE.Event>>[]) => void>;
    readonly vm$: Observable<{
        dimensions: XYZ;
        position: THREE.Vector3;
        hoverColor: string;
    }>;
    constructor(genericController: GenericController, gizmoHelperStore: NgtSobaGizmoHelperStore, state: EnhancedRxState<{
        dimensions: XYZ;
        position: THREE.Vector3;
    }>);
    onEdgeClick($event: NgtEvent<MouseEvent>): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtSobaGizmoEdgecube, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgtSobaGizmoEdgecube, "ngt-soba-gizmo-edgecube[dimensions][position]", never, { "dimensions": "dimensions"; "position": "position"; }, {}, never, never>;
}
export declare class NgtSobaGizmoFacecube extends NgtSobaExtender<THREE.Mesh> {
    genericController: GenericController;
    private gizmoHelperStore;
    hover: number | null;
    readonly raycast$: Observable<(raycaster: THREE.Raycaster, intersects: THREE.Intersection<THREE.Object3D<THREE.Event>>[]) => void>;
    constructor(genericController: GenericController, gizmoHelperStore: NgtSobaGizmoHelperStore);
    onFacePointerMove($event: NgtEvent<PointerEvent>): void;
    onFacePointerOut($event: NgtEvent<PointerEvent>): void;
    onFaceClick($event: NgtEvent<MouseEvent>): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtSobaGizmoFacecube, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgtSobaGizmoFacecube, "ngt-soba-gizmo-facecube", never, {}, {}, never, never>;
}
export declare class NgtSobaGizmoFaceMaterial {
    #private;
    genericController: GenericController;
    private state;
    private store;
    set hover(hover: boolean);
    set index(index: number);
    readonly parameter$: Observable<{
        texture: THREE.CanvasTexture;
        color: string;
        opacity: number;
    }>;
    constructor(genericController: GenericController, state: EnhancedRxState<{
        hover: boolean;
        index: number;
        texture: THREE.CanvasTexture;
    }>, store: NgtStore, document: Document);
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtSobaGizmoFaceMaterial, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgtSobaGizmoFaceMaterial, "ngt-soba-gizmo-face-material[hover][index]", never, { "hover": "hover"; "index": "index"; }, {}, never, never>;
}
export declare class NgtSobaGizmoViewcubeModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtSobaGizmoViewcubeModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<NgtSobaGizmoViewcubeModule, [typeof GenericController, typeof NgtSobaGizmoViewcube, typeof NgtSobaGizmoEdgecube, typeof NgtSobaGizmoFacecube, typeof NgtSobaGizmoFaceMaterial], [typeof i1.NgtGroupModule, typeof i2.NgtAmbientLightModule, typeof i2.NgtPointLightModule, typeof i3.NgtMeshLambertMaterialModule, typeof i4.CommonModule, typeof i5.NgtRepeatModule, typeof i3.NgtMeshBasicMaterialModule, typeof i6.NgtSobaBoxModule], [typeof NgtSobaGizmoViewcube, typeof GenericController]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<NgtSobaGizmoViewcubeModule>;
}
export {};
