import * as i1 from '@angular-three/core';
import { EnhancedRxState } from '@angular-three/core';
import * as i0 from '@angular/core';
import { Injectable, Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';
import { combineLatest, tap, map, timer } from 'rxjs';
import * as THREE from 'three';
import { MeshoptDecoder } from 'three-stdlib';
import { DRACOLoader } from 'three-stdlib/loaders/DRACOLoader';
import { GLTFLoader } from 'three-stdlib/loaders/GLTFLoader';
import { __classPrivateFieldGet, __classPrivateFieldSet } from 'tslib';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import { requestAnimationFrame, cancelAnimationFrame } from '@rx-angular/cdk/zone-less';
import { selectSlice } from '@rx-angular/state';

const IsObject = (url) => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';
class NgtTextureLoaderService {
    constructor(store, loaderService) {
        this.store = store;
        this.loaderService = loaderService;
    }
    load(input) {
        return combineLatest([
            this.store.select('renderer'),
            this.loaderService.use(THREE.TextureLoader, IsObject(input) ? Object.values(input) : input),
        ]).pipe(tap(([renderer, textures]) => {
            if (renderer) {
                (Array.isArray(textures) ? textures : [textures]).forEach(renderer.initTexture.bind(renderer));
            }
        }), map(([, textures]) => {
            if (IsObject(input)) {
                return Object.keys(input).reduce((record, key, index) => {
                    record[key] = textures[index];
                    return record;
                }, {});
            }
            return textures;
        }));
    }
}
NgtTextureLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtTextureLoaderService, deps: [{ token: i1.NgtStore }, { token: i1.NgtLoaderService }], target: i0.ɵɵFactoryTarget.Injectable });
NgtTextureLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtTextureLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtTextureLoaderService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.NgtStore }, { type: i1.NgtLoaderService }]; } });

let dracoLoader = null;
function _extensions(useDraco, useMeshOpt, extensions) {
    return (loader) => {
        if (extensions) {
            extensions(loader);
        }
        if (useDraco) {
            if (!dracoLoader) {
                dracoLoader = new DRACOLoader();
            }
            dracoLoader.setDecoderPath(typeof useDraco === 'string'
                ? useDraco
                : 'https://www.gstatic.com/draco/versioned/decoders/1.4.3/');
            loader.setDRACOLoader(dracoLoader);
        }
        if (useMeshOpt) {
            loader.setMeshoptDecoder(typeof MeshoptDecoder === 'function' ? MeshoptDecoder() : MeshoptDecoder);
        }
    };
}
class NgtGLTFLoaderService {
    constructor(loaderService) {
        this.loaderService = loaderService;
    }
    load(path, useDraco = true, useMeshOpt = true, extensions) {
        return this.loaderService.use(GLTFLoader, path, _extensions(useDraco, useMeshOpt, extensions));
    }
}
NgtGLTFLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtGLTFLoaderService, deps: [{ token: i1.NgtLoaderService }], target: i0.ɵɵFactoryTarget.Injectable });
NgtGLTFLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtGLTFLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtGLTFLoaderService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.NgtLoaderService }]; } });

class NgtSobaProgress extends EnhancedRxState {
    constructor() {
        super();
        let saveLastTotalLoaded = 0;
        this.set({ active: false, errors: [] });
        THREE.DefaultLoadingManager.onStart = (item, loaded, total) => {
            this.set({
                active: true,
                item,
                loaded,
                total,
                progress: ((loaded - saveLastTotalLoaded) / (total - saveLastTotalLoaded)) *
                    100,
            });
        };
        THREE.DefaultLoadingManager.onLoad = () => {
            this.set({ active: false });
        };
        THREE.DefaultLoadingManager.onError = (url) => {
            this.set((state) => ({ errors: [...state.errors, url] }));
        };
        THREE.DefaultLoadingManager.onProgress = (item, loaded, total) => {
            if (loaded === total) {
                saveLastTotalLoaded = total;
            }
            this.set({
                active: true,
                item,
                loaded,
                total,
                progress: ((loaded - saveLastTotalLoaded) / (total - saveLastTotalLoaded)) *
                    100 || 100,
            });
        };
    }
}
NgtSobaProgress.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaProgress, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgtSobaProgress.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaProgress });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaProgress, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

var _NgtSobaLoader_initShown$, _NgtSobaLoader_progress$, _NgtSobaLoader_progress;
class NgtSobaLoader extends EnhancedRxState {
    constructor(sobaProgress) {
        super();
        this.sobaProgress = sobaProgress;
        this.vm$ = combineLatest([
            this.select(),
            this.sobaProgress.select(selectSlice(['active', 'progress'])),
        ]).pipe(map(([state, { progress, active }]) => ({
            shown: state.shown,
            containerClass: state.loaderConfig.containerClass,
            innerContainerClass: state.loaderConfig.innerContainerClass,
            barClass: state.loaderConfig.barClass,
            dataClass: state.loaderConfig.dataClass,
            progress,
            active,
        })));
        _NgtSobaLoader_initShown$.set(this, combineLatest([
            this.select('shown'),
            this.sobaProgress.select('active'),
        ]).pipe(map(([shown, active]) => ({ shown, active }))));
        _NgtSobaLoader_progress$.set(this, combineLatest([
            this.select('loaderConfig', 'dataInterpolation'),
            this.sobaProgress.select('progress'),
        ]).pipe(map(([dataInterpolation, progress]) => ({ dataInterpolation, progress }))));
        _NgtSobaLoader_progress.set(this, 0);
        this.set({
            shown: sobaProgress.get('active'),
            loaderConfig: {
                dataInterpolation: (value) => `Loading ${value.toFixed(2)}%`,
            },
        });
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaLoader_initShown$, "f"), ({ shown, active }) => {
            if (shown !== active) {
                const timer$ = timer(300).subscribe(() => this.set({ shown: active }));
                return timer$.unsubscribe.bind(timer$);
            }
            return undefined;
        });
    }
    ngAfterViewInit() {
        this.holdEffect(__classPrivateFieldGet(this, _NgtSobaLoader_progress$, "f"), ({ progress, dataInterpolation }) => {
            let raf;
            const updateProgress = () => {
                if (this.progressSpan) {
                    __classPrivateFieldSet(this, _NgtSobaLoader_progress, __classPrivateFieldGet(this, _NgtSobaLoader_progress, "f") + (progress - __classPrivateFieldGet(this, _NgtSobaLoader_progress, "f")) / 2, "f");
                    if (__classPrivateFieldGet(this, _NgtSobaLoader_progress, "f") > 0.95 * progress || progress === 100)
                        __classPrivateFieldSet(this, _NgtSobaLoader_progress, progress, "f");
                    this.progressSpan.nativeElement.innerText =
                        dataInterpolation?.(__classPrivateFieldGet(this, _NgtSobaLoader_progress, "f")) || '';
                    if (__classPrivateFieldGet(this, _NgtSobaLoader_progress, "f") < progress)
                        raf = requestAnimationFrame(updateProgress);
                }
            };
            updateProgress();
            return () => {
                if (raf) {
                    cancelAnimationFrame(raf);
                }
            };
        });
    }
}
_NgtSobaLoader_initShown$ = new WeakMap(), _NgtSobaLoader_progress$ = new WeakMap(), _NgtSobaLoader_progress = new WeakMap();
NgtSobaLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoader, deps: [{ token: NgtSobaProgress }], target: i0.ɵɵFactoryTarget.Component });
NgtSobaLoader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgtSobaLoader, selector: "ngt-soba-loader", providers: [NgtSobaProgress], viewQueries: [{ propertyName: "progressSpan", first: true, predicate: ["progressSpan"], descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <ng-container *ngIf="vm$ | async as vm">
      <div
        *ngIf="vm.shown"
        class="container"
        [style.opacity]="vm.active ? 1 : 0"
        [class]="vm.containerClass"
      >
        <div>
          <div class="inner" [class]="vm.innerContainerClass">
            <div
              class="bar"
              [class]="vm.barClass"
              [style.transform]="'scaleX(' + vm.progress / 100 + ')'"
            ></div>
            <span #progressSpan class="data" [class]="vm.dataClass"></span>
          </div>
        </div>
      </div>
    </ng-container>
  `, isInline: true, styles: [".container{position:absolute;top:0;left:0;width:100%;height:100%;background:#171717;display:flex;align-items:center;justify-content:center;transition:opacity .3s ease;z-index:1000}.inner{width:100px;height:3px;background:#272727;text-align:center}.bar{height:3px;width:100%;background:white;transition:transform .2s;transform-origin:left center}.data{display:inline-block;position:relative;font-feature-settings:\"tnum\";font-variant-numeric:tabular-nums;margin-top:.8em;color:#f0f0f0;font-size:.6em;font-family:-apple-system,BlinkMacSystemFont,Inter,Segoe UI,Helvetica Neue,Helvetica,Arial,Roboto,Ubuntu,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",Segoe UI Symbol;white-space:nowrap}\n"], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoader, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-soba-loader',
                    template: `
    <ng-container *ngIf="vm$ | async as vm">
      <div
        *ngIf="vm.shown"
        class="container"
        [style.opacity]="vm.active ? 1 : 0"
        [class]="vm.containerClass"
      >
        <div>
          <div class="inner" [class]="vm.innerContainerClass">
            <div
              class="bar"
              [class]="vm.barClass"
              [style.transform]="'scaleX(' + vm.progress / 100 + ')'"
            ></div>
            <span #progressSpan class="data" [class]="vm.dataClass"></span>
          </div>
        </div>
      </div>
    </ng-container>
  `,
                    styles: [
                        // language=SCSS
                        `
      .container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #171717;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: opacity 300ms ease;
        z-index: 1000;
      }

      .inner {
        width: 100px;
        height: 3px;
        background: #272727;
        text-align: center;
      }

      .bar {
        height: 3px;
        width: 100%;
        background: white;
        transition: transform 200ms;
        transform-origin: left center;
      }

      .data {
        display: inline-block;
        position: relative;
        font-variant-numeric: tabular-nums;
        margin-top: 0.8em;
        color: #f0f0f0;
        font-size: 0.6em;
        font-family: -apple-system, BlinkMacSystemFont, 'Inter', 'Segoe UI',
          'Helvetica Neue', Helvetica, Arial, Roboto, Ubuntu, sans-serif,
          'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
        white-space: nowrap;
      }
    `,
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [NgtSobaProgress],
                }]
        }], ctorParameters: function () { return [{ type: NgtSobaProgress }]; }, propDecorators: { progressSpan: [{
                type: ViewChild,
                args: ['progressSpan']
            }] } });
class NgtSobaLoaderModule {
}
NgtSobaLoaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtSobaLoaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoaderModule, declarations: [NgtSobaLoader], imports: [CommonModule], exports: [NgtSobaLoader] });
NgtSobaLoaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoaderModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgtSobaLoaderModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtSobaLoader],
                    exports: [NgtSobaLoader],
                    imports: [CommonModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { IsObject, NgtGLTFLoaderService, NgtSobaLoader, NgtSobaLoaderModule, NgtSobaProgress, NgtTextureLoaderService };
//# sourceMappingURL=angular-three-soba-loaders.mjs.map
