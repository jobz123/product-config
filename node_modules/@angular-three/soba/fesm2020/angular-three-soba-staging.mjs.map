{"version":3,"file":"angular-three-soba-staging.mjs","sources":["../../../../packages/soba/staging/src/environment/environment.directive.ts","../../../../packages/soba/staging/src/stars/star-material.directive.ts","../../../../packages/soba/staging/src/stars/stars.component.ts","../../../../packages/soba/staging/src/angular-three-soba-staging.ts"],"sourcesContent":["import {\n  EnhancedRxState,\n  NgtLoaderService,\n  NgtStore,\n} from '@angular-three/core';\nimport { presetsObj, PresetsType } from '@angular-three/soba';\nimport { Directive, Input, NgModule, NgZone, OnInit } from '@angular/core';\nimport { selectSlice } from '@rx-angular/state';\nimport { combineLatest, map, Observable, startWith, switchMap } from 'rxjs';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three-stdlib';\n\nconst CUBEMAP_ROOT =\n  'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2';\n\ninterface NgtSobaEnvironmentState {\n  background?: boolean;\n  texture: THREE.Texture;\n  files?: string | string[];\n  path?: string;\n  scene?: THREE.Scene;\n  extensions?: (loader: THREE.Loader) => void;\n}\n\n@Directive({\n  selector: 'ngt-soba-environment',\n  exportAs: 'ngtSobaEnvironment',\n})\nexport class NgtSobaEnvironment\n  extends EnhancedRxState<NgtSobaEnvironmentState>\n  implements OnInit\n{\n  @Input() set background(v: boolean) {\n    this.set({ background: v });\n  }\n\n  @Input() set files(v: string | string[]) {\n    this.set({ files: v });\n  }\n\n  @Input() set path(v: string) {\n    this.set({ path: v });\n  }\n\n  @Input() set preset(v: PresetsType) {\n    if (!(v in presetsObj)) {\n      throw new Error(\n        'Preset must be one of: ' + Object.keys(presetsObj).join(', ')\n      );\n    }\n    this.set({ files: presetsObj[v], path: CUBEMAP_ROOT + '/hdri/' });\n  }\n\n  @Input() set scene(v: THREE.Scene) {\n    this.set({ scene: v });\n  }\n\n  @Input() set extensions(v: (loader: THREE.Loader) => void) {\n    this.set({ extensions: v });\n  }\n\n  #textureParams$ = combineLatest([\n    this.select(selectSlice(['files', 'path'])),\n    this.select('extensions').pipe(startWith(undefined)),\n  ]).pipe(\n    map(([{ path, files }, extensions]) => {\n      const loader = this.#isCubeMap ? THREE.CubeTextureLoader : RGBELoader;\n      const urls = this.#isCubeMap ? [files] : files;\n      return { loader, urls, path, extensions };\n    })\n  );\n\n  #environmentParams$ = combineLatest([\n    this.select(selectSlice(['texture', 'background'])),\n    this.select('scene').pipe(startWith(undefined)),\n  ]).pipe(\n    map(([{ texture, background }, scene]) => ({ texture, background, scene }))\n  );\n\n  constructor(\n    private loaderService: NgtLoaderService,\n    private ngZone: NgZone,\n    private store: NgtStore\n  ) {\n    super();\n    this.set({\n      background: false,\n      files: ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n      path: '',\n      scene: undefined,\n      extensions: undefined,\n    });\n  }\n\n  ngOnInit() {\n    this.hold(\n      this.#textureParams$.pipe(\n        switchMap(({ path, extensions, loader, urls }) =>\n          // @ts-ignore\n          this.loaderService.use(loader, urls, (innerLoader) => {\n            innerLoader.setPath(path!);\n            if (extensions) {\n              extensions(innerLoader);\n            }\n          })\n        )\n      ) as Observable<THREE.Texture>,\n      (textureResult) => {\n        const renderer = this.store.get('renderer');\n        const gen = new THREE.PMREMGenerator(renderer!);\n        const texture = NgtSobaEnvironment.getTexture(\n          textureResult,\n          gen,\n          this.#isCubeMap\n        ) as THREE.Texture;\n        gen.dispose();\n\n        this.set({ texture });\n      }\n    );\n\n    this.holdEffect(\n      this.#environmentParams$,\n      ({ texture, scene, background }) => {\n        const defaultScene = this.store.get('scene');\n        const oldBg = scene ? scene.background : defaultScene!.background;\n        const oldEnv = scene ? scene.environment : defaultScene!.environment;\n\n        if (scene) {\n          scene.environment = texture!;\n          if (background) scene.background = texture!;\n        } else {\n          defaultScene!.environment = texture!;\n          if (background) defaultScene!.background = texture!;\n        }\n\n        return () => {\n          if (scene) {\n            scene.environment = oldEnv;\n            scene.background = oldBg;\n          } else {\n            defaultScene!.environment = oldEnv;\n            defaultScene!.background = oldBg;\n          }\n          texture.dispose();\n        };\n      }\n    );\n  }\n\n  get #isCubeMap() {\n    return Array.isArray(this.get('files'));\n  }\n\n  private static getTexture(\n    texture: THREE.Texture | THREE.CubeTexture,\n    gen: THREE.PMREMGenerator,\n    isCubeMap: boolean\n  ) {\n    if (isCubeMap) {\n      gen.compileEquirectangularShader();\n      return gen.fromCubemap(texture as THREE.CubeTexture).texture;\n    }\n    return gen.fromEquirectangular(texture).texture;\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaEnvironment],\n  exports: [NgtSobaEnvironment],\n})\nexport class NgtSobaEnvironmentModule {}\n","import { NGT_OBJECT_3D_PROVIDER, NgtMaterial } from '@angular-three/core';\nimport { Directive, NgModule } from '@angular/core';\nimport * as THREE from 'three';\n\nexport class StarFieldMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: { time: { value: 0.0 }, fade: { value: 1.0 } },\n      vertexShader: /* glsl */ `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader: /* glsl */ `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`,\n    });\n  }\n}\n\n@Directive({\n  selector: 'ngt-soba-star-field-material',\n  exportAs: 'ngtSobaStarFieldMaterial',\n  providers: [\n    { provide: NgtMaterial, useExisting: NgtSobaStarFieldMaterial },\n    NGT_OBJECT_3D_PROVIDER,\n  ],\n})\nexport class NgtSobaStarFieldMaterial extends NgtMaterial<\n  THREE.ShaderMaterialParameters,\n  StarFieldMaterial\n> {\n  static ngAcceptInputType_parameters:\n    | THREE.ShaderMaterialParameters\n    | undefined;\n\n  materialType = StarFieldMaterial;\n}\n\n@NgModule({\n  declarations: [NgtSobaStarFieldMaterial],\n  exports: [NgtSobaStarFieldMaterial],\n})\nexport class NgtSobaStarFieldMaterialModule {}\n","import {\n  EnhancedRxState,\n  NgtRender,\n  NgtSobaExtender,\n} from '@angular-three/core';\nimport { NgtBufferAttributeModule } from '@angular-three/core/attributes';\nimport { NgtBufferGeometryModule } from '@angular-three/core/geometries';\nimport { NgtPointsModule } from '@angular-three/core/points';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Injectable,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport { selectSlice } from '@rx-angular/state';\nimport { map } from 'rxjs';\nimport * as THREE from 'three';\nimport {\n  NgtSobaStarFieldMaterialModule,\n  StarFieldMaterial,\n} from './star-material.directive';\n\nconst genStar = (r: number) => {\n  return new THREE.Vector3().setFromSpherical(\n    new THREE.Spherical(\n      r,\n      Math.acos(1 - Math.random() * 2),\n      Math.random() * 2 * Math.PI\n    )\n  );\n};\n\nexport interface NgtSobaStarsState {\n  radius: number;\n  depth: number;\n  count: number;\n  factor: number;\n  saturation: number;\n  fade: boolean;\n}\n\n@Injectable()\nexport class NgtSobaStarsStore extends EnhancedRxState<NgtSobaStarsState> {\n  readonly attributes$ = this.select(\n    selectSlice(['radius', 'depth', 'count', 'factor', 'saturation']),\n    map(({ depth, count, factor, radius, saturation }) => {\n      const positions: number[] = [];\n      const colors: number[] = [];\n      const sizes = Array.from(\n        { length: count },\n        () => (0.5 + 0.5 * Math.random()) * factor\n      );\n      const color = new THREE.Color();\n      let r = radius + depth;\n      const increment = depth / count;\n      for (let i = 0; i < count; i++) {\n        r -= increment * Math.random();\n        positions.push(...genStar(r).toArray());\n        color.setHSL(i / count, saturation, 0.9);\n        colors.push(color.r, color.g, color.b);\n      }\n      return {\n        positions: new Float32Array(positions),\n        colors: new Float32Array(colors),\n        sizes: new Float32Array(sizes),\n        fade: this.get('fade'),\n      };\n    })\n  );\n\n  constructor() {\n    super();\n    this.set({\n      radius: 100,\n      depth: 50,\n      count: 5000,\n      saturation: 0,\n      factor: 4,\n      fade: false,\n    });\n  }\n}\n\n@Component({\n  selector: 'ngt-soba-stars',\n  template: `\n    <ngt-points (ready)=\"object = $event\" (animateReady)=\"onAnimate($event)\">\n      <ng-container *ngIf=\"attributes$ | async as attributes\">\n        <ngt-buffer-geometry>\n          <ngt-buffer-attribute\n            attach=\"position\"\n            [args]=\"[attributes.positions, 3]\"\n          ></ngt-buffer-attribute>\n          <ngt-buffer-attribute\n            attach=\"color\"\n            [args]=\"[attributes.colors, 3]\"\n          ></ngt-buffer-attribute>\n          <ngt-buffer-attribute\n            attach=\"size\"\n            [args]=\"[attributes.sizes, 1]\"\n          ></ngt-buffer-attribute>\n        </ngt-buffer-geometry>\n        <ngt-soba-star-field-material\n          #sobaStarFieldMaterial=\"ngtSobaStarFieldMaterial\"\n          (ready)=\"starMaterial = $event\"\n          [parameters]=\"{\n            vertexColors: true,\n            transparent: true,\n            blending: this.blending,\n            uniforms: {\n              fade: { value: attributes.fade },\n              time: sobaStarFieldMaterial.material?.uniforms?.time || {\n                value: 0\n              }\n            }\n          }\"\n        ></ngt-soba-star-field-material>\n      </ng-container>\n    </ngt-points>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NgtSobaExtender,\n      useExisting: NgtSobaStars,\n    },\n    NgtSobaStarsStore,\n  ],\n})\nexport class NgtSobaStars extends NgtSobaExtender<THREE.Points> {\n  readonly blending = THREE.AdditiveBlending;\n\n  readonly attributes$ = this.sobaStarsStore.attributes$;\n\n  starMaterial?: StarFieldMaterial;\n\n  @Input() set radius(radius: number) {\n    this.sobaStarsStore.set({ radius });\n  }\n\n  @Input() set depth(depth: number) {\n    this.sobaStarsStore.set({ depth });\n  }\n\n  @Input() set count(count: number) {\n    this.sobaStarsStore.set({ count });\n  }\n\n  @Input() set factor(factor: number) {\n    this.sobaStarsStore.set({ factor });\n  }\n\n  @Input() set saturation(saturation: number) {\n    this.sobaStarsStore.set({ saturation });\n  }\n\n  @Input() set fade(fade: boolean) {\n    this.sobaStarsStore.set({ fade });\n  }\n\n  constructor(private sobaStarsStore: NgtSobaStarsStore) {\n    super();\n  }\n\n  onAnimate({ clock }: NgtRender) {\n    if (this.starMaterial) {\n      this.starMaterial.uniforms.time.value = clock.getElapsedTime();\n    }\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaStars],\n  exports: [NgtSobaStars],\n  imports: [\n    NgtPointsModule,\n    NgtBufferGeometryModule,\n    NgtBufferAttributeModule,\n    NgtSobaStarFieldMaterialModule,\n    CommonModule,\n  ],\n})\nexport class NgtSobaStarsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}