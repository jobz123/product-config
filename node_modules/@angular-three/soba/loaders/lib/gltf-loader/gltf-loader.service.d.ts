import { NgtLoaderService, NgtObjectMap } from '@angular-three/core';
import { Observable } from 'rxjs';
import { GLTF, GLTFLoader } from 'three-stdlib/loaders/GLTFLoader';
import * as i0 from "@angular/core";
export declare class NgtGLTFLoaderService {
    private loaderService;
    constructor(loaderService: NgtLoaderService);
    load<TInput extends string | string[]>(path: TInput, useDraco?: boolean | string, useMeshOpt?: boolean, extensions?: (loader: GLTFLoader) => void): Observable<TInput extends any[] ? (GLTF & NgtObjectMap)[] : GLTF & NgtObjectMap>;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgtGLTFLoaderService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NgtGLTFLoaderService>;
}
