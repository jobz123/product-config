{"version":3,"file":"state.umd.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../libs/state/src/lib/cdk/accumulation-observable.ts","../../../../libs/state/src/lib/cdk/side-effect-observable.ts","../../../../libs/state/src/lib/core/utils/pipe-from-array.ts","../../../../libs/state/src/lib/core/utils/guards.ts","../../../../libs/state/src/lib/core/utils/safe-pluck.ts","../../../../libs/state/src/lib/rxjs/operators/stateful.ts","../../../../libs/state/src/lib/rxjs/operators/select.ts","../../../../libs/state/src/lib/rxjs/operators/distinctUntilSomeChanged.ts","../../../../libs/state/src/lib/rxjs/operators/selectSlice.ts","../../../../libs/state/src/lib/rx-state.service.ts","../../../../libs/state/src/lib/transformation-helpers/array/insert.ts","../../../../libs/state/src/lib/transformation-helpers/_internals/valuesComparer.util.ts","../../../../libs/state/src/lib/transformation-helpers/array/remove.ts","../../../../libs/state/src/lib/transformation-helpers/array/toDictionary.ts","../../../../libs/state/src/lib/transformation-helpers/array/update.ts","../../../../libs/state/src/lib/transformation-helpers/array/extract.ts","../../../../libs/state/src/lib/transformation-helpers/array/upsert.ts","../../../../libs/state/src/lib/transformation-helpers/object/deleteProp.ts","../../../../libs/state/src/lib/transformation-helpers/object/dictionaryToArray.ts","../../../../libs/state/src/lib/transformation-helpers/object/patch.ts","../../../../libs/state/src/lib/transformation-helpers/object/setProp.ts","../../../../libs/state/src/lib/transformation-helpers/object/toggle.ts","../../../../libs/state/src/lib/transformation-helpers/object/slice.ts","../../../../libs/state/src/state.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import {\r\n  BehaviorSubject,\r\n  ConnectableObservable,\r\n  EMPTY,\r\n  merge,\r\n  Observable,\r\n  queueScheduler,\r\n  Subject,\r\n  Subscribable,\r\n  Subscription,\r\n} from 'rxjs';\r\nimport {\r\n  catchError,\r\n  distinctUntilChanged,\r\n  mergeAll,\r\n  observeOn,\r\n  publish,\r\n  publishReplay,\r\n  scan,\r\n  tap,\r\n  withLatestFrom\r\n} from 'rxjs/operators';\r\n\r\nexport type AccumulationFn = <T>(st: T, sl: Partial<T>) => T;\r\n\r\nconst defaultAccumulator: AccumulationFn = <T>(st: T, sl: Partial<T>): T => {\r\n  return { ...st, ...sl };\r\n};\r\n\r\ninterface Accumulator<T> extends Subscribable<T> {\r\n  state: T;\r\n  state$: Observable<T>;\r\n  signal$: Observable<T>;\r\n  subscribe: () => Subscription;\r\n  nextSlice: (stateSlice: Partial<T>) => void;\r\n  nextSliceObservable: (state$: Observable<Partial<T>>) => void;\r\n  nextAccumulator: (fn: AccumulationFn) => void;\r\n}\r\n\r\nexport function createAccumulationObservable<T extends object>(\r\n  stateObservables = new Subject<Observable<Partial<T>>>(),\r\n  stateSlices = new Subject<Partial<T>>(),\r\n  accumulatorObservable = new BehaviorSubject(defaultAccumulator)\r\n): Accumulator<T> {\r\n  const signal$ = merge(\r\n    stateObservables.pipe(\r\n      distinctUntilChanged(),\r\n      mergeAll(),\r\n      observeOn(queueScheduler)\r\n    ),\r\n    stateSlices.pipe(observeOn(queueScheduler))\r\n  ).pipe(\r\n    withLatestFrom(accumulatorObservable.pipe(observeOn(queueScheduler))),\r\n    scan(\r\n      (state, [slice, stateAccumulator]) => stateAccumulator(state, slice),\r\n      {} as T\r\n    ),\r\n    tap(\r\n      (newState) => (compositionObservable.state = newState),\r\n      (error) => console.error(error)\r\n    ),\r\n    // @Notice We catch the error here as it get lost in between `publish` and `publishReplay`. We return empty to\r\n    catchError((e) => EMPTY),\r\n    publish()\r\n  );\r\n  const state$: Observable<T> = signal$.pipe(publishReplay(1));\r\n  const compositionObservable: Accumulator<T> = {\r\n    state: {} as T,\r\n    signal$,\r\n    state$,\r\n    nextSlice,\r\n    nextSliceObservable,\r\n    nextAccumulator,\r\n    subscribe\r\n  };\r\n\r\n  // ======\r\n\r\n  return compositionObservable;\r\n\r\n  // ======\r\n\r\n  function nextAccumulator(accumulatorFn: AccumulationFn): void {\r\n    accumulatorObservable.next(accumulatorFn);\r\n  }\r\n\r\n  function nextSlice(stateSlice: Partial<T>): void {\r\n    stateSlices.next(stateSlice);\r\n  }\r\n\r\n  function nextSliceObservable(stateObservable: Observable<Partial<T>>): void {\r\n    stateObservables.next(stateObservable);\r\n  }\r\n\r\n  function subscribe(): Subscription {\r\n    const sub = (compositionObservable.signal$ as ConnectableObservable<T>).connect();\r\n    sub.add(\r\n      (compositionObservable.state$ as ConnectableObservable<T>).connect()\r\n    );\r\n    sub.add(() => {\r\n      accumulatorObservable.complete();\r\n      stateObservables.complete();\r\n      stateSlices.complete();\r\n    });\r\n    return sub;\r\n  }\r\n}\r\n","import { merge, Observable, queueScheduler, Subject, Subscribable, Subscription, Observer } from 'rxjs';\r\nimport { mergeAll, observeOn } from 'rxjs/operators';\r\n\r\nexport function createSideEffectObservable<T>(\r\n  stateObservables = new Subject<Observable<T>>()\r\n): {\r\n  effects$: Observable<T>;\r\n  nextEffectObservable: (effect$: Observable<T>) => void;\r\n  subscribe: () => Subscription;\r\n} & Subscribable<T> {\r\n  const effects$: Observable<T> = merge(\r\n    stateObservables.pipe(mergeAll(), observeOn(queueScheduler))\r\n  );\r\n\r\n  function nextEffectObservable(effect$: Observable<T>): void {\r\n    stateObservables.next(effect$);\r\n  }\r\n\r\n  function subscribe(): Subscription {\r\n    return effects$.subscribe();\r\n  }\r\n\r\n  return {\r\n    effects$,\r\n    nextEffectObservable,\r\n    subscribe\r\n  };\r\n}\r\n","import { noop, UnaryFunction } from 'rxjs';\r\n\r\nexport function pipeFromArray<T, R>(\r\n  fns: Array<UnaryFunction<T, R>>\r\n): UnaryFunction<T, R> {\r\n  if (!fns) {\r\n    return noop as UnaryFunction<any, any>;\r\n  }\r\n\r\n  if (fns.length === 1) {\r\n    return fns[0];\r\n  }\r\n\r\n  return function piped(input: T): R {\r\n    return fns.reduce(\r\n      (prev: any, fn: UnaryFunction<T, R>) => fn(prev),\r\n      input as any\r\n    );\r\n  };\r\n}\r\n","import { OperatorFunction } from 'rxjs';\r\n\r\nexport function isPromiseGuard<T>(value: unknown): value is Promise<T> {\r\n  return (\r\n    !!value &&\r\n    typeof (<any>value).subscribe !== 'function' &&\r\n    typeof (value as any).then === 'function'\r\n  );\r\n}\r\n\r\nexport function isOperateFnArrayGuard<T, R = T>(\r\n  op: any[]\r\n): op is OperatorFunction<T, R>[] {\r\n  if (!Array.isArray(op)) {\r\n    return false;\r\n  }\r\n  return op.length > 0 && op.every((i: any) => typeof i === 'function');\r\n}\r\n\r\nexport function isStringArrayGuard(op: any[]): op is string[] {\r\n  if (!Array.isArray(op)) {\r\n    return false;\r\n  }\r\n  return op.length > 0 && op.every((i: any) => typeof i === 'string');\r\n}\r\n\r\nexport function isIterableGuard<T>(obj: unknown): obj is Array<T> {\r\n  if (obj === null || obj === undefined) {\r\n    return false;\r\n  }\r\n  return typeof (obj as any)[Symbol.iterator] === 'function';\r\n}\r\n\r\nexport function isKeyOf<O>(k: unknown): k is keyof O {\r\n  return (\r\n    !!k &&\r\n    (typeof k === 'string' || typeof k === 'symbol' || typeof k === 'number')\r\n  );\r\n}\r\n\r\nexport function isObjectGuard(obj: unknown): obj is object {\r\n  return !!obj && typeof obj === 'object' && !Array.isArray(obj);\r\n}\r\n\r\nexport function isDefined(val: unknown): val is NonNullable<any> {\r\n  return val !== null && val !== undefined;\r\n}\r\n","import { isDefined, isKeyOf, isObjectGuard } from './guards';\r\n\r\nexport function safePluck<T extends object, K1 extends keyof T>(\r\n  stateObject: T,\r\n  keys: K1 | [K1]\r\n): T[K1];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1]>(stateObject: T, keys: [K1, K2]): T[K1][K2];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2]>(stateObject: T, keys: [K1, K2, K3]): T[K1][K2][K3];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3]>(stateObject: T, keys: [K1, K2, K3, K4]): T[K1][K2][K3][K4];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4]>(stateObject: T, keys: [K1, K2, K3, K4, K5]): T[K1][K2][K3][K4][K5];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4],\r\n  K6 extends keyof T[K1][K2][K3][K4][K5]>(\r\n  stateObject: T,\r\n  keys:\r\n    | [K1]\r\n    | [K1, K2]\r\n    | [K1, K2, K3]\r\n    | [K1, K2, K3, K4]\r\n    | [K1, K2, K3, K4, K5]\r\n    | [K1, K2, K3, K4, K5, K6]\r\n): T[K1][K2][K3][K4][K5][K6];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4],\r\n  K6 extends keyof T[K1][K2][K3][K4][K5]>(\r\n  stateObject: T,\r\n  keys:\r\n    | [K1]\r\n    | [K1, K2]\r\n    | [K1, K2, K3]\r\n    | [K1, K2, K3, K4]\r\n    | [K1, K2, K3, K4, K5]\r\n    | [K1, K2, K3, K4, K5, K6]\r\n):\r\n  | T[K1]\r\n  | T[K1][K2]\r\n  | T[K1][K2][K3]\r\n  | T[K1][K2][K3][K4]\r\n  | T[K1][K2][K3][K4][K5]\r\n  | T[K1][K2][K3][K4][K5][K6]\r\n  | null\r\n  | undefined {\r\n  // needed to match null and undefined conventions of RxAngular core components\r\n  // safePluck(null) -> return null\r\n  // safePluck(undefined) -> return undefined\r\n  // safePluck(obj, ['wrongKey']) -> return undefined\r\n  // safePluck(obj, ['correctKey']) -> return value of key\r\n  // safePluck(obj, '') -> return undefined\r\n  // safePluck(obj, null) -> return undefined\r\n  if (!isDefined(stateObject)) {\r\n    return stateObject;\r\n  }\r\n  if (!isDefined(keys)) {\r\n    return undefined;\r\n  }\r\n  // sanitize keys -> keep only valid keys (string, number, symbol)\r\n  const keysArr = (Array.isArray(keys) ? keys : [keys]).filter(k =>\r\n    isKeyOf<T>(k)\r\n  );\r\n  if (\r\n    keysArr.length === 0 ||\r\n    !isObjectGuard(stateObject) ||\r\n    Object.keys(stateObject).length === 0\r\n  ) {\r\n    return undefined;\r\n  }\r\n  let prop = stateObject[keysArr.shift() as K1];\r\n\r\n  keysArr.forEach(key => {\r\n    if (isObjectGuard(prop) && isKeyOf(key)) {\r\n      prop = prop[key];\r\n    }\r\n  });\r\n  return prop;\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, OperatorFunction } from 'rxjs';\r\nimport { distinctUntilChanged, filter, shareReplay } from 'rxjs/operators';\r\nimport { isOperateFnArrayGuard, pipeFromArray } from '../../core/utils';\r\n\r\n/**\r\n * @description\r\n *\r\n * As the name `stateful` implies this operator is useful when you process an Observable which maintains state.\r\n *\r\n * Maintaining state as an `Observable` source comes with a handful of repetitive as well as use case specific tasks.\r\n *\r\n * It acts like the Observables `pipe` method.\r\n * It accepts RxJS operators and composes them like `Observable#pipe` and the standalone `pipe` method.\r\n *\r\n * Furthermore, it takes care of the above mentioned repetitive tasks as listed below.\r\n *\r\n * You will always (aka repetitive) want to ensure that:\r\n * - only distinct state changes are emitted\r\n * - only defined values are emitted (filter out undefined, which ensures lazy state)\r\n * - share and replay custom operations for multiple subscribers (saves performance)\r\n *\r\n * You will sometimes (aka situational) need:\r\n * - a subset of the state (derivations)\r\n * - compose the state with other Observables or change the Observables behaviour\r\n *\r\n *\r\n * @example\r\n * import { Observable } from 'rxjs';\r\n * import { map } from 'rxjs/operators';\r\n * import { stateful } from 'rx-angular/state';\r\n *\r\n * const state$: Observable<{ name: string; items: string[] }>;\r\n * const derivation$ = state$.pipe(\r\n *   stateful(\r\n *     map(state => state.list.length),\r\n *     filter(length => length > 3)\r\n *   )\r\n * );\r\n *\r\n * @param {OperatorFunction<T, A>} op - one or multiple passed operator comma separated\r\n * @return OperatorFunction<T, A>\r\n *\r\n * @docsPage stateful\r\n * @docsCategory operators\r\n */\r\nexport function stateful<T>(): MonoTypeOperatorFunction<T>;\r\n/**\r\n * @internal\r\n */\r\nexport function stateful<T, A>(\r\n  op: OperatorFunction<T, A>\r\n): OperatorFunction<T, A>;\r\n/**\r\n * @internal\r\n */\r\nexport function stateful<T, A, B>(\r\n  op1: OperatorFunction<T, A>,\r\n  op2: OperatorFunction<A, B>\r\n): OperatorFunction<T, B>;\r\n/**\r\n * @internal\r\n */\r\nexport function stateful<T, A, B, C>(\r\n  op1: OperatorFunction<T, A>,\r\n  op2: OperatorFunction<A, B>,\r\n  op3: OperatorFunction<B, C>\r\n): OperatorFunction<T, C>;\r\n/**\r\n * @internal\r\n */\r\nexport function stateful<T, A, B, C, D>(\r\n  op1: OperatorFunction<T, A>,\r\n  op2: OperatorFunction<A, B>,\r\n  op3: OperatorFunction<B, C>,\r\n  op4: OperatorFunction<C, D>\r\n): OperatorFunction<T, D>;\r\n/**\r\n * @internal\r\n */\r\nexport function stateful<T, A, B, C, D, E>(\r\n  op1: OperatorFunction<T, A>,\r\n  op2: OperatorFunction<A, B>,\r\n  op3: OperatorFunction<B, C>,\r\n  op4: OperatorFunction<C, D>,\r\n  op5: OperatorFunction<D, E>\r\n): OperatorFunction<T, E>;\r\n/**\r\n * @description\r\n *\r\n * As it acts like the Observables `pipe` method, it accepts one or many RxJS operators as params.\r\n *\r\n * @example\r\n * import { Observable } from 'rxjs';\r\n * import { map } from 'rxjs/operators';\r\n * import { stateful } from 'rx-angular/state';\r\n *\r\n * const state$: Observable<{ name: string; items: string[] }>;\r\n * const derivation$ = state$.pipe(\r\n *   stateful(\r\n *     map(state => state.list.length),\r\n *     filter(length => length > 3)\r\n *   )\r\n * );\r\n *\r\n * @param {OperatorFunction<T, A>} op - one or multiple passed operator comma separated\r\n *\r\n * @docsPage stateful\r\n * @docsCategory operators\r\n */\r\nexport function stateful<T, R>(\r\n  ...optionalDerive: OperatorFunction<T, R>[]\r\n): OperatorFunction<T, T | R> {\r\n  return (s: Observable<T>): Observable<T | R> => {\r\n    return s.pipe(\r\n      // distinct same base-state objects (e.g. a default emission of default switch cases, incorrect mutable handling\r\n      // of data) @TODO evaluate benefits vs. overhead\r\n      distinctUntilChanged(),\r\n      // CUSTOM LOGIC HERE\r\n      (o: Observable<T>): Observable<T | R> => {\r\n        if (isOperateFnArrayGuard(optionalDerive)) {\r\n          return o.pipe(pipeFromArray(optionalDerive));\r\n        }\r\n        return o;\r\n      },\r\n      // initial emissions, undefined is no base-state, pollution with skip(1)\r\n      filter((v) => v !== undefined),\r\n      // distinct same derivation value\r\n      distinctUntilChanged(),\r\n      // reuse custom operations result for multiple subscribers and reemit the last calculated value.\r\n      shareReplay({ bufferSize: 1, refCount: true })\r\n    );\r\n  };\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, OperatorFunction } from 'rxjs';\r\nimport { pluck } from 'rxjs/operators';\r\nimport { isOperateFnArrayGuard, isStringArrayGuard, pipeFromArray } from '../../core/utils';\r\nimport { stateful } from './stateful';\r\n\r\n/**\r\n * @description\r\n * returns the state as shared, replayed and distinct `Observable<T>`. This way you don't have to think about late\r\n * subscribers, multiple subscribers or multiple emissions of the same value.\r\n *\r\n * @example\r\n * const state$ = state.pipe(select());\r\n * state$.subscribe(state => doStuff(state));\r\n *\r\n * @returns Observable<T>\r\n */\r\n\r\nexport function select<T>(): MonoTypeOperatorFunction<T>;\r\n\r\n/**\r\n * @description\r\n * returns the state as cached and distinct `Observable<A>`. Accepts arbitrary\r\n * [rxjs operators](https://rxjs-dev.firebaseapp.com/guide/operators) to enrich the selection with reactive composition.\r\n *\r\n * @example\r\n * const profilePicture$ = state.pipe(\r\n *   select(\r\n *    pluck('profilePicture'),\r\n *    switchMap(profilePicture => mapImageAsync(profilePicture))\r\n *   )\r\n * );\r\n * @param  { OperatorFunction<T, A> } op\r\n * @returns Observable<A>\r\n *\r\n * @docsPage select\r\n * @docsCategory operators\r\n */\r\nexport function select<T, A>(\r\n  op: OperatorFunction<T, A>\r\n): OperatorFunction<T, A>;\r\n/**\r\n * @internal\r\n */\r\nexport function select<T, A, B>(\r\n  op1: OperatorFunction<T, A>,\r\n  op2: OperatorFunction<A, B>\r\n): OperatorFunction<T, B>;\r\n/**\r\n * @internal\r\n */\r\nexport function select<T, A, B, C>(\r\n  op1: OperatorFunction<T, A>,\r\n  op2: OperatorFunction<A, B>,\r\n  op3: OperatorFunction<B, C>\r\n): OperatorFunction<T, C>;\r\n/**\r\n * @internal\r\n */\r\nexport function select<T, A, B, C, D>(\r\n  op1: OperatorFunction<T, A>,\r\n  op2: OperatorFunction<A, B>,\r\n  op3: OperatorFunction<B, C>,\r\n  op4: OperatorFunction<C, D>\r\n): OperatorFunction<T, D>;\r\n/**\r\n * @internal\r\n */\r\nexport function select<T, A, B, C, D, E>(\r\n  op1: OperatorFunction<T, A>,\r\n  op2: OperatorFunction<A, B>,\r\n  op3: OperatorFunction<B, C>,\r\n  op4: OperatorFunction<C, D>,\r\n  op5: OperatorFunction<D, E>\r\n): OperatorFunction<T, E>;\r\n\r\n/**\r\n * @description\r\n * Access a single property of the state by providing keys.\r\n * Returns a single property of the state as cached and distinct `Observable<T[K1]>`.\r\n *\r\n * @example\r\n *  // Access a single property\r\n * const bar$ = state$.pipe(select('bar'));\r\n *\r\n * // Access a nested property\r\n * const foo$ = state$.pipe(select('bar', 'foo'));\r\n *\r\n * @return Observable<T[K1]>\r\n */\r\nexport function select<T, K1 extends keyof T>(\r\n  k1: K1\r\n): OperatorFunction<T, T[K1]>;\r\n/**\r\n * @internal\r\n */\r\nexport function select<T, K1 extends keyof T, K2 extends keyof T[K1]>(\r\n  k1: K1,\r\n  k2: K2\r\n): OperatorFunction<T, T[K1][K2]>;\r\n/**\r\n * @internal\r\n */\r\nexport function select<T,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2]>(k1: K1, k2: K2, k3: K3): OperatorFunction<T, T[K1][K2][K3]>;\r\n/**\r\n * @internal\r\n */\r\nexport function select<T,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3]>(k1: K1, k2: K2, k3: K3, k4: K4): OperatorFunction<T, T[K1][K2][K3][K4]>;\r\n/**\r\n * @internal\r\n */\r\nexport function select<T,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4]>(\r\n  k1: K1,\r\n  k2: K2,\r\n  k3: K3,\r\n  k4: K4,\r\n  k5: K5\r\n): OperatorFunction<T, T[K1][K2][K3][K4][K5]>;\r\n/**\r\n * @internal\r\n */\r\nexport function select<T,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4],\r\n  K6 extends keyof T[K1][K2][K3][K4][K5]>(\r\n  k1: K1,\r\n  k2: K2,\r\n  k3: K3,\r\n  k4: K4,\r\n  k5: K5,\r\n  k6: K6\r\n): OperatorFunction<T, T[K1][K2][K3][K4][K5][K6]>;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function select<T>(\r\n  ...opOrMapFn: OperatorFunction<T, any>[] | string[]\r\n): OperatorFunction<T, any> {\r\n  return (state$: Observable<T>) => {\r\n    if (!opOrMapFn || opOrMapFn.length === 0) {\r\n      return state$.pipe(stateful());\r\n    } else if (isStringArrayGuard(opOrMapFn)) {\r\n      return state$.pipe(stateful(pluck(...opOrMapFn)));\r\n    } else if (isOperateFnArrayGuard(opOrMapFn)) {\r\n      return state$.pipe(stateful(pipeFromArray(opOrMapFn)));\r\n    } else {\r\n      throw new Error('wrong params passed to select');\r\n    }\r\n  };\r\n}\r\n","import { MonoTypeOperatorFunction } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { CompareFn, KeyCompareMap } from '../interfaces';\r\nimport { safePluck } from '../../core/utils/safe-pluck';\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction defaultCompare<T>(oldVal: T, newVal: T): boolean {\r\n  return oldVal === newVal;\r\n}\r\n\r\n/**\r\n * @description\r\n *\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from\r\n * the previous item. Comparison will be done for each set key in the `keys` array.\r\n *\r\n * You can fine grain your distinct checks by providing a `KeyCompareMap` with those keys you want to compute\r\n * explicitly different\r\n *\r\n * The name `distinctUntilSomeChanged` was picked since it internally iterates over the `keys` and utilizes the\r\n * [some](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/some) method in order to\r\n * compute if values are distinct or not.\r\n *\r\n * @example\r\n *\r\n * import { of } from 'rxjs';\r\n * import { distinctUntilSomeChanged } from 'rx-angular/state';\r\n *\r\n * interface Person {\r\n *    age: number;\r\n *    name: string;\r\n * }\r\n *\r\n * of(\r\n *   { age: 4, name: 'Hans'},\r\n *   { age: 7, name: 'Sophie'},\r\n *   { age: 5, name: 'Han Solo'},\r\n *   { age: 5, name: 'HanSophie'},\r\n * ).pipe(\r\n *   distinctUntilSomeChanged(['age', 'name']),\r\n * )\r\n * .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Hans'}\r\n * // { age: 7, name: 'Sophie'}\r\n * // { age: 5, name: 'Han Solo'}\r\n * // { age: 5, name: 'HanSophie'}\r\n *\r\n * @example\r\n * // An example with `KeyCompareMap`\r\n * import { of } from 'rxjs';\r\n * import { distinctUntilSomeChanged } from 'rxjs/operators';\r\n *\r\n * interface Person {\r\n *     age: number;\r\n *     name: string;\r\n *  }\r\n * const customComparison: KeyCompareMap<Person> = {\r\n *   name: (oldName, newName) => oldName.substring(0, 2) === newName.substring(0, 2)\r\n * };\r\n *\r\n * of(\r\n *     { age: 4, name: 'Hans'},\r\n *     { age: 7, name: 'Sophie'},\r\n *     { age: 5, name: 'Han Solo'},\r\n *     { age: 5, name: 'HanSophie'},\r\n *   ).pipe(\r\n *     distinctUntilSomeChanged(['age', 'name'], customComparison),\r\n *   )\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Hans' }\r\n * // { age: 7, name: 'Sophie' }\r\n * // { age: 5, name: 'Han Solo' }\r\n *\r\n * @param {K[]} keys String key for object property lookup on each item.\r\n * @param {KeyCompareMap<T>} [compare] Optional KeyCompareMap to explicitly define comparisons for some of the keys\r\n * @docsPage distinctUntilSomeChanged\r\n * @docsCategory operators\r\n */\r\nexport function distinctUntilSomeChanged<T extends object, K extends keyof T>(\r\n  keys: K[],\r\n  keyCompareMap?: KeyCompareMap<T>\r\n): MonoTypeOperatorFunction<T> {\r\n  // default compare function applying === to every key\r\n  let distinctCompare: CompareFn<T> = (oldState, newState) =>\r\n    keys.some(\r\n      (key) =>\r\n        !defaultCompare(safePluck(oldState, [key]), safePluck(newState, [key]))\r\n    );\r\n\r\n  // generate compare function respecting every case of provided keyCompareMap\r\n  if (keyCompareMap !== undefined) {\r\n    const compare = (key: K) => {\r\n      return keyCompareMap.hasOwnProperty(key) &&\r\n      keyCompareMap[key] !== undefined\r\n        ? (keyCompareMap[key] as CompareFn<T[K]>)\r\n        : defaultCompare;\r\n    };\r\n    distinctCompare = (oldState, newState) => {\r\n      return keys.some(\r\n        (key) =>\r\n          !compare(key)(safePluck(oldState, [key]), safePluck(newState, [key]))\r\n      );\r\n    };\r\n  }\r\n  return distinctUntilChanged((oldV, newV) => !distinctCompare(oldV, newV));\r\n}\r\n","import { Observable, OperatorFunction } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { KeyCompareMap, PickSlice } from '../interfaces';\r\nimport { distinctUntilSomeChanged } from './distinctUntilSomeChanged';\r\n\r\n/**\r\n * @description\r\n *\r\n * Returns an Observable that emits only the provided `keys` emitted by the source Observable. Each key will get\r\n * filtered to only emit _defined_ values as well as checked for distinct emissions.\r\n * Comparison will be done for each set key in the `keys` array.\r\n *\r\n * `selectSlice` will only emit _valid_ selections. A selection is _valid_ if every\r\n * selected key exists and is defined in the source Observable. This ensures that the `selectSlice`\r\n * operator will always return a complete slice with all values defined.\r\n *\r\n * You can fine grain your distinct checks by providing a `KeyCompareMap` with those keys you want to compute\r\n * explicitly different\r\n *\r\n * @example\r\n *\r\n * // An example with a custom comparison applied to each key\r\n * import { of } from 'rxjs';\r\n * import { selectSlice } from 'rx-angular/state';\r\n *\r\n *\r\n * const state$: Observable<MyState> = of(\r\n *  { title: 'myTitle', panelOpen: true},\r\n *  { title: 'myTitle2', panelOpen: true},\r\n *  { title: 'newTitle', panelOpen: true},\r\n *  { title: 'newTitle', panelOpen: false}\r\n * )\r\n * .pipe(\r\n *     selectSlice(['title', 'panelOpen']),\r\n *   )\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * //  { title: 'myTitle', panelOpen: true },\r\n * //  { title: 'myTitle2', panelOpen: true },\r\n * //  { title: 'newTitle', panelOpen: true },\r\n * //  { title: 'newTitle', panelOpen: false }\r\n *\r\n * @example\r\n *\r\n * import { of, Observable } from 'rxjs';\r\n * import { tap } from 'rxjs/operators';\r\n * import { selectSlice } from 'rx-angular/state';\r\n *\r\n * interface MyState {\r\n *    title: string;\r\n *    items: string[];\r\n *    panelOpen: boolean;\r\n * }\r\n * // Select items and title.\r\n * // apply custom compare logic for the items array\r\n * const customComparison: KeyCompareMap<MyState> = {\r\n *   items: (oldItems, newItems) => compareItems(oldItems, newItems)\r\n * };\r\n * const state$: Observable<MyState> = of(\r\n * { title: 'myTitle', items: ['foo', 'bar'], panelOpen: true },\r\n * { title: 'myTitle', items: ['foo', 'bar'], panelOpen: false },\r\n * { title: 'nextTitle', items: ['foo', 'baR'], panelOpen: true },\r\n * { title: 'nextTitle', items: ['fooRz', 'boo'], panelOpen: false },\r\n * );\r\n * const slice$ = state$.pipe(selectSlice(['title', 'items'], customComparison), tap(console.log)).subscribe();\r\n *\r\n * // displays:\r\n * // { title: 'myTitle', items: ['foo', 'bar'] }\r\n * // { title: 'nextTitle', items: ['foo', 'baR'] }\r\n * // { title: 'nextTitle', items: ['fooRz', 'boo'] }\r\n *\r\n * @param {(K)[]} keys - the array of keys which should be selected\r\n * @param {KeyCompareMap<{ [P in K]: T[P] }>} [keyCompareMap] Optional KeyCompareMap to provide custom compare logic\r\n * for some the keys\r\n * @docsPage selectSlice\r\n * @docsCategory operators\r\n */\r\nexport function selectSlice<T extends object, K extends keyof T>(\r\n  keys: K[],\r\n  keyCompareMap?: KeyCompareMap<{ [P in K]: T[P] }>\r\n): OperatorFunction<T, PickSlice<T, K>> {\r\n  return (o$: Observable<T>): Observable<PickSlice<T, K>> =>\r\n    o$.pipe(\r\n      filter((state) => state !== undefined),\r\n      map((state) => {\r\n        // forward null\r\n        if (state === null) {\r\n          return null;\r\n        }\r\n        // an array of all keys which exist and are _defined_ in the state object\r\n        const definedKeys = keys\r\n          // filter out undefined properties e. g. {}, { str: undefined }\r\n          .filter((k) => state.hasOwnProperty(k) && state[k] !== undefined);\r\n\r\n        // we want to ensure to only emit _valid_ selections\r\n        // a selection is _valid_ if every selected key exists and has a value:\r\n\r\n        // {} => selectSlice(['foo']) => no emission\r\n        // {str: 'test'} => selectSlice([]) => no emission\r\n        // {str: 'test'} => selectSlice(['notPresent']) => no emission\r\n        // {str: 'test'} => state.select(selectSlice([])) => no emission\r\n        // {str: 'test'} => state.select(selectSlice(['notPresent'])) => no emission\r\n        // {str: undefined} => state.select(selectSlice(['str'])) => no emission\r\n        // {str: 'test', foo: undefined } => state.select(selectSlice(['foo'])) => no emission\r\n        if (definedKeys.length < keys.length) {\r\n          return undefined;\r\n        }\r\n\r\n        // create the selected slice\r\n        return definedKeys\r\n          .reduce((vm, key) => {\r\n            vm[key] = state[key];\r\n            return vm;\r\n          }, {} as PickSlice<T, K>);\r\n      }),\r\n      filter((v) => v !== undefined),\r\n      distinctUntilSomeChanged(keys, keyCompareMap)\r\n    );\r\n}\r\n\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { EMPTY, isObservable, Observable, OperatorFunction, Subscribable, Subscription, Unsubscribable } from 'rxjs';\r\nimport { catchError, map, pluck, tap } from 'rxjs/operators';\r\nimport { isKeyOf, isOperateFnArrayGuard, isStringArrayGuard, pipeFromArray, safePluck } from './core';\r\nimport { AccumulationFn, createAccumulationObservable, createSideEffectObservable } from './cdk';\r\nimport { stateful } from './rxjs/operators';\r\n\r\ntype ProjectStateFn<T> = (oldState: T) => Partial<T>;\r\ntype ProjectValueFn<T, K extends keyof T> = (oldState: T) => T[K];\r\n\r\ntype ProjectStateReducer<T, V> = (oldState: T, value: V) => Partial<T>;\r\n\r\ntype ProjectValueReducer<T, K extends keyof T, V> = (\r\n  oldState: T,\r\n  value: V\r\n) => T[K];\r\n\r\n/**\r\n * @description\r\n * RxState is a light-weight reactive state management service for managing local state in angular.\r\n *\r\n * @example\r\n * Component({\r\n *   selector: 'app-stateful',\r\n *   template: `<div>{{ state$ | async | json }}</div>`,\r\n *   providers: [RxState]\r\n * })\r\n * export class StatefulComponent {\r\n *   readonly state$ = this.state.select();\r\n *\r\n *   constructor(private state: RxState<{ foo: string }>) {}\r\n * }\r\n *\r\n * @docsCategory RxState\r\n * @docsPage RxState\r\n */\r\n@Injectable()\r\nexport class RxState<T extends object> implements OnDestroy, Subscribable<T> {\r\n  private subscription = new Subscription();\r\n\r\n  private accumulator = createAccumulationObservable<T>();\r\n  private effectObservable = createSideEffectObservable();\r\n\r\n  /**\r\n   * @description\r\n   * The unmodified state exposed as `Observable<T>`. It is not shared, distinct or gets replayed.\r\n   * Use the `$` property if you want to read the state without having applied {@link stateful} to it.\r\n   */\r\n  readonly $: Observable<T> = this.accumulator.signal$;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor() {\r\n    this.subscription.add(this.subscribe());\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   *\r\n   * Allows to customize state accumulation function.\r\n   * This can be helpful to implement deep updates and tackle other immutability problems in a custom way.\r\n   * @example\r\n   *\r\n   * ```typescript\r\n   * const myAccumulator = (state: MyState, slice: Partial<MyState>) => deepCopy(state, slice);\r\n   *\r\n   * this.state.setAccumulator(myAccumulator);\r\n   * ```\r\n   */\r\n  setAccumulator(accumulatorFn: AccumulationFn): void {\r\n    this.accumulator.nextAccumulator(accumulatorFn);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Read from the state in imperative manner. Returns the state object in its current state.\r\n   *\r\n   * @example\r\n   * const { disabled } = state.get();\r\n   * if (!disabled) {\r\n   *   doStuff();\r\n   * }\r\n   *\r\n   * @return T\r\n   */\r\n  get(): T;\r\n\r\n  /**\r\n   * @description\r\n   * Read from the state in imperative manner by providing keys as parameters.\r\n   * Returns the part of state object.\r\n   *\r\n   * @example\r\n   * // Access a single property\r\n   *\r\n   * const bar = state.get('bar');\r\n   *\r\n   * // Access a nested property\r\n   *\r\n   * const foo = state.get('bar', 'foo');\r\n   *\r\n   * @return T | T[K1] | T[K1][K2]\r\n   */\r\n\r\n  get<K1 extends keyof T>(k1: K1): T[K1];\r\n  /** @internal **/\r\n  get<K1 extends keyof T, K2 extends keyof T[K1]>(k1: K1, k2: K2): T[K1][K2];\r\n  /** @internal **/\r\n  get<K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(\r\n    k1: K1,\r\n    k2: K2,\r\n    k3: K3\r\n  ): T[K1][K2][K3];\r\n  /** @internal **/\r\n  get<K1 extends keyof T,\r\n    K2 extends keyof T[K1],\r\n    K3 extends keyof T[K1][K2],\r\n    K4 extends keyof T[K1][K2][K3]>(k1: K1, k2: K2, k3: K3, k4: K4): T[K1][K2][K3][K4];\r\n  /** @internal **/\r\n  get<K1 extends keyof T,\r\n    K2 extends keyof T[K1],\r\n    K3 extends keyof T[K1][K2],\r\n    K4 extends keyof T[K1][K2][K3],\r\n    K5 extends keyof T[K1][K2][K3][K4]>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5): T[K1][K2][K3][K4][K5];\r\n  /** @internal **/\r\n  get<K1 extends keyof T,\r\n    K2 extends keyof T[K1],\r\n    K3 extends keyof T[K1][K2],\r\n    K4 extends keyof T[K1][K2][K3],\r\n    K5 extends keyof T[K1][K2][K3][K4],\r\n    K6 extends keyof T[K1][K2][K3][K4][K5]>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5, k6: K6): T[K1][K2][K3][K4][K5][K6];\r\n  /** @internal **/\r\n  get<K1 extends keyof T,\r\n    K2 extends keyof T[K1],\r\n    K3 extends keyof T[K1][K2],\r\n    K4 extends keyof T[K1][K2][K3],\r\n    K5 extends keyof T[K1][K2][K3][K4],\r\n    K6 extends keyof T[K1][K2][K3][K4][K5]>(\r\n    ...keys:\r\n      | [K1]\r\n      | [K1, K2]\r\n      | [K1, K2, K3]\r\n      | [K1, K2, K3, K4]\r\n      | [K1, K2, K3, K4, K5]\r\n      | [K1, K2, K3, K4, K5, K6]\r\n  ):\r\n    | T\r\n    | T[K1]\r\n    | T[K1][K2]\r\n    | T[K1][K2][K3]\r\n    | T[K1][K2][K3][K4]\r\n    | T[K1][K2][K3][K4][K5]\r\n    | T[K1][K2][K3][K4][K5][K6] {\r\n    const hasStateAnyKeys = Object.keys(this.accumulator.state).length > 0;\r\n    if (!!keys && keys.length) {\r\n      return safePluck(this.accumulator.state, keys);\r\n    } else {\r\n      return hasStateAnyKeys ?\r\n             this.accumulator.state :\r\n              undefined as unknown as T;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Manipulate one or many properties of the state by providing a `Partial<T>` state or a `ProjectionFunction<T>`.\r\n   *\r\n   * @example\r\n   * // Update one or many properties of the state by providing a `Partial<T>`\r\n   *\r\n   * const partialState = {\r\n   *   foo: 'bar',\r\n   *   bar: 5\r\n   * };\r\n   * state.set(partialState);\r\n   *\r\n   * // Update one or many properties of the state by providing a `ProjectionFunction<T>`\r\n   *\r\n   * const reduceFn = oldState => ({\r\n   *   bar: oldState.bar + 5\r\n   * });\r\n   * state.set(reduceFn);\r\n   *\r\n   * @param {Partial<T>|ProjectStateFn<T>} stateOrProjectState\r\n   * @return void\r\n   */\r\n  set(stateOrProjectState: Partial<T> | ProjectStateFn<T>): void;\r\n\r\n  /**\r\n   * @description\r\n   * Manipulate a single property of the state by the property name and a `ProjectionFunction<T>`.\r\n   *\r\n   * @example\r\n   * const reduceFn = oldState => oldState.bar + 5;\r\n   * state.set('bar', reduceFn);\r\n   *\r\n   * @param {K} key\r\n   * @param {ProjectValueFn<T, K>} projectSlice\r\n   * @return void\r\n   */\r\n  set<K extends keyof T, O>(key: K, projectSlice: ProjectValueFn<T, K>): void;\r\n  /**\r\n   * @internal\r\n   */\r\n  set<K extends keyof T>(\r\n    keyOrStateOrProjectState: Partial<T> | ProjectStateFn<T> | K,\r\n    stateOrSliceProjectFn?: ProjectValueFn<T, K>\r\n  ): void {\r\n    if (\r\n      typeof keyOrStateOrProjectState === 'object' &&\r\n      stateOrSliceProjectFn === undefined\r\n    ) {\r\n      this.accumulator.nextSlice(keyOrStateOrProjectState);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      typeof keyOrStateOrProjectState === 'function' &&\r\n      stateOrSliceProjectFn === undefined\r\n    ) {\r\n      this.accumulator.nextSlice(\r\n        keyOrStateOrProjectState(this.accumulator.state)\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (\r\n      isKeyOf<T>(keyOrStateOrProjectState) &&\r\n      typeof stateOrSliceProjectFn === 'function'\r\n    ) {\r\n      const state: Partial<T> = {};\r\n      state[keyOrStateOrProjectState] = stateOrSliceProjectFn(\r\n        this.accumulator.state\r\n      );\r\n      this.accumulator.nextSlice(state);\r\n      return;\r\n    }\r\n\r\n    throw new Error('wrong params passed to set');\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Connect an `Observable<Partial<T>>` to the state `T`.\r\n   * Any change emitted by the source will get merged into the state.\r\n   * Subscription handling is done automatically.\r\n   *\r\n   * @example\r\n   * const sliceToAdd$ = interval(250).pipe(mapTo({\r\n   *   bar: 5,\r\n   *   foo: 'foo'\r\n   * });\r\n   * state.connect(sliceToAdd$);\r\n   * // every 250ms the properties bar and foo get updated due to the emission of sliceToAdd$\r\n   *\r\n   * // Additionally you can provide a `projectionFunction` to access the current state object and do custom mappings.\r\n   *\r\n   * const sliceToAdd$ = interval(250).pipe(mapTo({\r\n   *   bar: 5,\r\n   *   foo: 'foo'\r\n   * });\r\n   * state.connect(sliceToAdd$, (state, slice) => state.bar += slice.bar);\r\n   * // every 250ms the properties bar and foo get updated due to the emission of sliceToAdd$. Bar will increase by\r\n   * // 5 due to the projectionFunction\r\n   */\r\n  connect(inputOrSlice$: Observable<Partial<T>>): void;\r\n\r\n  /**\r\n   * @description\r\n   * Connect an `Observable<V>` to the state `T`.\r\n   * Any change emitted by the source will get forwarded to to project function and merged into the state.\r\n   * Subscription handling is done automatically.\r\n   *\r\n   * You have to provide a `projectionFunction` to access the current state object and do custom mappings.\r\n   *\r\n   * @example\r\n   * const sliceToAdd$ = interval(250);\r\n   * state.connect(sliceToAdd$, (s, v) => ({bar: v}));\r\n   * // every 250ms the property bar get updated due to the emission of sliceToAdd$\r\n   *\r\n   */\r\n  connect<V>(\r\n    inputOrSlice$: Observable<V>,\r\n    projectFn: ProjectStateReducer<T, V>\r\n  ): void;\r\n  /**\r\n   *\r\n   * @description\r\n   * Connect an `Observable<T[K]>` source to a specific property `K` in the state `T`. Any emitted change will update\r\n   * this\r\n   * specific property in the state.\r\n   * Subscription handling is done automatically.\r\n   *\r\n   * @example\r\n   * const myTimer$ = interval(250);\r\n   * state.connect('timer', myTimer$);\r\n   * // every 250ms the property timer will get updated\r\n   */\r\n  connect<K extends keyof T>(key: K, slice$: Observable<T[K]>): void;\r\n  /**\r\n   *\r\n   * @description\r\n   * Connect an `Observable<V>` source to a specific property in the state. Additionally you can provide a\r\n   * `projectionFunction` to access the current state object on every emission of your connected `Observable`.\r\n   * Any change emitted by the source will get merged into the state.\r\n   * Subscription handling is done automatically.\r\n   *\r\n   * @example\r\n   * const myTimer$ = interval(250);\r\n   * state.connect('timer', myTimer$, (state, timerChange) => state.timer += timerChange);\r\n   * // every 250ms the property timer will get updated\r\n   */\r\n  connect<K extends keyof T, V>(\r\n    key: K,\r\n    input$: Observable<V>,\r\n    projectSliceFn: ProjectValueReducer<T, K, V>\r\n  ): void;\r\n  /**\r\n   * @internal\r\n   */\r\n  connect<K extends keyof T, V>(\r\n    keyOrInputOrSlice$: K | Observable<Partial<T> | V>,\r\n    projectOrSlices$?: ProjectStateReducer<T, V> | Observable<T[K] | V>,\r\n    projectValueFn?: ProjectValueReducer<T, K, V>\r\n  ): void {\r\n    if (\r\n      isObservable(keyOrInputOrSlice$) &&\r\n      projectOrSlices$ === undefined &&\r\n      projectValueFn === undefined\r\n    ) {\r\n      this.accumulator.nextSliceObservable(keyOrInputOrSlice$);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      isObservable(keyOrInputOrSlice$) &&\r\n      typeof projectOrSlices$ === 'function' &&\r\n      !isObservable(projectOrSlices$) &&\r\n      projectValueFn === undefined\r\n    ) {\r\n      const project = projectOrSlices$;\r\n      const slice$ = keyOrInputOrSlice$.pipe(\r\n        map((v) => project(this.get(), v as V))\r\n      );\r\n      this.accumulator.nextSliceObservable(slice$);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      isKeyOf<T>(keyOrInputOrSlice$) &&\r\n      isObservable(projectOrSlices$) &&\r\n      projectValueFn === undefined\r\n    ) {\r\n      const key = keyOrInputOrSlice$;\r\n      const slice$ = projectOrSlices$.pipe(\r\n        map((value) => ({ ...{}, [key]: value }))\r\n      );\r\n      this.accumulator.nextSliceObservable(slice$);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      isKeyOf<T>(keyOrInputOrSlice$) &&\r\n      isObservable(projectOrSlices$) &&\r\n      typeof projectValueFn === 'function'\r\n    ) {\r\n      const key = keyOrInputOrSlice$;\r\n      const slice$ = projectOrSlices$.pipe(\r\n        map((value) => ({ ...{}, [key]: projectValueFn(this.get(), value as V) }))\r\n      );\r\n      this.accumulator.nextSliceObservable(slice$);\r\n      return;\r\n    }\r\n\r\n    throw new Error('wrong params passed to connect');\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * returns the state as cached and distinct `Observable<T>`. This way you don't have to think about **late\r\n   * subscribers**,\r\n   * **multiple subscribers** or **multiple emissions** of the same value\r\n   *\r\n   * @example\r\n   * const state$ = state.select();\r\n   * state$.subscribe(state => doStuff(state));\r\n   *\r\n   * @returns Observable<T>\r\n   */\r\n  select(): Observable<T>;\r\n\r\n  /**\r\n   * @description\r\n   * returns the state as cached and distinct `Observable<A>`. Accepts arbitrary\r\n   * [rxjs operators](https://rxjs-dev.firebaseapp.com/guide/operators) to enrich the selection with reactive composition.\r\n   *\r\n   * @example\r\n   * const profilePicture$ = state.select(\r\n   *  pluck('profilePicture'),\r\n   *  switchMap(profilePicture => mapImageAsync(profilePicture))\r\n   * );\r\n   * @param op { OperatorFunction<T, A> }\r\n   * @returns Observable<A>\r\n   */\r\n  select<A = T>(op: OperatorFunction<T, A>): Observable<A>;\r\n  /**\r\n   * @internal\r\n   */\r\n  select<A = T, B = A>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>\r\n  ): Observable<B>;\r\n  /**\r\n   * @internal\r\n   */\r\n  select<A = T, B = A, C = B>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>,\r\n    op3: OperatorFunction<B, C>\r\n  ): Observable<C>;\r\n  /**\r\n   * @internal\r\n   */\r\n  select<A = T, B = A, C = B, D = C>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>,\r\n    op3: OperatorFunction<B, C>,\r\n    op4: OperatorFunction<C, D>\r\n  ): Observable<D>;\r\n  /**\r\n   * @internal\r\n   */\r\n  select<A = T, B = A, C = B, D = C, E = D>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>,\r\n    op3: OperatorFunction<B, C>,\r\n    op4: OperatorFunction<C, D>,\r\n    op5: OperatorFunction<D, E>\r\n  ): Observable<E>;\r\n  /**\r\n   * @description\r\n   * Access a single property of the state by providing keys.\r\n   * Returns a single property of the state as cached and distinct `Observable<T[K1]>`.\r\n   *\r\n   * @example\r\n   * // Access a single property\r\n   *\r\n   * const bar$ = state.select('bar');\r\n   *\r\n   * // Access a nested property\r\n   *\r\n   * const foo$ = state.select('bar', 'foo');\r\n   *\r\n   * @return Observable<T[K1]>\r\n   */\r\n  select<K1 extends keyof T>(k1: K1): Observable<T[K1]>;\r\n  /**\r\n   * @internal\r\n   */\r\n  select<K1 extends keyof T, K2 extends keyof T[K1]>(\r\n    k1: K1,\r\n    k2: K2\r\n  ): Observable<T[K1][K2]>;\r\n  /**\r\n   * @internal\r\n   */\r\n  select<K1 extends keyof T,\r\n    K2 extends keyof T[K1],\r\n    K3 extends keyof T[K1][K2]>(k1: K1, k2: K2, k3: K3): Observable<T[K1][K2][K3]>;\r\n  /**\r\n   * @internal\r\n   */\r\n  select<K1 extends keyof T,\r\n    K2 extends keyof T[K1],\r\n    K3 extends keyof T[K1][K2],\r\n    K4 extends keyof T[K1][K2][K3]>(k1: K1, k2: K2, k3: K3, k4: K4): Observable<T[K1][K2][K3][K4]>;\r\n  /**\r\n   * @internal\r\n   */\r\n  select<K1 extends keyof T,\r\n    K2 extends keyof T[K1],\r\n    K3 extends keyof T[K1][K2],\r\n    K4 extends keyof T[K1][K2][K3],\r\n    K5 extends keyof T[K1][K2][K3][K4]>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5): Observable<T[K1][K2][K3][K4][K5]>;\r\n  /**\r\n   * @internal\r\n   */\r\n  select<K1 extends keyof T,\r\n    K2 extends keyof T[K1],\r\n    K3 extends keyof T[K1][K2],\r\n    K4 extends keyof T[K1][K2][K3],\r\n    K5 extends keyof T[K1][K2][K3][K4],\r\n    K6 extends keyof T[K1][K2][K3][K4][K5]>(\r\n    k1: K1,\r\n    k2: K2,\r\n    k3: K3,\r\n    k4: K4,\r\n    k5: K5,\r\n    k6: K6\r\n  ): Observable<T[K1][K2][K3][K4][K5][K6]>;\r\n  /**\r\n   * @internal\r\n   */\r\n  select<R>(\r\n    ...opOrMapFn: OperatorFunction<T, R>[] | string[]\r\n  ): Observable<T | R> {\r\n    if (!opOrMapFn || opOrMapFn.length === 0) {\r\n      return this.accumulator.state$.pipe(stateful());\r\n    } else if (isStringArrayGuard(opOrMapFn)) {\r\n      return this.accumulator.state$.pipe(stateful(pluck(...opOrMapFn))) as Observable<T | R>;\r\n    } else if (isOperateFnArrayGuard(opOrMapFn)) {\r\n      return this.accumulator.state$.pipe(stateful(pipeFromArray(opOrMapFn)));\r\n    }\r\n    throw new Error('wrong params passed to select');\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Manages side-effects of your state. Provide an `Observable<any>` **side-effect** and an optional\r\n   * `sideEffectFunction`.\r\n   * Subscription handling is done automatically.\r\n   *\r\n   * @example\r\n   * // Directly pass an observable side-effect\r\n   * const localStorageEffect$ = changes$.pipe(\r\n   *  tap(changes => storeChanges(changes))\r\n   * );\r\n   * state.hold(localStorageEffect$);\r\n   *\r\n   * // Pass an additional `sideEffectFunction`\r\n   *\r\n   * const localStorageEffectFn = changes => storeChanges(changes);\r\n   * state.hold(changes$, localStorageEffectFn);\r\n   *\r\n   * @param {Observable<S>} obsOrObsWithSideEffect\r\n   * @param {function} [sideEffectFn]\r\n   */\r\n  hold<S>(\r\n    obsOrObsWithSideEffect: Observable<S>,\r\n    sideEffectFn?: (arg: S) => void\r\n  ): void {\r\n    const sideEffect = obsOrObsWithSideEffect.pipe(catchError(e => EMPTY))\r\n    if (typeof sideEffectFn === 'function') {\r\n      this.effectObservable.nextEffectObservable(\r\n        sideEffect.pipe(tap(sideEffectFn))\r\n      );\r\n      return;\r\n    }\r\n    this.effectObservable.nextEffectObservable(sideEffect);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  subscribe(): Unsubscribable {\r\n    const subscription = new Subscription();\r\n    subscription.add(this.accumulator.subscribe());\r\n    subscription.add(this.effectObservable.subscribe());\r\n    return subscription;\r\n  }\r\n}\r\n","import { isDefined } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Inserts one or multiple items to an array T[].\r\n * Returns a shallow copy of the updated array T[], and does not mutate the original one.\r\n *\r\n * @example\r\n * // Inserting single value\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const updatedCreatures = insert(creatures, {id: 3, type: 'parrot'});\r\n *\r\n * // updatedCreatures will be:\r\n * //  [{id: 1, type: 'cat'}, {id: 2, type: 'dog}, {id: 3, type: 'parrot}];\r\n *\r\n * @example\r\n * // Inserting multiple values\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const updatedCreatures = insert(creatures, [{id: 3, type: 'parrot'}, {id: 4, type: 'hamster'}]);\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'parrot'}, {id: 4, type: 'hamster'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *\r\n *    readonly insertCreature$ = new Subject<void>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creatures',\r\n *        this.insertCreature$,\r\n *        ({ creatures }) => {\r\n *            const creatureToAdd = {id: generateId(), name: 'newCreature', type: 'dinosaur' };\r\n *            return insert(creatures, creatureToAdd);\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    insertCeature(): void {\r\n *        const creatureToAdd = {id: generateId(), name: 'newCreature', type: 'dinosaur' };\r\n *        this.state.set({ creatures: insert(this.state.get().creatures, creatureToAdd)});\r\n *    }\r\n * }\r\n *\r\n *\r\n * @returns T[]\r\n *\r\n * @docsPage insert\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function insert<T>(source: T[], updates: T | T[]): T[] {\r\n  const updatesDefined = isDefined(updates);\r\n  const sourceIsArray = Array.isArray(source);\r\n  const invalidInput = !sourceIsArray && !updatesDefined;\r\n\r\n  if (!sourceIsArray && isDefined(source)) {\r\n    console.warn(`Insert: Original value (${source}) is not an array.`);\r\n  }\r\n\r\n  if (invalidInput) {\r\n    return source;\r\n  }\r\n\r\n  return [\r\n    ...(sourceIsArray ? source : []),\r\n    ...(updatesDefined ? (Array.isArray(updates) ? updates : [updates]) : [])\r\n  ];\r\n}\r\n","import { CompareFn } from '../../rxjs/interfaces';\r\nimport { ComparableData } from '../interfaces/comparable-data-type';\r\nimport { isKeyOf } from '../../core';\r\n\r\nexport function valuesComparer<T>(\r\n  original: T,\r\n  incoming: T,\r\n  compare?: ComparableData<T>\r\n): boolean {\r\n  const defaultCompare = (a: T, b: T) => a === b;\r\n\r\n  if (isKeyOf<T>(compare)) {\r\n    return original[compare] === incoming[compare];\r\n  }\r\n\r\n  if (Array.isArray(compare)) {\r\n    const sanitizedKeys = compare.filter((k) => isKeyOf<T>(k));\r\n    return !!sanitizedKeys.length\r\n      ? sanitizedKeys.every((k) => original[k] === incoming[k])\r\n      : defaultCompare(original, incoming);\r\n  }\r\n\r\n  return ((compare as CompareFn<T>) || defaultCompare)(original, incoming);\r\n}\r\n","import { ComparableData } from '../interfaces/comparable-data-type';\r\nimport { isDefined } from '../../core';\r\nimport { valuesComparer } from '../_internals/valuesComparer.util';\r\n\r\n/**\r\n * @description\r\n * Removes one or multiple items from an array T[].\r\n * For comparison you can provide a key, an array of keys or a custom comparison function that should return true if items match.\r\n * If no comparison data is provided, an equality check is used by default.\r\n * Returns a shallow copy of the updated array T[], and does not mutate the original one.\r\n *\r\n * @example\r\n * // Removing value without comparison data\r\n *\r\n * const items = [1,2,3,4,5];\r\n *\r\n * const updatedItems = remove(items, [1,2,3]);\r\n *\r\n * // updatedItems will be: [4,5];\r\n *\r\n * @example\r\n * // Removing values with comparison function\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const realCreatures = remove(creatures, nonExistingCreatures, (a, b) => a.id === b.id);\r\n *\r\n * // realCreatures will be: [{id: 1, type: 'cat'}];\r\n *\r\n * @example\r\n * // Removing values with key\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const realCreatures = remove(creatures, nonExistingCreatures, 'id');\r\n *\r\n * // realCreatures will be: [{id: 1, type: 'cat'}];\r\n *\r\n * @example\r\n * // Removing values with array of keys\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const realCreatures = remove(creatures, nonExistingCreatures, ['id', 'type']);\r\n *\r\n * // realCreatures will be: [{id: 1, type: 'cat'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *\r\n *    readonly removeCreature$ = new Subject<Creature>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creatures',\r\n *        this.removeCreature$,\r\n *        ({ creatures }, creatureToRemove) => {\r\n *            return remove(creatures, creatureToRemove, (a, b) => a.id === b.id);\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    removeCreature(creatureToRemove: Creature): void {\r\n *        this.state.set({ creatures: remove(this.state.get().creatures, creatureToRemove, (a, b) => a.id === b.id)});\r\n *    }\r\n * }\r\n *\r\n * @returns T[]\r\n *\r\n * @docsPage remove\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function remove<T>(\r\n  source: T[],\r\n  scrap: Partial<T>[] | Partial<T>,\r\n  compare?: ComparableData<T>\r\n): T[] {\r\n  const scrapAsArray = isDefined(scrap)\r\n    ? Array.isArray(scrap)\r\n      ? scrap\r\n      : [scrap]\r\n    : [];\r\n  const invalidInput = !Array.isArray(source);\r\n\r\n  if (invalidInput) {\r\n    console.warn(`Remove: original value (${source}) is not an array`);\r\n    return source;\r\n  }\r\n\r\n  return source.filter((existingItem) => {\r\n    return !scrapAsArray.some((item) =>\r\n      valuesComparer(item as T, existingItem, compare)\r\n    );\r\n  });\r\n}\r\n","import { OnlyKeysOfSpecificType } from '../interfaces/only-keys-of-specific-type';\r\nimport { isDefined, isKeyOf } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Converts an array of objects to a dictionary {[key: string]: T}.\r\n * Accepts array T[] and key of type string, number or symbol as inputs.\r\n *\r\n *\r\n * @example\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'parrot'}];\r\n *\r\n * const creaturesDictionary = toDictionary(creatures, 'id');\r\n *\r\n * // creaturesDictionary will be:\r\n * // {\r\n * //  1: {id: 1, type: 'cat'},\r\n * //  2: {id: 2, type: 'dog'},\r\n * //  3: {id: 3, type: 'parrot'}\r\n * // };\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *\r\n *    readonly convertToDictionary$ = new Subject();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creaturesDictionary',\r\n *        this.convertToDictionary$,\r\n *        ({ creatures }) => {\r\n *            return toDictionary(creatures, 'id');\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    convertToDictionary(): void {\r\n *        this.state.set({ creaturesDictionary: toDictionary(this.state.get().creatures, 'id'});\r\n *    }\r\n * }\r\n *\r\n * @see {@link OnlyKeysOfSpecificType}\r\n * @param {OnlyKeysOfSpecificType<T, S>} key\r\n * @returns { [key: string]: T[] }\r\n * @docsPage toDictionary\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function toDictionary<T extends object>(\r\n  source: T[],\r\n  key:\r\n    | OnlyKeysOfSpecificType<T, number>\r\n    | OnlyKeysOfSpecificType<T, string>\r\n    | OnlyKeysOfSpecificType<T, symbol>\r\n): { [key: string]: T } {\r\n  if (!isDefined(source)) {\r\n    return source;\r\n  }\r\n\r\n  const sourceEmpty = !source.length;\r\n\r\n  if (!Array.isArray(source) || sourceEmpty || !isKeyOf<T>(source[0][key])) {\r\n    if (!sourceEmpty) {\r\n      console.warn('ToDictionary: unexpected input params.');\r\n    }\r\n    return {};\r\n  }\r\n\r\n  const dictionary: { [key: string]: T } = {};\r\n  const length = source.length;\r\n  let i = 0;\r\n\r\n  for (i; i < length; i++) {\r\n    dictionary[`${source[i][key]}`] = Object.assign({}, source[i]);\r\n  }\r\n\r\n  return dictionary;\r\n}\r\n","import { ComparableData } from '../interfaces/comparable-data-type';\r\nimport { valuesComparer } from '../_internals/valuesComparer.util';\r\n\r\n/**\r\n * @description\r\n * Updates one or multiple items in an array T[].\r\n * For comparison you can provide key, array of keys or a custom comparison function that should return true if items match.\r\n * If no comparison is provided, an equality check is used by default.\r\n * Returns a shallow copy of the array T[] and updated items, does not mutate the original array.\r\n *\r\n * @example\r\n * // Update with comparison function\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const newCat = {id: 1, type: 'lion'};\r\n *\r\n * const updatedCreatures = update(creatures, newCat, (a, b) => a.id === b.id);\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'lion'}, {id: 2, type: 'dog'}];\r\n *\r\n * @example\r\n * // Update with key\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const newCat = {id: 1, type: 'lion'};\r\n *\r\n * const updatedCreatures = update(creatures, newCat, 'id');\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'lion'}, {id: 2, type: 'dog'}];\r\n *\r\n * @example\r\n * // Update with array of keys\r\n *\r\n * const creatures = [{id: 1, type: 'cat', name: 'Bella'}, {id: 2, type: 'dog', name: 'Sparky'}];\r\n *\r\n * const newCat = {id: 1, type: 'lion', name: 'Bella'};\r\n *\r\n * const updatedCreatures = update(creatures, newCat, ['id', 'name']);\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'lion', name: 'Bella'}, {id: 2, type: 'dog', name: 'Sparky'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *\r\n *    readonly updateCreature$ = new Subject<Creature>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creatures',\r\n *        this.updateCreature$,\r\n *        ({ creatures }, creatureToUpdate) => {\r\n *            return update(creatures, creatureToUpdate, (a, b) => a.id === b.id);\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    updateCreature(creatureToUpdate: Creature): void {\r\n *        this.state.set({ creatures: update(this.state.get().creatures, creatureToUpdate, (a, b) => a.id === b.id)});\r\n *    }\r\n * }\r\n *\r\n * @returns T[]\r\n *\r\n * @docsPage update\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function update<T extends object>(\r\n  source: T[],\r\n  updates: Partial<T>[] | Partial<T>,\r\n  compare?: ComparableData<T>\r\n): T[] {\r\n  const updatesDefined = updates != null;\r\n  const updatesAsArray = updatesDefined\r\n    ? Array.isArray(updates)\r\n      ? updates\r\n      : [updates]\r\n    : [];\r\n\r\n  const sourceDefined = source != null;\r\n  const sourceIsArray = Array.isArray(source);\r\n  const invalidInput =\r\n    !sourceIsArray || source.length === 0 || updatesAsArray.length === 0;\r\n\r\n  if (sourceDefined && !sourceIsArray) {\r\n    console.warn(`Update: Original value (${source}) is not an array.`);\r\n  }\r\n\r\n  if (invalidInput) {\r\n    return source;\r\n  }\r\n\r\n  return source.map((existingItem) => {\r\n    const match = updatesAsArray.find((item) =>\r\n      valuesComparer(item as T, existingItem, compare)\r\n    );\r\n\r\n    if (match) {\r\n      return { ...existingItem, ...match };\r\n    }\r\n\r\n    return existingItem;\r\n  });\r\n}\r\n","import { isDefined, isKeyOf } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Accepts an array of objects of type T and single key or array of keys (K extends keyof T).\r\n * The `exctract` method is pure and immutable, thus not touching the input values and returning a shallow\r\n * copy of the extracted source.\r\n *\r\n * @example\r\n *\r\n * const cats = [{id: 1, type: 'cat', name: 'Fluffy'}, {id: 2, type: 'cat', name: 'Emma'}];\r\n *\r\n * const catsWithoutTypes = extract(cats, ['name', 'id']);\r\n *\r\n * // catsWithoutTypes will be:\r\n * // [{id: 1, name: 'Fluffy'}, {id: 2, name: 'Emma'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class AnimalsListComponent {\r\n *\r\n *    constructor(private state: RxState<ComponentState>, private api: ApiService) {\r\n *      state.connect(\r\n *        'animals'\r\n *        this.api.getAnimals(),\r\n *        (state, animals) => extract(animals, ['id', 'name'])\r\n *      );\r\n *    }\r\n * }\r\n *\r\n * @returns T\r\n *\r\n * @docsPage slice\r\n * @docsCategory transformation-helpers\r\n */\r\n export function extract<T extends object, K extends keyof T>(\r\n  array: T[],\r\n  keys: K | K[]\r\n): Pick<T, K>[] {\r\n  const arrayIsArray = isDefined(array) && Array.isArray(array);\r\n\r\n  if (!arrayIsArray) {\r\n    console.warn(`extract: original value (${array}) is not an array.`);\r\n    return undefined as any;\r\n  }\r\n\r\n  const sanitizedKeys = (Array.isArray(keys) ? keys : [keys]).filter(\r\n    k => isKeyOf<T>(k) && array.some(i => k in i)\r\n  );\r\n  const length = sanitizedKeys.length;\r\n\r\n  if (!sanitizedKeys.length) {\r\n    console.warn(`extract: provided keys not found`);\r\n    return undefined as any;\r\n  }\r\n\r\n  return array.map(item => {\r\n    let i = 0;\r\n    const result = {} as Pick<T, K>;\r\n\r\n    for(i; i < length; i++) {\r\n      result[sanitizedKeys[i]] = item[sanitizedKeys[i]];\r\n    }\r\n\r\n    return result;\r\n  }\r\n  );\r\n}\r\n","import { isObjectGuard } from '../../core/utils/guards';\r\nimport { valuesComparer } from '../_internals/valuesComparer.util';\r\nimport { ComparableData } from '../interfaces/comparable-data-type';\r\n\r\n/**\r\n * @description\r\n * Updates or inserts (if does not exist) one or multiple items in an array T[].\r\n * For comparison you can provide a key, an array of keys or a custom comparison function that should return true if\r\n * items match.\r\n * If no comparison is provided, an equality check is used by default.\r\n * upsert is `pure` and `immutable`, your inputs won't be changed\r\n *\r\n *\r\n * @example\r\n * // Upsert (update) with key\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const newCat = {id: 1, type: 'lion'};\r\n *\r\n * const updatedCreatures = upsert(creatures, newCat, 'id');\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'lion'}, {id: 2, type: 'dog'}];\r\n *\r\n * @example\r\n * // Upsert (insert) with key\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const newCat = {id: 3, type: 'lion'};\r\n *\r\n * const updatedCreatures = upsert(creatures, newCat, 'id');\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'lion'}];\r\n *\r\n * @example\r\n * // Upsert (update) with array of keys\r\n *\r\n * const creatures = [{id: 1, type: 'cat', name: 'Bella'}, {id: 2, type: 'dog', name: 'Sparky'}];\r\n *\r\n * const newCat = {id: 1, type: 'lion', name: 'Bella'};\r\n *\r\n * const updatedCreatures = upsert(creatures, newCat, ['id', 'name']);\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'lion', name: 'Bella'}, {id: 2, type: 'dog', name: 'Sparky'}];\r\n *\r\n * @example\r\n * // Update (insert) with comparison function\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const newCat = {id: 3, type: 'lion'};\r\n *\r\n * const updatedCreatures = upsert(creatures, newCat, (a, b) => a.id === b.id);\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'lion'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *\r\n *    // trigger which gets called on add/update (for reactive implementation)\r\n *    readonly addOrUpdateCreature = new Subject<Creature>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      const initialCreatures = [{id: 1, type: 'cat', name: 'Bella'}, {id: 2, type: 'dog', name: 'Sparky'}];\r\n *      state.set({ creatures: initialCreatures });\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creatures',\r\n *        this.addOrUpdateCreature,\r\n *        ({ creatures }, creatureToUpsert) => {\r\n *            return upsert(creatures, creatureToUpsert, 'id');\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    updateCreature(creatureToUpdate: Creature): void {\r\n *        this.state.set({ creatures: upsert(this.state.get('creatures'), creatureToUpdate, 'id')});\r\n *    }\r\n * }\r\n *\r\n * @returns T[]\r\n *\r\n * @docsPage upsert\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function upsert<T>(\r\n  source: T[],\r\n  update: Partial<T>[] | Partial<T>,\r\n  compare?: ComparableData<T>\r\n): T[] {\r\n  // check inputs for validity\r\n  const updatesAsArray =\r\n    update != null ? (Array.isArray(update) ? update : [update]) : [];\r\n  // check inputs for validity\r\n  const sourceIsArray = Array.isArray(source);\r\n  const invalidInput = !sourceIsArray && updatesAsArray.length === 0;\r\n  // if the source value is not an Array or the input is not defined return the original source\r\n  // this is the case for any edge case:\r\n  // '', null, undefined, CustomObjectOfDoomAndDarkness, ...\r\n  if (invalidInput) {\r\n    return source;\r\n  }\r\n\r\n  // if source is empty array or not an array, but the updates are valid:\r\n  // return a shallow copy of the updates as result\r\n  if (updatesAsArray.length > 0 && (!sourceIsArray || source.length === 0)) {\r\n    return [...updatesAsArray] as T[];\r\n  }\r\n\r\n  const inserts: T[] = [];\r\n  const updates: Record<number, Partial<T>> = {};\r\n  // process updates/inserts\r\n  updatesAsArray.forEach((item) => {\r\n    const match = source.findIndex((sourceItem) =>\r\n      valuesComparer(item as T, sourceItem, compare)\r\n    );\r\n    // if item already exists, save it as update\r\n    if (match !== -1) {\r\n      updates[match] = item;\r\n    } else {\r\n      // otherwise consider this as insert\r\n      if (isObjectGuard(item)) {\r\n        // create a shallow copy if item is an object\r\n        inserts.push({ ...(item as T) });\r\n      } else {\r\n        // otherwise just push it\r\n        inserts.push(item);\r\n      }\r\n    }\r\n  });\r\n  let updated = source;\r\n  if (Object.keys(updates).length > 0) {\r\n    // if we have updates to process\r\n    updated = updated.map((item, i) => {\r\n      const updatedItem = updates[i];\r\n      // process the updated\r\n      if (updatedItem != null) {\r\n        if (isObjectGuard(item)) {\r\n          return { ...item, ...updatedItem };\r\n        } else {\r\n          return updatedItem as T;\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n  // return the combination of the updated source & the inserts as new array\r\n  return [...updated, ...inserts];\r\n}\r\n","import { isDefined, isKeyOf, isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Accepts an object of type T and key of type K extends keyof T.\r\n * Removes property from an object and returns a shallow copy of the updated object without specified property.\r\n * If property not found returns copy of the original object.\r\n * Not mutating original object.\r\n *\r\n * @example\r\n *\r\n * const cat = {id: 1, type: 'cat', name: 'Fluffy'};\r\n *\r\n * const anonymusCat = deleteProp(cat, 'name');\r\n *\r\n * // anonymusCat will be:\r\n * // {id: 1, type: 'cat'};\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ProfileComponent {\r\n *\r\n *    readonly removeName$ = new Subject();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        this.removeName$,\r\n *        (state) => {\r\n *            return deleteProp(state, 'name');\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    removeName(): void {\r\n *        this.state.set(remove(this.get(), 'name'));\r\n *    }\r\n * }\r\n *\r\n * @returns Omit<T, K>\r\n *\r\n * @docsPage deleteProp\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function deleteProp<T extends object, K extends keyof T>(\r\n  object: T,\r\n  key: K\r\n): Omit<T, K> {\r\n  if (!isDefined(object) || !isObjectGuard(object)) {\r\n    console.warn(`DeleteProp: original value ${object} is not an object.`);\r\n    return object;\r\n  }\r\n\r\n  if (!isKeyOf<T>(key)) {\r\n    console.warn(`DeleteProp: provided key is not a string, number or symbol.`);\r\n    return { ...object };\r\n  }\r\n\r\n  const copy = { ...object };\r\n  delete copy[key];\r\n  return copy;\r\n}\r\n","import { isDefined, isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Converts a dictionary of type {[key: string]: T} to array T[].\r\n *\r\n * @example\r\n *\r\n * const creaturesDictionary = {\r\n *   '1': {id: 1, type: 'cat'},\r\n *   '2': {id: 2, type: 'dog'},\r\n *   '3': {id: 3, type: 'parrot'}\r\n * };\r\n *\r\n * const creaturesArray = dictionaryToArray(creaturesDictionary);\r\n *\r\n * // creaturesArray will be:\r\n * // [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'parrot'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *    readonly removeName$ = new Subject();\r\n *\r\n *    constructor(\r\n *      private state: RxState<ComponentState>,\r\n *      private api: ApiService\r\n *    ) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creatures',\r\n *        this.api.creaturesDictionary$,\r\n *        (_, creatures) => {\r\n *            return dictionaryToArray(creatures);\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    removeName(): void {\r\n *      this.api.creaturesDictionary$.pipe(\r\n *        // subscription handling logic\r\n *      ).subscribe(\r\n *        dictionary => this.set({creatures: dictionaryToArray(dictionary)})\r\n *      );\r\n *    }\r\n * }\r\n *\r\n * @returns T[];\r\n *\r\n * @docsPage dictionaryToArray\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function dictionaryToArray<T>(dictionary: { [key: string]: T }): T[] {\r\n  if (!isDefined(dictionary)) {\r\n    return dictionary;\r\n  }\r\n\r\n  if (!isObjectGuard(dictionary)) {\r\n    console.warn(`DictionaryToArray: unexpected input.`);\r\n    return [];\r\n  }\r\n\r\n  return Object.values(dictionary);\r\n}\r\n","import { isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Merges an object of type T with updates of type Partial<T>.\r\n * Returns a new object where updates override original values while not mutating the original one.\r\n\r\n * @example\r\n * interface Creature {\r\n *  id: number,\r\n *  type: string,\r\n *  name: string\r\n * }\r\n *\r\n * const cat = {id: 1, type: 'cat'};\r\n *\r\n * const catWithname = patch(cat, {name: 'Fluffy'});\r\n *\r\n * // catWithname will be:\r\n * // {id: 1, type: 'cat', name: 'Fluffy'};\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ProfileComponent {\r\n *\r\n *    readonly changeName$ = new Subject<string>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        this.changeName$,\r\n *        (state, name) => {\r\n *            return patch(state, { name });\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    changeName(name: string): void {\r\n *        this.state.set(patch(this.get(), { name }));\r\n *    }\r\n * }\r\n *\r\n * @returns T\r\n *\r\n * @docsPage patch\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function patch<T extends object>(object: T, upd: Partial<T>): T {\r\n  const update = isObjectGuard(upd) ? upd : {};\r\n\r\n  if (!isObjectGuard(object) && isObjectGuard(upd)) {\r\n    console.warn(`Patch: original value ${object} is not an object.`);\r\n    return { ...update } as T;\r\n  }\r\n\r\n  if (!isObjectGuard(object) && !isObjectGuard(upd)) {\r\n    console.warn(\r\n      `Patch: original value ${object} and updates ${upd} are not objects.`\r\n    );\r\n    return object;\r\n  }\r\n\r\n  return { ...object, ...update };\r\n}\r\n","import { isDefined, isKeyOf, isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Accepts an object of type T, key of type K extends keyof T, and value of type T[K].\r\n * Sets the property and returns a newly updated shallow copy of an object while not mutating the original one.\r\n *\r\n * @example\r\n *\r\n * const cat = {id: 1, type: 'cat', name: 'Fluffy'};\r\n *\r\n * const renamedCat = setProp(cat, 'name', 'Bella');\r\n *\r\n * // renamedCat will be:\r\n * // {id: 1, type: 'cat', name: 'Bella'};\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ProfileComponent {\r\n *\r\n *    readonly changeName$ = new Subject<string>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        this.changeName$,\r\n *        (state, name) => {\r\n *            return setProp(state, 'name', name);\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    changeName(name: string): void {\r\n *        this.state.set(setProp(this.get(), 'name', name));\r\n *    }\r\n * }\r\n *\r\n * @returns T\r\n *\r\n * @docsPage setProp\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function setProp<T extends object, K extends keyof T>(\r\n  object: T,\r\n  key: K,\r\n  value: T[K]\r\n): T {\r\n  const objectIsObject = isObjectGuard(object);\r\n  const keyIsValid = isKeyOf<T>(key);\r\n  const initialObject = objectIsObject ? object : ({} as T);\r\n\r\n  if (!objectIsObject) {\r\n    console.warn(`SetProp: original value (${object}) is not an object.`);\r\n  }\r\n\r\n  if (!keyIsValid) {\r\n    console.warn(`SetProp: key argument (${key}) is invalid.`);\r\n  }\r\n\r\n  if (!isDefined(object) && !keyIsValid) {\r\n    return object;\r\n  }\r\n\r\n  if (keyIsValid) {\r\n    return {\r\n      ...initialObject,\r\n      [key]: value\r\n    };\r\n  }\r\n\r\n  return { ...initialObject };\r\n}\r\n","import { OnlyKeysOfSpecificType } from '../interfaces/only-keys-of-specific-type';\r\nimport { isDefined, isKeyOf, isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Toggles a boolean property in the object.\r\n * Accepts object of type T and key value of which is boolean.\r\n * Toggles the property and returns a shallow copy of an object, while not mutating the original one.\r\n *\r\n * @example\r\n *\r\n * const state = {items: [1,2,3], loading: true};\r\n *\r\n * const updatedState = toggle(state, 'loading');\r\n *\r\n * // updatedState will be:\r\n * // {items: [1,2,3], loading: false};\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *    readonly loadingChange$ = new Subject();\r\n *\r\n *    constructor(\r\n *      private state: RxState<ComponentState>\r\n *    ) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        this.api.loadingChange$,\r\n *        (state, _) => {\r\n *            return toggle(state, 'isLoading');\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    toggleLoading(): void {\r\n *      this.set(toggle(state, 'isLoading'));\r\n *    }\r\n * }\r\n *\r\n * @returns T\r\n *\r\n * @docsPage toggle\r\n * @docsCategory transformation-helpers\r\n */\r\n\r\nexport function toggle<T extends object>(\r\n  object: T,\r\n  key: OnlyKeysOfSpecificType<T, boolean>\r\n): T {\r\n  const objectIsObject = isObjectGuard(object);\r\n  const keyIsValid = isKeyOf<T>(key);\r\n  const initialObject = objectIsObject ? object : ({} as T);\r\n\r\n  if (!objectIsObject) {\r\n    console.warn(`Toggle: original value (${object}) is not an object.`);\r\n  }\r\n\r\n  if (!keyIsValid) {\r\n    console.warn(`Toggle: key argument (${key}) is invalid.`);\r\n  }\r\n\r\n  if (keyIsValid && typeof initialObject[key] !== 'boolean') {\r\n    console.warn(`Toggle: value of the key (${key}) is not a boolean.`);\r\n  }\r\n\r\n  if (!isDefined(object) && !keyIsValid) {\r\n    return object;\r\n  }\r\n\r\n  if (\r\n    keyIsValid &&\r\n    (typeof initialObject[key] === 'boolean' ||\r\n      !initialObject.hasOwnProperty(key))\r\n  ) {\r\n    return { ...initialObject, [key]: !initialObject[key] };\r\n  }\r\n\r\n  return { ...initialObject };\r\n}\r\n","import { isDefined, isKeyOf, isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Accepts an object of type T and single key or array of keys (K extends keyof T).\r\n * Constructs new object based on provided keys.\r\n *\r\n * @example\r\n *\r\n * const cat = {id: 1, type: 'cat', name: 'Fluffy'};\r\n *\r\n * const catWithoutType = slice(cat, ['name', 'id']);\r\n *\r\n * // catWithoutType will be:\r\n * // {id: 1, name: 'Fluffy'};\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class AnimalsListComponent {\r\n *\r\n *    constructor(private state: RxState<ComponentState>, private api: ApiService) {\r\n *      state.connect(\r\n *        'animals'\r\n *        this.api.getAnimals(),\r\n *        (state, animals) => {\r\n *            return animals.map(animal => slice(animal, ['id', 'name']));\r\n *        }\r\n *      );\r\n *    }\r\n * }\r\n *\r\n * @returns T\r\n *\r\n * @docsPage slice\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function slice<T extends object, K extends keyof T>(\r\n  object: T,\r\n  keys: K | K[]\r\n): Pick<T, K> {\r\n  const objectIsObject = isDefined(object) && isObjectGuard(object);\r\n\r\n  if (!objectIsObject) {\r\n    console.warn(`slice: original value (${object}) is not an object.`);\r\n    return undefined as any;\r\n  }\r\n\r\n  const sanitizedKeys = (Array.isArray(keys) ? keys : [keys]).filter(\r\n    (k) => isKeyOf<T>(k) && k in object\r\n  );\r\n\r\n  if (!sanitizedKeys.length) {\r\n    console.warn(`slice: provided keys not found`);\r\n    return undefined as any;\r\n  }\r\n\r\n  return sanitizedKeys.reduce(\r\n    (acc, k) => ({ ...acc, [k]: object[k] }),\r\n    {} as Pick<T, K>\r\n  );\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["Subject","BehaviorSubject","merge","distinctUntilChanged","mergeAll","observeOn","queueScheduler","withLatestFrom","scan","tap","catchError","EMPTY","publish","publishReplay","noop","filter","shareReplay","pluck","map","Subscription","isObservable","Injectable"],"mappings":"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"}