{"version":3,"file":"safe-pluck.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/core/utils/safe-pluck.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AA8C7D,MAAM,UAAU,SAAS,CAOvB,WAAc,EACd,IAM4B;IAU5B,8EAA8E;IAC9E,iCAAiC;IACjC,2CAA2C;IAC3C,mDAAmD;IACnD,wDAAwD;IACxD,yCAAyC;IACzC,2CAA2C;IAC3C,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;QAC3B,OAAO,WAAW,CAAC;KACpB;IACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;QACpB,OAAO,SAAS,CAAC;KAClB;IACD,iEAAiE;IACjE,MAAM,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAC/D,OAAO,CAAI,CAAC,CAAC,CACd,CAAC;IACF,IACE,OAAO,CAAC,MAAM,KAAK,CAAC;QACpB,CAAC,aAAa,CAAC,WAAW,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,KAAK,CAAC,EACrC;QACA,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,IAAI,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK,EAAQ,CAAC,CAAC;IAE9C,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACpB,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;YACvC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;IACH,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { isDefined, isKeyOf, isObjectGuard } from './guards';\r\n\r\nexport function safePluck<T extends object, K1 extends keyof T>(\r\n  stateObject: T,\r\n  keys: K1 | [K1]\r\n): T[K1];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1]>(stateObject: T, keys: [K1, K2]): T[K1][K2];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2]>(stateObject: T, keys: [K1, K2, K3]): T[K1][K2][K3];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3]>(stateObject: T, keys: [K1, K2, K3, K4]): T[K1][K2][K3][K4];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4]>(stateObject: T, keys: [K1, K2, K3, K4, K5]): T[K1][K2][K3][K4][K5];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4],\r\n  K6 extends keyof T[K1][K2][K3][K4][K5]>(\r\n  stateObject: T,\r\n  keys:\r\n    | [K1]\r\n    | [K1, K2]\r\n    | [K1, K2, K3]\r\n    | [K1, K2, K3, K4]\r\n    | [K1, K2, K3, K4, K5]\r\n    | [K1, K2, K3, K4, K5, K6]\r\n): T[K1][K2][K3][K4][K5][K6];\r\n\r\nexport function safePluck<T extends object,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4],\r\n  K6 extends keyof T[K1][K2][K3][K4][K5]>(\r\n  stateObject: T,\r\n  keys:\r\n    | [K1]\r\n    | [K1, K2]\r\n    | [K1, K2, K3]\r\n    | [K1, K2, K3, K4]\r\n    | [K1, K2, K3, K4, K5]\r\n    | [K1, K2, K3, K4, K5, K6]\r\n):\r\n  | T[K1]\r\n  | T[K1][K2]\r\n  | T[K1][K2][K3]\r\n  | T[K1][K2][K3][K4]\r\n  | T[K1][K2][K3][K4][K5]\r\n  | T[K1][K2][K3][K4][K5][K6]\r\n  | null\r\n  | undefined {\r\n  // needed to match null and undefined conventions of RxAngular core components\r\n  // safePluck(null) -> return null\r\n  // safePluck(undefined) -> return undefined\r\n  // safePluck(obj, ['wrongKey']) -> return undefined\r\n  // safePluck(obj, ['correctKey']) -> return value of key\r\n  // safePluck(obj, '') -> return undefined\r\n  // safePluck(obj, null) -> return undefined\r\n  if (!isDefined(stateObject)) {\r\n    return stateObject;\r\n  }\r\n  if (!isDefined(keys)) {\r\n    return undefined;\r\n  }\r\n  // sanitize keys -> keep only valid keys (string, number, symbol)\r\n  const keysArr = (Array.isArray(keys) ? keys : [keys]).filter(k =>\r\n    isKeyOf<T>(k)\r\n  );\r\n  if (\r\n    keysArr.length === 0 ||\r\n    !isObjectGuard(stateObject) ||\r\n    Object.keys(stateObject).length === 0\r\n  ) {\r\n    return undefined;\r\n  }\r\n  let prop = stateObject[keysArr.shift() as K1];\r\n\r\n  keysArr.forEach(key => {\r\n    if (isObjectGuard(prop) && isKeyOf(key)) {\r\n      prop = prop[key];\r\n    }\r\n  });\r\n  return prop;\r\n}\r\n"]}