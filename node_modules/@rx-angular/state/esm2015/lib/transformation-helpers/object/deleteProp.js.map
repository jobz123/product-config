{"version":3,"file":"deleteProp.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/transformation-helpers/object/deleteProp.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,MAAM,UAAU,UAAU,CACxB,MAAS,EACT,GAAM;IAEN,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;QAChD,OAAO,CAAC,IAAI,CAAC,8BAA8B,MAAM,oBAAoB,CAAC,CAAC;QACvE,OAAO,MAAM,CAAC;KACf;IAED,IAAI,CAAC,OAAO,CAAI,GAAG,CAAC,EAAE;QACpB,OAAO,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;QAC5E,yBAAY,MAAM,EAAG;KACtB;IAED,MAAM,IAAI,qBAAQ,MAAM,CAAE,CAAC;IAC3B,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { isDefined, isKeyOf, isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Accepts an object of type T and key of type K extends keyof T.\r\n * Removes property from an object and returns a shallow copy of the updated object without specified property.\r\n * If property not found returns copy of the original object.\r\n * Not mutating original object.\r\n *\r\n * @example\r\n *\r\n * const cat = {id: 1, type: 'cat', name: 'Fluffy'};\r\n *\r\n * const anonymusCat = deleteProp(cat, 'name');\r\n *\r\n * // anonymusCat will be:\r\n * // {id: 1, type: 'cat'};\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ProfileComponent {\r\n *\r\n *    readonly removeName$ = new Subject();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        this.removeName$,\r\n *        (state) => {\r\n *            return deleteProp(state, 'name');\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    removeName(): void {\r\n *        this.state.set(remove(this.get(), 'name'));\r\n *    }\r\n * }\r\n *\r\n * @returns Omit<T, K>\r\n *\r\n * @docsPage deleteProp\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function deleteProp<T extends object, K extends keyof T>(\r\n  object: T,\r\n  key: K\r\n): Omit<T, K> {\r\n  if (!isDefined(object) || !isObjectGuard(object)) {\r\n    console.warn(`DeleteProp: original value ${object} is not an object.`);\r\n    return object;\r\n  }\r\n\r\n  if (!isKeyOf<T>(key)) {\r\n    console.warn(`DeleteProp: provided key is not a string, number or symbol.`);\r\n    return { ...object };\r\n  }\r\n\r\n  const copy = { ...object };\r\n  delete copy[key];\r\n  return copy;\r\n}\r\n"]}