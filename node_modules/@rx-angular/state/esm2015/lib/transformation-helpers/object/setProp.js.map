{"version":3,"file":"setProp.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/transformation-helpers/object/setProp.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,MAAM,UAAU,OAAO,CACrB,MAAS,EACT,GAAM,EACN,KAAW;IAEX,MAAM,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,UAAU,GAAG,OAAO,CAAI,GAAG,CAAC,CAAC;IACnC,MAAM,aAAa,GAAG,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAE,EAAQ,CAAC;IAE1D,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,CAAC,IAAI,CAAC,4BAA4B,MAAM,qBAAqB,CAAC,CAAC;KACvE;IAED,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,CAAC,IAAI,CAAC,0BAA0B,GAAG,eAAe,CAAC,CAAC;KAC5D;IAED,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE;QACrC,OAAO,MAAM,CAAC;KACf;IAED,IAAI,UAAU,EAAE;QACd,uCACK,aAAa,KAChB,CAAC,GAAG,CAAC,EAAE,KAAK,IACZ;KACH;IAED,yBAAY,aAAa,EAAG;AAC9B,CAAC","sourcesContent":["import { isDefined, isKeyOf, isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Accepts an object of type T, key of type K extends keyof T, and value of type T[K].\r\n * Sets the property and returns a newly updated shallow copy of an object while not mutating the original one.\r\n *\r\n * @example\r\n *\r\n * const cat = {id: 1, type: 'cat', name: 'Fluffy'};\r\n *\r\n * const renamedCat = setProp(cat, 'name', 'Bella');\r\n *\r\n * // renamedCat will be:\r\n * // {id: 1, type: 'cat', name: 'Bella'};\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ProfileComponent {\r\n *\r\n *    readonly changeName$ = new Subject<string>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        this.changeName$,\r\n *        (state, name) => {\r\n *            return setProp(state, 'name', name);\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    changeName(name: string): void {\r\n *        this.state.set(setProp(this.get(), 'name', name));\r\n *    }\r\n * }\r\n *\r\n * @returns T\r\n *\r\n * @docsPage setProp\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function setProp<T extends object, K extends keyof T>(\r\n  object: T,\r\n  key: K,\r\n  value: T[K]\r\n): T {\r\n  const objectIsObject = isObjectGuard(object);\r\n  const keyIsValid = isKeyOf<T>(key);\r\n  const initialObject = objectIsObject ? object : ({} as T);\r\n\r\n  if (!objectIsObject) {\r\n    console.warn(`SetProp: original value (${object}) is not an object.`);\r\n  }\r\n\r\n  if (!keyIsValid) {\r\n    console.warn(`SetProp: key argument (${key}) is invalid.`);\r\n  }\r\n\r\n  if (!isDefined(object) && !keyIsValid) {\r\n    return object;\r\n  }\r\n\r\n  if (keyIsValid) {\r\n    return {\r\n      ...initialObject,\r\n      [key]: value\r\n    };\r\n  }\r\n\r\n  return { ...initialObject };\r\n}\r\n"]}