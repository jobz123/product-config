{"version":3,"file":"dictionaryToArray.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/transformation-helpers/object/dictionaryToArray.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAEtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmDG;AACH,MAAM,UAAU,iBAAiB,CAAI,UAAgC;IACnE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;QAC1B,OAAO,UAAU,CAAC;KACnB;IAED,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE;QAC9B,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;QACrD,OAAO,EAAE,CAAC;KACX;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import { isDefined, isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Converts a dictionary of type {[key: string]: T} to array T[].\r\n *\r\n * @example\r\n *\r\n * const creaturesDictionary = {\r\n *   '1': {id: 1, type: 'cat'},\r\n *   '2': {id: 2, type: 'dog'},\r\n *   '3': {id: 3, type: 'parrot'}\r\n * };\r\n *\r\n * const creaturesArray = dictionaryToArray(creaturesDictionary);\r\n *\r\n * // creaturesArray will be:\r\n * // [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'parrot'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *    readonly removeName$ = new Subject();\r\n *\r\n *    constructor(\r\n *      private state: RxState<ComponentState>,\r\n *      private api: ApiService\r\n *    ) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creatures',\r\n *        this.api.creaturesDictionary$,\r\n *        (_, creatures) => {\r\n *            return dictionaryToArray(creatures);\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    removeName(): void {\r\n *      this.api.creaturesDictionary$.pipe(\r\n *        // subscription handling logic\r\n *      ).subscribe(\r\n *        dictionary => this.set({creatures: dictionaryToArray(dictionary)})\r\n *      );\r\n *    }\r\n * }\r\n *\r\n * @returns T[];\r\n *\r\n * @docsPage dictionaryToArray\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function dictionaryToArray<T>(dictionary: { [key: string]: T }): T[] {\r\n  if (!isDefined(dictionary)) {\r\n    return dictionary;\r\n  }\r\n\r\n  if (!isObjectGuard(dictionary)) {\r\n    console.warn(`DictionaryToArray: unexpected input.`);\r\n    return [];\r\n  }\r\n\r\n  return Object.values(dictionary);\r\n}\r\n"]}