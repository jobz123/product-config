{"version":3,"file":"patch.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/transformation-helpers/object/patch.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8CG;AACH,MAAM,UAAU,KAAK,CAAmB,MAAS,EAAE,GAAe;IAChE,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAE7C,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE;QAChD,OAAO,CAAC,IAAI,CAAC,yBAAyB,MAAM,oBAAoB,CAAC,CAAC;QAClE,OAAO,kBAAK,MAAM,CAAO,CAAC;KAC3B;IAED,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;QACjD,OAAO,CAAC,IAAI,CACV,yBAAyB,MAAM,gBAAgB,GAAG,mBAAmB,CACtE,CAAC;QACF,OAAO,MAAM,CAAC;KACf;IAED,uCAAY,MAAM,GAAK,MAAM,EAAG;AAClC,CAAC","sourcesContent":["import { isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Merges an object of type T with updates of type Partial<T>.\r\n * Returns a new object where updates override original values while not mutating the original one.\r\n\r\n * @example\r\n * interface Creature {\r\n *  id: number,\r\n *  type: string,\r\n *  name: string\r\n * }\r\n *\r\n * const cat = {id: 1, type: 'cat'};\r\n *\r\n * const catWithname = patch(cat, {name: 'Fluffy'});\r\n *\r\n * // catWithname will be:\r\n * // {id: 1, type: 'cat', name: 'Fluffy'};\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ProfileComponent {\r\n *\r\n *    readonly changeName$ = new Subject<string>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        this.changeName$,\r\n *        (state, name) => {\r\n *            return patch(state, { name });\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    changeName(name: string): void {\r\n *        this.state.set(patch(this.get(), { name }));\r\n *    }\r\n * }\r\n *\r\n * @returns T\r\n *\r\n * @docsPage patch\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function patch<T extends object>(object: T, upd: Partial<T>): T {\r\n  const update = isObjectGuard(upd) ? upd : {};\r\n\r\n  if (!isObjectGuard(object) && isObjectGuard(upd)) {\r\n    console.warn(`Patch: original value ${object} is not an object.`);\r\n    return { ...update } as T;\r\n  }\r\n\r\n  if (!isObjectGuard(object) && !isObjectGuard(upd)) {\r\n    console.warn(\r\n      `Patch: original value ${object} and updates ${upd} are not objects.`\r\n    );\r\n    return object;\r\n  }\r\n\r\n  return { ...object, ...update };\r\n}\r\n"]}