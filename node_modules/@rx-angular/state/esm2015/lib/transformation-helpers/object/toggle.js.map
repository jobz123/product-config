{"version":3,"file":"toggle.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/transformation-helpers/object/toggle.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AAEH,MAAM,UAAU,MAAM,CACpB,MAAS,EACT,GAAuC;IAEvC,MAAM,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,UAAU,GAAG,OAAO,CAAI,GAAG,CAAC,CAAC;IACnC,MAAM,aAAa,GAAG,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAE,EAAQ,CAAC;IAE1D,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,CAAC,IAAI,CAAC,2BAA2B,MAAM,qBAAqB,CAAC,CAAC;KACtE;IAED,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,CAAC,IAAI,CAAC,yBAAyB,GAAG,eAAe,CAAC,CAAC;KAC3D;IAED,IAAI,UAAU,IAAI,OAAO,aAAa,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;QACzD,OAAO,CAAC,IAAI,CAAC,6BAA6B,GAAG,qBAAqB,CAAC,CAAC;KACrE;IAED,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE;QACrC,OAAO,MAAM,CAAC;KACf;IAED,IACE,UAAU;QACV,CAAC,OAAO,aAAa,CAAC,GAAG,CAAC,KAAK,SAAS;YACtC,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EACrC;QACA,uCAAY,aAAa,KAAE,CAAC,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,IAAG;KACzD;IAED,yBAAY,aAAa,EAAG;AAC9B,CAAC","sourcesContent":["import { OnlyKeysOfSpecificType } from '../interfaces/only-keys-of-specific-type';\r\nimport { isDefined, isKeyOf, isObjectGuard } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Toggles a boolean property in the object.\r\n * Accepts object of type T and key value of which is boolean.\r\n * Toggles the property and returns a shallow copy of an object, while not mutating the original one.\r\n *\r\n * @example\r\n *\r\n * const state = {items: [1,2,3], loading: true};\r\n *\r\n * const updatedState = toggle(state, 'loading');\r\n *\r\n * // updatedState will be:\r\n * // {items: [1,2,3], loading: false};\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *    readonly loadingChange$ = new Subject();\r\n *\r\n *    constructor(\r\n *      private state: RxState<ComponentState>\r\n *    ) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        this.api.loadingChange$,\r\n *        (state, _) => {\r\n *            return toggle(state, 'isLoading');\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    toggleLoading(): void {\r\n *      this.set(toggle(state, 'isLoading'));\r\n *    }\r\n * }\r\n *\r\n * @returns T\r\n *\r\n * @docsPage toggle\r\n * @docsCategory transformation-helpers\r\n */\r\n\r\nexport function toggle<T extends object>(\r\n  object: T,\r\n  key: OnlyKeysOfSpecificType<T, boolean>\r\n): T {\r\n  const objectIsObject = isObjectGuard(object);\r\n  const keyIsValid = isKeyOf<T>(key);\r\n  const initialObject = objectIsObject ? object : ({} as T);\r\n\r\n  if (!objectIsObject) {\r\n    console.warn(`Toggle: original value (${object}) is not an object.`);\r\n  }\r\n\r\n  if (!keyIsValid) {\r\n    console.warn(`Toggle: key argument (${key}) is invalid.`);\r\n  }\r\n\r\n  if (keyIsValid && typeof initialObject[key] !== 'boolean') {\r\n    console.warn(`Toggle: value of the key (${key}) is not a boolean.`);\r\n  }\r\n\r\n  if (!isDefined(object) && !keyIsValid) {\r\n    return object;\r\n  }\r\n\r\n  if (\r\n    keyIsValid &&\r\n    (typeof initialObject[key] === 'boolean' ||\r\n      !initialObject.hasOwnProperty(key))\r\n  ) {\r\n    return { ...initialObject, [key]: !initialObject[key] };\r\n  }\r\n\r\n  return { ...initialObject };\r\n}\r\n"]}