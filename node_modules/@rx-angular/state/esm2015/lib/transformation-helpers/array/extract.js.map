{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/transformation-helpers/array/extract.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACF,MAAM,UAAU,OAAO,CACtB,KAAU,EACV,IAAa;IAEb,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAE9D,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO,CAAC,IAAI,CAAC,4BAA4B,KAAK,oBAAoB,CAAC,CAAC;QACpE,OAAO,SAAgB,CAAC;KACzB;IAED,MAAM,aAAa,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAChE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAI,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAC9C,CAAC;IACF,MAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;IAEpC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QACjD,OAAO,SAAgB,CAAC;KACzB;IAED,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACtB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,MAAM,MAAM,GAAG,EAAgB,CAAC;QAEhC,KAAI,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YACtB,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;SACnD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CACA,CAAC;AACJ,CAAC","sourcesContent":["import { isDefined, isKeyOf } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Accepts an array of objects of type T and single key or array of keys (K extends keyof T).\r\n * The `exctract` method is pure and immutable, thus not touching the input values and returning a shallow\r\n * copy of the extracted source.\r\n *\r\n * @example\r\n *\r\n * const cats = [{id: 1, type: 'cat', name: 'Fluffy'}, {id: 2, type: 'cat', name: 'Emma'}];\r\n *\r\n * const catsWithoutTypes = extract(cats, ['name', 'id']);\r\n *\r\n * // catsWithoutTypes will be:\r\n * // [{id: 1, name: 'Fluffy'}, {id: 2, name: 'Emma'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class AnimalsListComponent {\r\n *\r\n *    constructor(private state: RxState<ComponentState>, private api: ApiService) {\r\n *      state.connect(\r\n *        'animals'\r\n *        this.api.getAnimals(),\r\n *        (state, animals) => extract(animals, ['id', 'name'])\r\n *      );\r\n *    }\r\n * }\r\n *\r\n * @returns T\r\n *\r\n * @docsPage slice\r\n * @docsCategory transformation-helpers\r\n */\r\n export function extract<T extends object, K extends keyof T>(\r\n  array: T[],\r\n  keys: K | K[]\r\n): Pick<T, K>[] {\r\n  const arrayIsArray = isDefined(array) && Array.isArray(array);\r\n\r\n  if (!arrayIsArray) {\r\n    console.warn(`extract: original value (${array}) is not an array.`);\r\n    return undefined as any;\r\n  }\r\n\r\n  const sanitizedKeys = (Array.isArray(keys) ? keys : [keys]).filter(\r\n    k => isKeyOf<T>(k) && array.some(i => k in i)\r\n  );\r\n  const length = sanitizedKeys.length;\r\n\r\n  if (!sanitizedKeys.length) {\r\n    console.warn(`extract: provided keys not found`);\r\n    return undefined as any;\r\n  }\r\n\r\n  return array.map(item => {\r\n    let i = 0;\r\n    const result = {} as Pick<T, K>;\r\n\r\n    for(i; i < length; i++) {\r\n      result[sanitizedKeys[i]] = item[sanitizedKeys[i]];\r\n    }\r\n\r\n    return result;\r\n  }\r\n  );\r\n}\r\n"]}