{"version":3,"file":"remove.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/transformation-helpers/array/remove.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AACvC,OAAO,EAAE,cAAc,EAAE,MAAM,mCAAmC,CAAC;AAEnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6EG;AACH,MAAM,UAAU,MAAM,CACpB,MAAW,EACX,KAAgC,EAChC,OAA2B;IAE3B,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC;QACnC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;YACpB,CAAC,CAAC,KAAK;YACP,CAAC,CAAC,CAAC,KAAK,CAAC;QACX,CAAC,CAAC,EAAE,CAAC;IACP,MAAM,YAAY,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAE5C,IAAI,YAAY,EAAE;QAChB,OAAO,CAAC,IAAI,CAAC,2BAA2B,MAAM,mBAAmB,CAAC,CAAC;QACnE,OAAO,MAAM,CAAC;KACf;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,EAAE;QACpC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CACjC,cAAc,CAAC,IAAS,EAAE,YAAY,EAAE,OAAO,CAAC,CACjD,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { ComparableData } from '../interfaces/comparable-data-type';\r\nimport { isDefined } from '../../core';\r\nimport { valuesComparer } from '../_internals/valuesComparer.util';\r\n\r\n/**\r\n * @description\r\n * Removes one or multiple items from an array T[].\r\n * For comparison you can provide a key, an array of keys or a custom comparison function that should return true if items match.\r\n * If no comparison data is provided, an equality check is used by default.\r\n * Returns a shallow copy of the updated array T[], and does not mutate the original one.\r\n *\r\n * @example\r\n * // Removing value without comparison data\r\n *\r\n * const items = [1,2,3,4,5];\r\n *\r\n * const updatedItems = remove(items, [1,2,3]);\r\n *\r\n * // updatedItems will be: [4,5];\r\n *\r\n * @example\r\n * // Removing values with comparison function\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const realCreatures = remove(creatures, nonExistingCreatures, (a, b) => a.id === b.id);\r\n *\r\n * // realCreatures will be: [{id: 1, type: 'cat'}];\r\n *\r\n * @example\r\n * // Removing values with key\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const realCreatures = remove(creatures, nonExistingCreatures, 'id');\r\n *\r\n * // realCreatures will be: [{id: 1, type: 'cat'}];\r\n *\r\n * @example\r\n * // Removing values with array of keys\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\r\n *\r\n * const realCreatures = remove(creatures, nonExistingCreatures, ['id', 'type']);\r\n *\r\n * // realCreatures will be: [{id: 1, type: 'cat'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *\r\n *    readonly removeCreature$ = new Subject<Creature>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creatures',\r\n *        this.removeCreature$,\r\n *        ({ creatures }, creatureToRemove) => {\r\n *            return remove(creatures, creatureToRemove, (a, b) => a.id === b.id);\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    removeCreature(creatureToRemove: Creature): void {\r\n *        this.state.set({ creatures: remove(this.state.get().creatures, creatureToRemove, (a, b) => a.id === b.id)});\r\n *    }\r\n * }\r\n *\r\n * @returns T[]\r\n *\r\n * @docsPage remove\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function remove<T>(\r\n  source: T[],\r\n  scrap: Partial<T>[] | Partial<T>,\r\n  compare?: ComparableData<T>\r\n): T[] {\r\n  const scrapAsArray = isDefined(scrap)\r\n    ? Array.isArray(scrap)\r\n      ? scrap\r\n      : [scrap]\r\n    : [];\r\n  const invalidInput = !Array.isArray(source);\r\n\r\n  if (invalidInput) {\r\n    console.warn(`Remove: original value (${source}) is not an array`);\r\n    return source;\r\n  }\r\n\r\n  return source.filter((existingItem) => {\r\n    return !scrapAsArray.some((item) =>\r\n      valuesComparer(item as T, existingItem, compare)\r\n    );\r\n  });\r\n}\r\n"]}