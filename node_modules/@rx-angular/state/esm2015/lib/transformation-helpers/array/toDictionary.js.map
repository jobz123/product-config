{"version":3,"file":"toDictionary.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/transformation-helpers/array/toDictionary.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CG;AACH,MAAM,UAAU,YAAY,CAC1B,MAAW,EACX,GAGqC;IAErC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;QACtB,OAAO,MAAM,CAAC;KACf;IAED,MAAM,WAAW,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;IAEnC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,WAAW,IAAI,CAAC,OAAO,CAAI,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;QACxE,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;SACxD;QACD,OAAO,EAAE,CAAC;KACX;IAED,MAAM,UAAU,GAAyB,EAAE,CAAC;IAC5C,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,KAAK,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QACvB,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KAChE;IAED,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import { OnlyKeysOfSpecificType } from '../interfaces/only-keys-of-specific-type';\r\nimport { isDefined, isKeyOf } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Converts an array of objects to a dictionary {[key: string]: T}.\r\n * Accepts array T[] and key of type string, number or symbol as inputs.\r\n *\r\n *\r\n * @example\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'parrot'}];\r\n *\r\n * const creaturesDictionary = toDictionary(creatures, 'id');\r\n *\r\n * // creaturesDictionary will be:\r\n * // {\r\n * //  1: {id: 1, type: 'cat'},\r\n * //  2: {id: 2, type: 'dog'},\r\n * //  3: {id: 3, type: 'parrot'}\r\n * // };\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *\r\n *    readonly convertToDictionary$ = new Subject();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creaturesDictionary',\r\n *        this.convertToDictionary$,\r\n *        ({ creatures }) => {\r\n *            return toDictionary(creatures, 'id');\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    convertToDictionary(): void {\r\n *        this.state.set({ creaturesDictionary: toDictionary(this.state.get().creatures, 'id'});\r\n *    }\r\n * }\r\n *\r\n * @see {@link OnlyKeysOfSpecificType}\r\n * @param {OnlyKeysOfSpecificType<T, S>} key\r\n * @returns { [key: string]: T[] }\r\n * @docsPage toDictionary\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function toDictionary<T extends object>(\r\n  source: T[],\r\n  key:\r\n    | OnlyKeysOfSpecificType<T, number>\r\n    | OnlyKeysOfSpecificType<T, string>\r\n    | OnlyKeysOfSpecificType<T, symbol>\r\n): { [key: string]: T } {\r\n  if (!isDefined(source)) {\r\n    return source;\r\n  }\r\n\r\n  const sourceEmpty = !source.length;\r\n\r\n  if (!Array.isArray(source) || sourceEmpty || !isKeyOf<T>(source[0][key])) {\r\n    if (!sourceEmpty) {\r\n      console.warn('ToDictionary: unexpected input params.');\r\n    }\r\n    return {};\r\n  }\r\n\r\n  const dictionary: { [key: string]: T } = {};\r\n  const length = source.length;\r\n  let i = 0;\r\n\r\n  for (i; i < length; i++) {\r\n    dictionary[`${source[i][key]}`] = Object.assign({}, source[i]);\r\n  }\r\n\r\n  return dictionary;\r\n}\r\n"]}