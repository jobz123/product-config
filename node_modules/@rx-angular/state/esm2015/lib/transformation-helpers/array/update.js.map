{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/transformation-helpers/array/update.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,mCAAmC,CAAC;AAEnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuEG;AACH,MAAM,UAAU,MAAM,CACpB,MAAW,EACX,OAAkC,EAClC,OAA2B;IAE3B,MAAM,cAAc,GAAG,OAAO,IAAI,IAAI,CAAC;IACvC,MAAM,cAAc,GAAG,cAAc;QACnC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;YACtB,CAAC,CAAC,OAAO;YACT,CAAC,CAAC,CAAC,OAAO,CAAC;QACb,CAAC,CAAC,EAAE,CAAC;IAEP,MAAM,aAAa,GAAG,MAAM,IAAI,IAAI,CAAC;IACrC,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC5C,MAAM,YAAY,GAChB,CAAC,aAAa,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,CAAC;IAEvE,IAAI,aAAa,IAAI,CAAC,aAAa,EAAE;QACnC,OAAO,CAAC,IAAI,CAAC,2BAA2B,MAAM,oBAAoB,CAAC,CAAC;KACrE;IAED,IAAI,YAAY,EAAE;QAChB,OAAO,MAAM,CAAC;KACf;IAED,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE;QACjC,MAAM,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CACzC,cAAc,CAAC,IAAS,EAAE,YAAY,EAAE,OAAO,CAAC,CACjD,CAAC;QAEF,IAAI,KAAK,EAAE;YACT,uCAAY,YAAY,GAAK,KAAK,EAAG;SACtC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { ComparableData } from '../interfaces/comparable-data-type';\r\nimport { valuesComparer } from '../_internals/valuesComparer.util';\r\n\r\n/**\r\n * @description\r\n * Updates one or multiple items in an array T[].\r\n * For comparison you can provide key, array of keys or a custom comparison function that should return true if items match.\r\n * If no comparison is provided, an equality check is used by default.\r\n * Returns a shallow copy of the array T[] and updated items, does not mutate the original array.\r\n *\r\n * @example\r\n * // Update with comparison function\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const newCat = {id: 1, type: 'lion'};\r\n *\r\n * const updatedCreatures = update(creatures, newCat, (a, b) => a.id === b.id);\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'lion'}, {id: 2, type: 'dog'}];\r\n *\r\n * @example\r\n * // Update with key\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const newCat = {id: 1, type: 'lion'};\r\n *\r\n * const updatedCreatures = update(creatures, newCat, 'id');\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'lion'}, {id: 2, type: 'dog'}];\r\n *\r\n * @example\r\n * // Update with array of keys\r\n *\r\n * const creatures = [{id: 1, type: 'cat', name: 'Bella'}, {id: 2, type: 'dog', name: 'Sparky'}];\r\n *\r\n * const newCat = {id: 1, type: 'lion', name: 'Bella'};\r\n *\r\n * const updatedCreatures = update(creatures, newCat, ['id', 'name']);\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'lion', name: 'Bella'}, {id: 2, type: 'dog', name: 'Sparky'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *\r\n *    readonly updateCreature$ = new Subject<Creature>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creatures',\r\n *        this.updateCreature$,\r\n *        ({ creatures }, creatureToUpdate) => {\r\n *            return update(creatures, creatureToUpdate, (a, b) => a.id === b.id);\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    updateCreature(creatureToUpdate: Creature): void {\r\n *        this.state.set({ creatures: update(this.state.get().creatures, creatureToUpdate, (a, b) => a.id === b.id)});\r\n *    }\r\n * }\r\n *\r\n * @returns T[]\r\n *\r\n * @docsPage update\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function update<T extends object>(\r\n  source: T[],\r\n  updates: Partial<T>[] | Partial<T>,\r\n  compare?: ComparableData<T>\r\n): T[] {\r\n  const updatesDefined = updates != null;\r\n  const updatesAsArray = updatesDefined\r\n    ? Array.isArray(updates)\r\n      ? updates\r\n      : [updates]\r\n    : [];\r\n\r\n  const sourceDefined = source != null;\r\n  const sourceIsArray = Array.isArray(source);\r\n  const invalidInput =\r\n    !sourceIsArray || source.length === 0 || updatesAsArray.length === 0;\r\n\r\n  if (sourceDefined && !sourceIsArray) {\r\n    console.warn(`Update: Original value (${source}) is not an array.`);\r\n  }\r\n\r\n  if (invalidInput) {\r\n    return source;\r\n  }\r\n\r\n  return source.map((existingItem) => {\r\n    const match = updatesAsArray.find((item) =>\r\n      valuesComparer(item as T, existingItem, compare)\r\n    );\r\n\r\n    if (match) {\r\n      return { ...existingItem, ...match };\r\n    }\r\n\r\n    return existingItem;\r\n  });\r\n}\r\n"]}