{"version":3,"file":"insert.js","sourceRoot":"","sources":["../../../../../../../libs/state/src/lib/transformation-helpers/array/insert.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AAEvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwDG;AACH,MAAM,UAAU,MAAM,CAAI,MAAW,EAAE,OAAgB;IACrD,MAAM,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1C,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC5C,MAAM,YAAY,GAAG,CAAC,aAAa,IAAI,CAAC,cAAc,CAAC;IAEvD,IAAI,CAAC,aAAa,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE;QACvC,OAAO,CAAC,IAAI,CAAC,2BAA2B,MAAM,oBAAoB,CAAC,CAAC;KACrE;IAED,IAAI,YAAY,EAAE;QAChB,OAAO,MAAM,CAAC;KACf;IAED,OAAO;QACL,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAChC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;KAC1E,CAAC;AACJ,CAAC","sourcesContent":["import { isDefined } from '../../core';\r\n\r\n/**\r\n * @description\r\n * Inserts one or multiple items to an array T[].\r\n * Returns a shallow copy of the updated array T[], and does not mutate the original one.\r\n *\r\n * @example\r\n * // Inserting single value\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const updatedCreatures = insert(creatures, {id: 3, type: 'parrot'});\r\n *\r\n * // updatedCreatures will be:\r\n * //  [{id: 1, type: 'cat'}, {id: 2, type: 'dog}, {id: 3, type: 'parrot}];\r\n *\r\n * @example\r\n * // Inserting multiple values\r\n *\r\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];\r\n *\r\n * const updatedCreatures = insert(creatures, [{id: 3, type: 'parrot'}, {id: 4, type: 'hamster'}]);\r\n *\r\n * // updatedCreatures will be:\r\n * // [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'parrot'}, {id: 4, type: 'hamster'}];\r\n *\r\n * @example\r\n * // Usage with RxState\r\n *\r\n * export class ListComponent {\r\n *\r\n *    readonly insertCreature$ = new Subject<void>();\r\n *\r\n *    constructor(private state: RxState<ComponentState>) {\r\n *      // Reactive implementation\r\n *      state.connect(\r\n *        'creatures',\r\n *        this.insertCreature$,\r\n *        ({ creatures }) => {\r\n *            const creatureToAdd = {id: generateId(), name: 'newCreature', type: 'dinosaur' };\r\n *            return insert(creatures, creatureToAdd);\r\n *        }\r\n *      );\r\n *    }\r\n *\r\n *    // Imperative implementation\r\n *    insertCeature(): void {\r\n *        const creatureToAdd = {id: generateId(), name: 'newCreature', type: 'dinosaur' };\r\n *        this.state.set({ creatures: insert(this.state.get().creatures, creatureToAdd)});\r\n *    }\r\n * }\r\n *\r\n *\r\n * @returns T[]\r\n *\r\n * @docsPage insert\r\n * @docsCategory transformation-helpers\r\n */\r\nexport function insert<T>(source: T[], updates: T | T[]): T[] {\r\n  const updatesDefined = isDefined(updates);\r\n  const sourceIsArray = Array.isArray(source);\r\n  const invalidInput = !sourceIsArray && !updatesDefined;\r\n\r\n  if (!sourceIsArray && isDefined(source)) {\r\n    console.warn(`Insert: Original value (${source}) is not an array.`);\r\n  }\r\n\r\n  if (invalidInput) {\r\n    return source;\r\n  }\r\n\r\n  return [\r\n    ...(sourceIsArray ? source : []),\r\n    ...(updatesDefined ? (Array.isArray(updates) ? updates : [updates]) : [])\r\n  ];\r\n}\r\n"]}