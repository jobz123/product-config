import { createEmbeddedView } from './utils';
/**
 * @internal
 *
 * Factory that returns a `ListTemplateManager` for the passed params.
 *
 * @param templateSettings
 */
export function getTemplateHandler(templateSettings) {
    const { viewContainerRef, initialTemplateRef, createViewContext, updateViewContext, patchZone, } = templateSettings;
    const workFactory = patchZone
        ? (work) => patchZone.run(work)
        : (work) => work();
    return {
        updateUnchangedContext,
        insertView,
        moveView,
        removeView,
        getListChanges,
        updateView,
    };
    // =====
    function updateUnchangedContext(index, count) {
        const view = viewContainerRef.get(index);
        workFactory(() => {
            view.context.updateContext({
                count,
                index,
            });
            view.detectChanges();
        });
    }
    function moveView(oldIndex, item, index, count) {
        const oldView = viewContainerRef.get(oldIndex);
        const view = viewContainerRef.move(oldView, index);
        workFactory(() => {
            updateViewContext(item, view, {
                count,
                index,
            });
            view.detectChanges();
        });
    }
    function updateView(item, index, count) {
        const view = viewContainerRef.get(index);
        workFactory(() => {
            updateViewContext(item, view, {
                count,
                index,
            });
            view.detectChanges();
        });
    }
    function removeView(index) {
        return workFactory(() => viewContainerRef.remove(index));
    }
    function insertView(item, index, count) {
        workFactory(() => {
            createEmbeddedView(viewContainerRef, initialTemplateRef, createViewContext(item, {
                count,
                index,
            }), index);
        });
    }
}
/**
 * @internal
 *
 * @param changes
 * @param items
 */
function getListChanges(changes, items) {
    const changedIdxs = new Set();
    const changesArr = [];
    let notifyParent = false;
    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {
        const item = record.item;
        if (record.previousIndex == null) {
            // insert
            changesArr.push(getInsertChange(item, currentIndex === null ? undefined : currentIndex));
            changedIdxs.add(item);
            notifyParent = true;
        }
        else if (currentIndex == null) {
            // remove
            changesArr.push(getRemoveChange(item, adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex));
            changedIdxs.add(item);
            notifyParent = true;
        }
        else if (adjustedPreviousIndex !== null) {
            // move
            changesArr.push(getMoveChange(item, currentIndex, adjustedPreviousIndex));
            changedIdxs.add(item);
            notifyParent = true;
        }
    });
    changes.forEachIdentityChange((record) => {
        const item = record.item;
        if (!changedIdxs.has(item)) {
            changesArr.push(getUpdateChange(item, record.currentIndex));
            changedIdxs.add(item);
        }
    });
    items.forEach((item, index) => {
        if (!changedIdxs.has(item)) {
            changesArr.push(getUnchangedChange(item, index));
        }
    });
    return [changesArr, notifyParent];
    // ==========
    function getMoveChange(item, currentIndex, adjustedPreviousIndex) {
        return [
            2 /* move */,
            [item, currentIndex, adjustedPreviousIndex],
        ];
    }
    function getUpdateChange(item, currentIndex) {
        return [3 /* update */, [item, currentIndex]];
    }
    function getUnchangedChange(item, index) {
        return [4 /* context */, [item, index]];
    }
    function getInsertChange(item, currentIndex) {
        return [
            0 /* insert */,
            [item, currentIndex === null ? undefined : currentIndex],
        ];
    }
    function getRemoveChange(item, adjustedPreviousIndex) {
        return [
            1 /* remove */,
            [item, adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex],
        ];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC12aWV3LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay90ZW1wbGF0ZS9zcmMvbGliL2xpc3Qtdmlldy1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUU3Qzs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLGdCQUEwQztJQUUxQyxNQUFNLEVBQ0osZ0JBQWdCLEVBQ2hCLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIsaUJBQWlCLEVBQ2pCLFNBQVMsR0FDVixHQUFHLGdCQUFnQixDQUFDO0lBRXJCLE1BQU0sV0FBVyxHQUFHLFNBQVM7UUFDM0IsQ0FBQyxDQUFDLENBQUMsSUFBa0IsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUMsSUFBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFbkMsT0FBTztRQUNMLHNCQUFzQjtRQUN0QixVQUFVO1FBQ1YsUUFBUTtRQUNSLFVBQVU7UUFDVixjQUFjO1FBQ2QsVUFBVTtLQUNYLENBQUM7SUFFRixRQUFRO0lBRVIsU0FBUyxzQkFBc0IsQ0FBQyxLQUFhLEVBQUUsS0FBYTtRQUMxRCxNQUFNLElBQUksR0FBdUIsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdELFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDZixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztnQkFDekIsS0FBSztnQkFDTCxLQUFLO2FBQ04sQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFNBQVMsUUFBUSxDQUNmLFFBQWdCLEVBQ2hCLElBQU8sRUFDUCxLQUFh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LENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsU0FBUyxlQUFlLENBQ3RCLElBQU8sRUFDUCxZQUFvQjtRQUVwQixPQUFPOztZQUVMLENBQUMsSUFBSSxFQUFFLFlBQVksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1NBQ3pELENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxlQUFlLENBQ3RCLElBQU8sRUFDUCxxQkFBNkI7UUFFN0IsT0FBTzs7WUFFTCxDQUFDLElBQUksRUFBRSxxQkFBcUIsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUM7U0FDM0UsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBSeExpc3RUZW1wbGF0ZUNoYW5nZSxcclxuICBSeExpc3RUZW1wbGF0ZUNoYW5nZXMsXHJcbiAgUnhMaXN0VGVtcGxhdGVDaGFuZ2VUeXBlLFxyXG4gIFJ4VGVtcGxhdGVTZXR0aW5ncyxcclxufSBmcm9tICcuL21vZGVsJztcclxuaW1wb3J0IHsgRW1iZWRkZWRWaWV3UmVmLCBJdGVyYWJsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUnhMaXN0Vmlld0NvbnRleHQgfSBmcm9tICcuL2xpc3Qtdmlldy1jb250ZXh0JztcclxuaW1wb3J0IHsgY3JlYXRlRW1iZWRkZWRWaWV3IH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqXHJcbiAqIEZhY3RvcnkgdGhhdCByZXR1cm5zIGEgYExpc3RUZW1wbGF0ZU1hbmFnZXJgIGZvciB0aGUgcGFzc2VkIHBhcmFtcy5cclxuICpcclxuICogQHBhcmFtIHRlbXBsYXRlU2V0dGluZ3NcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUZW1wbGF0ZUhhbmRsZXI8QyBleHRlbmRzIFJ4TGlzdFZpZXdDb250ZXh0PFQ+LCBUPihcclxuICB0ZW1wbGF0ZVNldHRpbmdzOiBSeFRlbXBsYXRlU2V0dGluZ3M8VCwgQz5cclxuKTogTGlzdFRlbXBsYXRlTWFuYWdlcjxUPiB7XHJcbiAgY29uc3Qge1xyXG4gICAgdmlld0NvbnRhaW5lclJlZixcclxuICAgIGluaXRpYWxUZW1wbGF0ZVJlZixcclxuICAgIGNyZWF0ZVZpZXdDb250ZXh0LFxyXG4gICAgdXBkYXRlVmlld0NvbnRleHQsXHJcbiAgICBwYXRjaFpvbmUsXHJcbiAgfSA9IHRlbXBsYXRlU2V0dGluZ3M7XHJcblxyXG4gIGNvbnN0IHdvcmtGYWN0b3J5ID0gcGF0Y2hab25lXHJcbiAgICA/ICh3b3JrOiBWb2lkRnVuY3Rpb24pID0+IHBhdGNoWm9uZS5ydW4od29yaylcclxuICAgIDogKHdvcms6IFZvaWRGdW5jdGlvbikgPT4gd29yaygpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgdXBkYXRlVW5jaGFuZ2VkQ29udGV4dCxcclxuICAgIGluc2VydFZpZXcsXHJcbiAgICBtb3ZlVmlldyxcclxuICAgIHJlbW92ZVZpZXcsXHJcbiAgICBnZXRMaXN0Q2hhbmdlcyxcclxuICAgIHVwZGF0ZVZpZXcsXHJcbiAgfTtcclxuXHJcbiAgLy8gPT09PT1cclxuXHJcbiAgZnVuY3Rpb24gdXBkYXRlVW5jaGFuZ2VkQ29udGV4dChpbmRleDogbnVtYmVyLCBjb3VudDogbnVtYmVyKSB7XHJcbiAgICBjb25zdCB2aWV3ID0gPEVtYmVkZGVkVmlld1JlZjxDPj52aWV3Q29udGFpbmVyUmVmLmdldChpbmRleCk7XHJcbiAgICB3b3JrRmFjdG9yeSgoKSA9PiB7XHJcbiAgICAgIHZpZXcuY29udGV4dC51cGRhdGVDb250ZXh0KHtcclxuICAgICAgICBjb3VudCxcclxuICAgICAgICBpbmRleCxcclxuICAgICAgfSk7XHJcbiAgICAgIHZpZXcuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBtb3ZlVmlldyhcclxuICAgIG9sZEluZGV4OiBudW1iZXIsXHJcbiAgICBpdGVtOiBULFxyXG4gICAgaW5kZXg6IG51bWJlcixcclxuICAgIGNvdW50OiBudW1iZXJcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IG9sZFZpZXcgPSB2aWV3Q29udGFpbmVyUmVmLmdldChvbGRJbmRleCk7XHJcbiAgICBjb25zdCB2aWV3ID0gPEVtYmVkZGVkVmlld1JlZjxDPj52aWV3Q29udGFpbmVyUmVmLm1vdmUob2xkVmlldywgaW5kZXgpO1xyXG4gICAgd29ya0ZhY3RvcnkoKCkgPT4ge1xyXG4gICAgICB1cGRhdGVWaWV3Q29udGV4dChpdGVtLCB2aWV3LCB7XHJcbiAgICAgICAgY291bnQsXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICAgIH0pO1xyXG4gICAgICB2aWV3LmRldGVjdENoYW5nZXMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdXBkYXRlVmlldyhpdGVtOiBULCBpbmRleDogbnVtYmVyLCBjb3VudDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCB2aWV3ID0gPEVtYmVkZGVkVmlld1JlZjxDPj52aWV3Q29udGFpbmVyUmVmLmdldChpbmRleCk7XHJcbiAgICB3b3JrRmFjdG9yeSgoKSA9PiB7XHJcbiAgICAgIHVwZGF0ZVZpZXdDb250ZXh0KGl0ZW0sIHZpZXcsIHtcclxuICAgICAgICBjb3VudCxcclxuICAgICAgICBpbmRleCxcclxuICAgICAgfSk7XHJcbiAgICAgIHZpZXcuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZW1vdmVWaWV3KGluZGV4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHJldHVybiB3b3JrRmFjdG9yeSgoKSA9PiB2aWV3Q29udGFpbmVyUmVmLnJlbW92ZShpbmRleCkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW5zZXJ0VmlldyhpdGVtOiBULCBpbmRleDogbnVtYmVyLCBjb3VudDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB3b3JrRmFjdG9yeSgoKSA9PiB7XHJcbiAgICAgIGNyZWF0ZUVtYmVkZGVkVmlldyhcclxuICAgICAgICB2aWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgIGluaXRpYWxUZW1wbGF0ZVJlZixcclxuICAgICAgICBjcmVhdGVWaWV3Q29udGV4dChpdGVtLCB7XHJcbiAgICAgICAgICBjb3VudCxcclxuICAgICAgICAgIGluZGV4LFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIGluZGV4XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICpcclxuICogQW4gb2JqZWN0IHRoYXQgaG9sZHMgbWV0aG9kcyBuZWVkZWQgdG8gaW50cm9kdWNlIGFjdGlvbnMgdG8gYSBsaXN0IGUuZy4gbW92ZSwgcmVtb3ZlLCBpbnNlcnRcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGlzdFRlbXBsYXRlTWFuYWdlcjxUPiB7XHJcbiAgdXBkYXRlVW5jaGFuZ2VkQ29udGV4dChpbmRleDogbnVtYmVyLCBjb3VudDogbnVtYmVyKTogdm9pZDtcclxuXHJcbiAgaW5zZXJ0VmlldyhpdGVtOiBULCBpbmRleDogbnVtYmVyLCBjb3VudDogbnVtYmVyKTogdm9pZDtcclxuXHJcbiAgbW92ZVZpZXcob2xkSW5kZXg6IG51bWJlciwgaXRlbTogVCwgaW5kZXg6IG51bWJlciwgY291bnQ6IG51bWJlcik6IHZvaWQ7XHJcblxyXG4gIHVwZGF0ZVZpZXcoaXRlbTogVCwgaW5kZXg6IG51bWJlciwgY291bnQ6IG51bWJlcik6IHZvaWQ7XHJcblxyXG4gIHJlbW92ZVZpZXcoaW5kZXg6IG51bWJlcik6IHZvaWQ7XHJcblxyXG4gIGdldExpc3RDaGFuZ2VzKFxyXG4gICAgY2hhbmdlczogSXRlcmFibGVDaGFuZ2VzPFQ+LFxyXG4gICAgaXRlbXM6IFRbXVxyXG4gICk6IFJ4TGlzdFRlbXBsYXRlQ2hhbmdlcztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKlxyXG4gKiBAcGFyYW0gY2hhbmdlc1xyXG4gKiBAcGFyYW0gaXRlbXNcclxuICovXHJcbmZ1bmN0aW9uIGdldExpc3RDaGFuZ2VzPFQ+KFxyXG4gIGNoYW5nZXM6IEl0ZXJhYmxlQ2hhbmdlczxUPixcclxuICBpdGVtczogVFtdXHJcbik6IFJ4TGlzdFRlbXBsYXRlQ2hhbmdlcyB7XHJcbiAgY29uc3QgY2hhbmdlZElkeHMgPSBuZXcgU2V0PFQ+KCk7XHJcbiAgY29uc3QgY2hhbmdlc0FycjogUnhMaXN0VGVtcGxhdGVDaGFuZ2VbXSA9IFtdO1xyXG4gIGxldCBub3RpZnlQYXJlbnQgPSBmYWxzZTtcclxuICBjaGFuZ2VzLmZvckVhY2hPcGVyYXRpb24oKHJlY29yZCwgYWRqdXN0ZWRQcmV2aW91c0luZGV4LCBjdXJyZW50SW5kZXgpID0+IHtcclxuICAgIGNvbnN0IGl0ZW0gPSByZWNvcmQuaXRlbTtcclxuICAgIGlmIChyZWNvcmQucHJldmlvdXNJbmRleCA9PSBudWxsKSB7XHJcbiAgICAgIC8vIGluc2VydFxyXG4gICAgICBjaGFuZ2VzQXJyLnB1c2goZ2V0SW5zZXJ0Q2hhbmdlKGl0ZW0sIGN1cnJlbnRJbmRleCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGN1cnJlbnRJbmRleCkpO1xyXG4gICAgICBjaGFuZ2VkSWR4cy5hZGQoaXRlbSk7XHJcbiAgICAgIG5vdGlmeVBhcmVudCA9IHRydWU7XHJcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRJbmRleCA9PSBudWxsKSB7XHJcbiAgICAgIC8vIHJlbW92ZVxyXG4gICAgICBjaGFuZ2VzQXJyLnB1c2goZ2V0UmVtb3ZlQ2hhbmdlKGl0ZW0sIGFkanVzdGVkUHJldmlvdXNJbmRleCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFkanVzdGVkUHJldmlvdXNJbmRleCkpO1xyXG4gICAgICBjaGFuZ2VkSWR4cy5hZGQoaXRlbSk7XHJcbiAgICAgIG5vdGlmeVBhcmVudCA9IHRydWU7XHJcbiAgICB9IGVsc2UgaWYgKGFkanVzdGVkUHJldmlvdXNJbmRleCAhPT0gbnVsbCkge1xyXG4gICAgICAvLyBtb3ZlXHJcbiAgICAgIGNoYW5nZXNBcnIucHVzaChnZXRNb3ZlQ2hhbmdlKGl0ZW0sIGN1cnJlbnRJbmRleCwgYWRqdXN0ZWRQcmV2aW91c0luZGV4KSk7XHJcbiAgICAgIGNoYW5nZWRJZHhzLmFkZChpdGVtKTtcclxuICAgICAgbm90aWZ5UGFyZW50ID0gdHJ1ZTtcclxuICAgIH1cclxuICB9KTtcclxuICBjaGFuZ2VzLmZvckVhY2hJZGVudGl0eUNoYW5nZSgocmVjb3JkKSA9PiB7XHJcbiAgICBjb25zdCBpdGVtID0gcmVjb3JkLml0ZW07XHJcbiAgICBpZiAoIWNoYW5nZWRJZHhzLmhhcyhpdGVtKSkge1xyXG4gICAgICBjaGFuZ2VzQXJyLnB1c2goZ2V0VXBkYXRlQ2hhbmdlKGl0ZW0sIHJlY29yZC5jdXJyZW50SW5kZXgpKTtcclxuICAgICAgY2hhbmdlZElkeHMuYWRkKGl0ZW0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIGl0ZW1zLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICBpZiAoIWNoYW5nZWRJZHhzLmhhcyhpdGVtKSkge1xyXG4gICAgICBjaGFuZ2VzQXJyLnB1c2goZ2V0VW5jaGFuZ2VkQ2hhbmdlKGl0ZW0sIGluZGV4KSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIFtjaGFuZ2VzQXJyLCBub3RpZnlQYXJlbnRdO1xyXG5cclxuICAvLyA9PT09PT09PT09XHJcblxyXG4gIGZ1bmN0aW9uIGdldE1vdmVDaGFuZ2UoXHJcbiAgICBpdGVtOiBULFxyXG4gICAgY3VycmVudEluZGV4OiBudW1iZXIsXHJcbiAgICBhZGp1c3RlZFByZXZpb3VzSW5kZXg6IG51bWJlclxyXG4gICk6IFJ4TGlzdFRlbXBsYXRlQ2hhbmdlIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIFJ4TGlzdFRlbXBsYXRlQ2hhbmdlVHlwZS5tb3ZlLFxyXG4gICAgICBbaXRlbSwgY3VycmVudEluZGV4LCBhZGp1c3RlZFByZXZpb3VzSW5kZXhdLFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldFVwZGF0ZUNoYW5nZShcclxuICAgIGl0ZW06IFQsXHJcbiAgICBjdXJyZW50SW5kZXg6IG51bWJlclxyXG4gICk6IFJ4TGlzdFRlbXBsYXRlQ2hhbmdlIHtcclxuICAgIHJldHVybiBbUnhMaXN0VGVtcGxhdGVDaGFuZ2VUeXBlLnVwZGF0ZSwgW2l0ZW0sIGN1cnJlbnRJbmRleF1dO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0VW5jaGFuZ2VkQ2hhbmdlKGl0ZW06IFQsIGluZGV4OiBudW1iZXIpOiBSeExpc3RUZW1wbGF0ZUNoYW5nZSB7XHJcbiAgICByZXR1cm4gW1J4TGlzdFRlbXBsYXRlQ2hhbmdlVHlwZS5jb250ZXh0LCBbaXRlbSwgaW5kZXhdXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldEluc2VydENoYW5nZShcclxuICAgIGl0ZW06IFQsXHJcbiAgICBjdXJyZW50SW5kZXg6IG51bWJlclxyXG4gICk6IFJ4TGlzdFRlbXBsYXRlQ2hhbmdlIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIFJ4TGlzdFRlbXBsYXRlQ2hhbmdlVHlwZS5pbnNlcnQsXHJcbiAgICAgIFtpdGVtLCBjdXJyZW50SW5kZXggPT09IG51bGwgPyB1bmRlZmluZWQgOiBjdXJyZW50SW5kZXhdLFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldFJlbW92ZUNoYW5nZShcclxuICAgIGl0ZW06IFQsXHJcbiAgICBhZGp1c3RlZFByZXZpb3VzSW5kZXg6IG51bWJlclxyXG4gICk6IFJ4TGlzdFRlbXBsYXRlQ2hhbmdlIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIFJ4TGlzdFRlbXBsYXRlQ2hhbmdlVHlwZS5yZW1vdmUsXHJcbiAgICAgIFtpdGVtLCBhZGp1c3RlZFByZXZpb3VzSW5kZXggPT09IG51bGwgPyB1bmRlZmluZWQgOiBhZGp1c3RlZFByZXZpb3VzSW5kZXhdLFxyXG4gICAgXTtcclxuICB9XHJcbn1cclxuIl19