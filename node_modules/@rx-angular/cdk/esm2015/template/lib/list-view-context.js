import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { distinctUntilChanged, map, pluck } from 'rxjs/operators';
const computeFirst = ({ count, index }) => index === 0;
const ɵ0 = computeFirst;
const computeLast = ({ count, index }) => index === count - 1;
const ɵ1 = computeLast;
const computeEven = ({ count, index }) => index % 2 === 0;
const ɵ2 = computeEven;
export class RxDefaultListViewContext {
    constructor(item, customProps) {
        this.item = item;
        this._item = new ReplaySubject(1);
        this.item$ = this._item.asObservable();
        this._context$ = new BehaviorSubject({
            index: -1,
            count: -1,
        });
        this.select = (props) => {
            return this.item$.pipe(pluck(...props));
        };
        // tslint:disable-next-line:no-unused-expression
        this.$implicit = item;
        if (customProps) {
            this.updateContext(customProps);
        }
    }
    set $implicit($implicit) {
        this._$implicit = $implicit;
        this._item.next($implicit);
    }
    get $implicit() {
        return this._$implicit;
    }
    get $complete() {
        return this._$complete;
    }
    get $error() {
        return this._$error;
    }
    get $suspense() {
        return this._$suspense;
    }
    get index() {
        return this._context$.getValue().index;
    }
    get count() {
        return this._context$.getValue().count;
    }
    get first() {
        return computeFirst(this._context$.getValue());
    }
    get last() {
        return computeLast(this._context$.getValue());
    }
    get even() {
        return computeEven(this._context$.getValue());
    }
    get odd() {
        return !this.even;
    }
    get index$() {
        return this._context$.pipe(pluck('index'), distinctUntilChanged());
    }
    get count$() {
        return this._context$.pipe(pluck('count'), distinctUntilChanged());
    }
    get first$() {
        return this._context$.pipe(map(computeFirst), distinctUntilChanged());
    }
    get last$() {
        return this._context$.pipe(map(computeLast), distinctUntilChanged());
    }
    get even$() {
        return this._context$.pipe(map(computeEven), distinctUntilChanged());
    }
    get odd$() {
        return this.even$.pipe(map((even) => !even));
    }
    updateContext(newProps) {
        this._context$.next(Object.assign(Object.assign({}, this._context$.getValue()), newProps));
    }
}
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,