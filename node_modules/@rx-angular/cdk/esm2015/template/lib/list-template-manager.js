import { combineLatest, merge, Observable, of } from 'rxjs';
import { catchError, distinctUntilChanged, ignoreElements, map, switchMap, tap } from 'rxjs/operators';
import { onStrategy, strategyHandling } from '@rx-angular/cdk/render-strategies';
import { getTemplateHandler } from './list-view-handler';
import { createErrorHandler } from './render-error';
import { getTNode, notifyAllParentsIfNeeded, notifyInjectingParentIfNeeded, } from './utils';
export function createListTemplateManager(config) {
    const { templateSettings, renderSettings, trackBy, iterableDiffers } = config;
    const { defaultStrategyName, strategies, cdRef: injectingViewCdRef, patchZone, parent, eRef, } = renderSettings;
    const errorHandler = createErrorHandler(renderSettings.errorHandler);
    const strategyHandling$ = strategyHandling(defaultStrategyName, strategies);
    const differ = iterableDiffers.find([]).create(trackBy);
    //               type,  context
    const tNode = parent
        ? getTNode(injectingViewCdRef, eRef.nativeElement)
        : false;
    /* TODO (regarding createView): this is currently not in use. for the list-manager this would mean to provide
     functions for not only create. developers than should have to provide create, move, remove,... the whole thing.
     i don't know if this is the right decision for a first RC */
    const listViewHandler = getTemplateHandler(Object.assign(Object.assign({}, templateSettings), { initialTemplateRef: templateSettings.templateRef, patchZone }));
    const viewContainerRef = templateSettings.viewContainerRef;
    let notifyParent = false;
    let changesArr;
    let partiallyFinished = false;
    return {
        nextStrategy(nextConfig) {
            strategyHandling$.next(nextConfig);
        },
        render(values$) {
            return values$.pipe(render());
        },
    };
    function render() {
        return (o$) => combineLatest([o$, strategyHandling$.strategy$.pipe(distinctUntilChanged())]).pipe(
        // map iterable to latest diff
        map(([iterable, strategy]) => {
            if (partiallyFinished) {
                const currentIterable = [];
                for (let i = 0, ilen = viewContainerRef.length; i < ilen; i++) {
                    const viewRef = viewContainerRef.get(i);
                    currentIterable[i] = viewRef.context.$implicit;
                }
                differ.diff(currentIterable);
            }
            return {
                changes: differ.diff(iterable),
                items: iterable != null && Array.isArray(iterable) ? iterable : [],
                strategy
            };
        }), 
        // Cancel old renders
        switchMap(({ changes, items, strategy }) => {
            if (!changes) {
                return of([]);
            }
            const listChanges = listViewHandler.getListChanges(changes, items);
            changesArr = listChanges[0];
            const insertedOrRemoved = listChanges[1];
            const applyChanges$ = getObservablesFromChangesArray(changesArr, strategy, items.length);
            partiallyFinished = true;
            // @TODO we need to know if we need to notifyParent on move aswell
            notifyParent = insertedOrRemoved && parent;
            return new Observable(subscriber => {
                const s = merge(combineLatest(
                // emit after all changes are rendered
                applyChanges$.length > 0 ? applyChanges$ : [of(items)]).pipe(tap(() => (partiallyFinished = false)), 
                // somehow this makes the strategySelect work
                notifyAllParentsIfNeeded(tNode, injectingViewCdRef, strategy, () => notifyParent)), 
                // emit injectingParent if needed
                notifyInjectingParentIfNeeded(injectingViewCdRef, strategy, insertedOrRemoved).pipe(ignoreElements())).pipe(map(() => items), catchError((e) => {
                    partiallyFinished = false;
                    errorHandler.handleError(e);
                    return of(items);
                })).subscribe(subscriber);
                return () => {
                    s.unsubscribe();
                };
            });
        }));
    }
    /**
     * @internal
     *
     * returns an array of streams which process all of the view updates needed to reflect the latest diff to the
     * viewContainer.
     * I
     *
     * @param changes
     * @param strategy
     * @param count
     */
    function getObservablesFromChangesArray(changes, strategy, count) {
        return changes.length > 0
            ? changes.map((change) => {
                const payload = change[1];
                return onStrategy(change[0], strategy, type => {
                    switch (type) {
                        case 0 /* insert */:
                            listViewHandler.insertView(payload[0], payload[1], count);
                            break;
                        case 2 /* move */:
                            listViewHandler.moveView(payload[2], payload[0], payload[1], count);
                            break;
                        case 1 /* remove */:
                            listViewHandler.removeView(payload[1]);
                            break;
                        case 3 /* update */:
                            listViewHandler.updateView(payload[0], payload[1], count);
                            break;
                        case 4 /* context */:
                            listViewHandler.updateUnchangedContext(payload[1], count);
                            break;
                    }
                }, {});
            })
            : [of(null)];
    }
}
//# sourceMappingURL=data:application/json;base64,