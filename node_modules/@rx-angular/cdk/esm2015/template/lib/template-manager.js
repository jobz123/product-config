import { EMPTY, merge, of } from 'rxjs';
import { catchError, ignoreElements, switchMap, withLatestFrom, } from 'rxjs/operators';
import { onStrategy, strategyHandling } from '@rx-angular/cdk/render-strategies';
import { createErrorHandler } from './render-error';
import { getTNode, notifyAllParentsIfNeeded, notifyInjectingParentIfNeeded, templateHandling, } from './utils';
/**
 * @internal
 *
 * A factory function that returns a map of projections to turn a notification of a Observable (next, error, complete)
 *
 * @param customNextContext - projection function to provide custom properties as well as override existing
 */
export function notificationKindToViewContext(customNextContext) {
    // @TODO rethink overrides
    return {
        suspense: (notification) => {
            const $implicit = notification.value;
            return Object.assign({ $implicit, $suspense: true, $error: false, $complete: false }, customNextContext($implicit));
        },
        next: (notification) => {
            const $implicit = notification.value;
            return Object.assign({ $implicit, $suspense: false, $error: false, $complete: false }, customNextContext($implicit));
        },
        error: (notification) => {
            const $implicit = notification.value;
            return Object.assign({ $implicit, $complete: false, $error: notification.error, $suspense: false }, customNextContext($implicit));
        },
        complete: (notification) => {
            const $implicit = notification.value;
            return Object.assign({ $implicit, $error: false, $complete: true, $suspense: false }, customNextContext($implicit));
        },
    };
}
export function createTemplateManager(config) {
    const { renderSettings, notificationToTemplateName, templateSettings } = config;
    const { defaultStrategyName, strategies, cdRef: injectingViewCdRef, patchZone, parent, eRef, } = renderSettings;
    const errorHandler = createErrorHandler(renderSettings.errorHandler);
    const tNode = parent
        ? getTNode(injectingViewCdRef, eRef.nativeElement)
        : false;
    let activeTemplate;
    const strategyHandling$ = strategyHandling(defaultStrategyName, strategies);
    const templates = templateHandling(templateSettings.viewContainerRef);
    const viewContainerRef = templateSettings.viewContainerRef;
    const triggerHandling = config.templateTrigger$ || EMPTY;
    const getContext = notificationKindToViewContext(templateSettings.customContext || ((v) => { }));
    const workFactory = patchZone
        ? (work) => patchZone.run(work)
        : (work) => work();
    return {
        addTemplateRef: templates.add,
        // addTrigger: triggerHandling.next,
        nextStrategy: strategyHandling$.next,
        render(values$) {
            return values$.pipe(
            /* tslint:disable */
            // mergeWith(triggerHandling.trigger$ || EMPTY),
            /* tslint:enable */
            withLatestFrom(strategyHandling$.strategy$), 
            // Cancel old renders
            switchMap(([notification, strategy]) => {
                const kind = notification.kind;
                const value = notification.value;
                const templateName = notificationToTemplateName[kind](value, templates);
                const template = templates.get(templateName);
                const isNewTemplate = activeTemplate !== templateName;
                const notifyParent = isNewTemplate && parent;
                return merge(onStrategy(value, strategy, (v, work, options) => {
                    const context = getContext[kind](notification);
                    if (isNewTemplate) {
                        // template has changed (undefined => next; suspense => next; ...)
                        // handle remove & insert
                        // remove current view if there is any
                        if (viewContainerRef.length > 0) {
                            // patch removal if needed
                            workFactory(() => viewContainerRef.clear());
                        }
                        // create new view if any
                        if (template) {
                            // createEmbeddedView is already patched, no need for workFactory
                            workFactory(() => templates.createEmbeddedView(templateName, context));
                        }
                    }
                    else if (template) {
                        // template didn't change, update it
                        // handle update
                        const view = viewContainerRef.get(0);
                        Object.keys(context).forEach((k) => {
                            view.context[k] = context[k];
                        });
                        // update view context, patch if needed
                        workFactory(() => work(view, options.scope, notification));
                    }
                    activeTemplate = templateName;
                }
                // we don't need to specify any scope here. The template manager is the only one
                // who will call `viewRef#detectChanges` on any of the templates it manages.
                // whenever a new value comes in, any pre-scheduled work of this taskManager will
                // be nooped before a new work will be scheduled. This happens because of the implementation
                // of `StrategyCredential#behavior`
                ).pipe(notifyAllParentsIfNeeded(tNode, injectingViewCdRef, strategy, () => notifyParent)), notifyInjectingParentIfNeeded(injectingViewCdRef, strategy, isNewTemplate).pipe(ignoreElements())).pipe(catchError((e) => {
                    errorHandler.handleError(e);
                    return of(e);
                }));
            }));
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUtbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2RrL3RlbXBsYXRlL3NyYy9saWIvdGVtcGxhdGUtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFVQSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUNMLFVBQVUsRUFDVixjQUFjLEVBQ2QsU0FBUyxFQUNULGNBQWMsR0FDZixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBZ0IsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFRL0YsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUNMLFFBQVEsRUFDUix3QkFBd0IsRUFDeEIsNkJBQTZCLEVBQzdCLGdCQUFnQixHQUVqQixNQUFNLFNBQVMsQ0FBQztBQVlqQjs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsNkJBQTZCLENBQzNDLGlCQUF1QztJQUV2QywwQkFBMEI7SUFDMUIsT0FBTztRQUNMLFFBQVEsRUFBRSxDQUFDLFlBQXVDLEVBQUUsRUFBRTtZQUNwRCxNQUFNLFNBQVMsR0FBeUIsWUFBWSxDQUFDLEtBQVUsQ0FBQztZQUNoRSx1QkFDRSxTQUFTLEVBQ1QsU0FBUyxFQUFFLElBQUksRUFDZixNQUFNLEVBQUUsS0FBSyxFQUNiLFNBQVMsRUFBRSxLQUFLLElBQ2IsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEVBQy9CO1FBQ0osQ0FBQztRQUNELElBQUksRUFBRSxDQUFDLFlBQW1DLEVBQUUsRUFBRTtZQUM1QyxNQUFNLFNBQVMsR0FBeUIsWUFBWSxDQUFDLEtBQVUsQ0FBQztZQUNoRSx1QkFDRSxTQUFTLEVBQ1QsU0FBUyxFQUFFLEtBQUssRUFDaEIsTUFBTSxFQUFFLEtBQUssRUFDYixTQUFTLEVBQUUsS0FB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SCx1Q0FBdUM7d0JBQ3ZDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztxQkFDNUQ7b0JBQ0QsY0FBYyxHQUFHLFlBQVksQ0FBQztnQkFDaEMsQ0FBQztnQkFDRCxnRkFBZ0Y7Z0JBQ2hGLDRFQUE0RTtnQkFDNUUsaUZBQWlGO2dCQUNqRiw0RkFBNEY7Z0JBQzVGLG1DQUFtQztpQkFDcEMsQ0FBQyxJQUFJLENBQ0osd0JBQXdCLENBQ3RCLEtBQUssRUFDTCxrQkFBa0IsRUFDbEIsUUFBUSxFQUNSLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FDbkIsQ0FDRixFQUNELDZCQUE2QixDQUMzQixrQkFBa0IsRUFDbEIsUUFBUSxFQUNSLGFBQWEsQ0FDZCxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUN6QixDQUFDLElBQUksQ0FDSixVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDZixZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QixPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDZixDQUFDLENBQUMsQ0FDSCxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUNKLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVtYmVkZGVkVmlld1JlZiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUnhDb2FsZXNjaW5nT3B0aW9ucyB9IGZyb20gJ0ByeC1hbmd1bGFyL2Nkay9jb2FsZXNjaW5nJztcclxuaW1wb3J0IHtcclxuICBSeENvbXBsZXRlTm90aWZpY2F0aW9uLFxyXG4gIFJ4RXJyb3JOb3RpZmljYXRpb24sXHJcbiAgUnhOZXh0Tm90aWZpY2F0aW9uLFxyXG4gIFJ4Tm90aWZpY2F0aW9uLFxyXG4gIFJ4Tm90aWZpY2F0aW9uS2luZCxcclxuICBSeFN1c3BlbnNlTm90aWZpY2F0aW9uLFxyXG59IGZyb20gJ0ByeC1hbmd1bGFyL2Nkay9ub3RpZmljYXRpb25zJztcclxuaW1wb3J0IHsgRU1QVFksIG1lcmdlLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge1xyXG4gIGNhdGNoRXJyb3IsXHJcbiAgaWdub3JlRWxlbWVudHMsXHJcbiAgc3dpdGNoTWFwLFxyXG4gIHdpdGhMYXRlc3RGcm9tLFxyXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgUnhSZW5kZXJXb3JrLCBvblN0cmF0ZWd5LCBzdHJhdGVneUhhbmRsaW5nIH0gZnJvbSAnQHJ4LWFuZ3VsYXIvY2RrL3JlbmRlci1zdHJhdGVnaWVzJztcclxuaW1wb3J0IHtcclxuICByeEJhc2VUZW1wbGF0ZU5hbWVzLFxyXG4gIFJ4UmVuZGVyQXdhcmUsXHJcbiAgUnhSZW5kZXJTZXR0aW5ncyxcclxuICBSeFRlbXBsYXRlU2V0dGluZ3MsXHJcbiAgUnhWaWV3Q29udGV4dCxcclxufSBmcm9tICcuL21vZGVsJztcclxuaW1wb3J0IHsgY3JlYXRlRXJyb3JIYW5kbGVyIH0gZnJvbSAnLi9yZW5kZXItZXJyb3InO1xyXG5pbXBvcnQge1xyXG4gIGdldFROb2RlLFxyXG4gIG5vdGlmeUFsbFBhcmVudHNJZk5lZWRlZCxcclxuICBub3RpZnlJbmplY3RpbmdQYXJlbnRJZk5lZWRlZCxcclxuICB0ZW1wbGF0ZUhhbmRsaW5nLFxyXG4gIFROb2RlLFxyXG59IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSeFRlbXBsYXRlTWFuYWdlcjxcclxuICBULFxyXG4gIEMgZXh0ZW5kcyBSeFZpZXdDb250ZXh0PFQ+LFxyXG4gIE4gPSByeEJhc2VUZW1wbGF0ZU5hbWVzIHwgc3RyaW5nXHJcbj4gZXh0ZW5kcyBSeFJlbmRlckF3YXJlPFQ+IHtcclxuICBhZGRUZW1wbGF0ZVJlZjogKG5hbWU6IE4sIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxDPikgPT4gdm9pZDtcclxuICAvLyBhZGRUcmlnZ2VyOiAodHJpZ2dlciQ6IE9ic2VydmFibGU8UnhOb3RpZmljYXRpb248VD4+KSA9PiB2b2lkO1xyXG4gIC8vIGFjdGl2ZVRlbXBsYXRlOiBOO1xyXG59XHJcblxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqXHJcbiAqIEEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBtYXAgb2YgcHJvamVjdGlvbnMgdG8gdHVybiBhIG5vdGlmaWNhdGlvbiBvZiBhIE9ic2VydmFibGUgKG5leHQsIGVycm9yLCBjb21wbGV0ZSlcclxuICpcclxuICogQHBhcmFtIGN1c3RvbU5leHRDb250ZXh0IC0gcHJvamVjdGlvbiBmdW5jdGlvbiB0byBwcm92aWRlIGN1c3RvbSBwcm9wZXJ0aWVzIGFzIHdlbGwgYXMgb3ZlcnJpZGUgZXhpc3RpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBub3RpZmljYXRpb25LaW5kVG9WaWV3Q29udGV4dDxUPihcclxuICBjdXN0b21OZXh0Q29udGV4dDogKHZhbHVlOiBUKSA9PiBvYmplY3RcclxuKTogUnhWaWV3Q29udGV4dE1hcDxUPiB7XHJcbiAgLy8gQFRPRE8gcmV0aGluayBvdmVycmlkZXNcclxuICByZXR1cm4ge1xyXG4gICAgc3VzcGVuc2U6IChub3RpZmljYXRpb246IFJ4U3VzcGVuc2VOb3RpZmljYXRpb248VD4pID0+IHtcclxuICAgICAgY29uc3QgJGltcGxpY2l0OiBUIHwgbnVsbCB8IHVuZGVmaW5lZCA9IG5vdGlmaWNhdGlvbi52YWx1ZSBhcyBUO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICRpbXBsaWNpdCxcclxuICAgICAgICAkc3VzcGVuc2U6IHRydWUsXHJcbiAgICAgICAgJGVycm9yOiBmYWxzZSxcclxuICAgICAgICAkY29tcGxldGU6IGZhbHNlLFxyXG4gICAgICAgIC4uLmN1c3RvbU5leHRDb250ZXh0KCRpbXBsaWNpdCksXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgbmV4dDogKG5vdGlmaWNhdGlvbjogUnhOZXh0Tm90aWZpY2F0aW9uPFQ+KSA9PiB7XHJcbiAgICAgIGNvbnN0ICRpbXBsaWNpdDogVCB8IG51bGwgfCB1bmRlZmluZWQgPSBub3RpZmljYXRpb24udmFsdWUgYXMgVDtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAkaW1wbGljaXQsXHJcbiAgICAgICAgJHN1c3BlbnNlOiBmYWxzZSxcclxuICAgICAgICAkZXJyb3I6IGZhbHNlLFxyXG4gICAgICAgICRjb21wbGV0ZTogZmFsc2UsXHJcbiAgICAgICAgLi4uY3VzdG9tTmV4dENvbnRleHQoJGltcGxpY2l0KSxcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBlcnJvcjogKG5vdGlmaWNhdGlvbjogUnhFcnJvck5vdGlmaWNhdGlvbjxUPikgPT4ge1xyXG4gICAgICBjb25zdCAkaW1wbGljaXQ6IFQgfCBudWxsIHwgdW5kZWZpbmVkID0gbm90aWZpY2F0aW9uLnZhbHVlIGFzIFQ7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgJGltcGxpY2l0LFxyXG4gICAgICAgICRjb21wbGV0ZTogZmFsc2UsXHJcbiAgICAgICAgJGVycm9yOiBub3RpZmljYXRpb24uZXJyb3IsXHJcbiAgICAgICAgJHN1c3BlbnNlOiBmYWxzZSxcclxuICAgICAgICAuLi5jdXN0b21OZXh0Q29udGV4dCgkaW1wbGljaXQpLFxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuICAgIGNvbXBsZXRlOiAobm90aWZpY2F0aW9uOiBSeENvbXBsZXRlTm90aWZpY2F0aW9uPFQ+KSA9PiB7XHJcbiAgICAgIGNvbnN0ICRpbXBsaWNpdDogVCB8IG51bGwgfCB1bmRlZmluZWQgPSBub3RpZmljYXRpb24udmFsdWUgYXMgVDtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAkaW1wbGljaXQsXHJcbiAgICAgICAgJGVycm9yOiBmYWxzZSxcclxuICAgICAgICAkY29tcGxldGU6IHRydWUsXHJcbiAgICAgICAgJHN1c3BlbnNlOiBmYWxzZSxcclxuICAgICAgICAuLi5jdXN0b21OZXh0Q29udGV4dCgkaW1wbGljaXQpLFxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcbmV4cG9ydCB0eXBlIFJ4Vmlld0NvbnRleHRNYXA8VD4gPSBSZWNvcmQ8XHJcbiAgUnhOb3RpZmljYXRpb25LaW5kLFxyXG4gICh2YWx1ZT86IGFueSkgPT4gUGFydGlhbDxSeFZpZXdDb250ZXh0PFQ+PlxyXG4+O1xyXG5cclxuZXhwb3J0IHR5cGUgUnhOb3RpZmljYXRpb25UZW1wbGF0ZU5hbWVNYXA8VCwgQywgTj4gPSBSZWNvcmQ8XHJcbiAgUnhOb3RpZmljYXRpb25LaW5kLFxyXG4gICh2YWx1ZT86IFQsIHRlbXBsYXRlcz86IHsgZ2V0OiAobmFtZTogTikgPT4gVGVtcGxhdGVSZWY8Qz4gfSkgPT4gTlxyXG4+O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRlbXBsYXRlTWFuYWdlcjxcclxuICBULFxyXG4gIEMgZXh0ZW5kcyBSeFZpZXdDb250ZXh0PFQ+LFxyXG4gIE4gPSByeEJhc2VUZW1wbGF0ZU5hbWVzIHwgc3RyaW5nXHJcbj4oY29uZmlnOiB7XHJcbiAgcmVuZGVyU2V0dGluZ3M6IFJ4UmVuZGVyU2V0dGluZ3M8VCwgQz47XHJcbiAgdGVtcGxhdGVTZXR0aW5nczogUnhUZW1wbGF0ZVNldHRpbmdzPFQsIEM+O1xyXG4gIHRlbXBsYXRlVHJpZ2dlciQ/OiBPYnNlcnZhYmxlPFJ4Tm90aWZpY2F0aW9uPHVua25vd24+PjtcclxuICBub3RpZmljYXRpb25Ub1RlbXBsYXRlTmFtZTogUnhOb3RpZmljYXRpb25UZW1wbGF0ZU5hbWVNYXA8VCwgQywgTj47XHJcbn0pOiBSeFRlbXBsYXRlTWFuYWdlcjxULCBDLCBOPiB7XHJcbiAgY29uc3QgeyByZW5kZXJTZXR0aW5ncywgbm90aWZpY2F0aW9uVG9UZW1wbGF0ZU5hbWUsIHRlbXBsYXRlU2V0dGluZ3MgfSA9XHJcbiAgICBjb25maWc7XHJcbiAgY29uc3Qge1xyXG4gICAgZGVmYXVsdFN0cmF0ZWd5TmFtZSxcclxuICAgIHN0cmF0ZWdpZXMsXHJcbiAgICBjZFJlZjogaW5qZWN0aW5nVmlld0NkUmVmLFxyXG4gICAgcGF0Y2hab25lLFxyXG4gICAgcGFyZW50LFxyXG4gICAgZVJlZixcclxuICB9ID0gcmVuZGVyU2V0dGluZ3M7XHJcblxyXG4gIGNvbnN0IGVycm9ySGFuZGxlciA9IGNyZWF0ZUVycm9ySGFuZGxlcihyZW5kZXJTZXR0aW5ncy5lcnJvckhhbmRsZXIpO1xyXG4gIGNvbnN0IHROb2RlOiBUTm9kZSA9IHBhcmVudFxyXG4gICAgPyBnZXRUTm9kZShpbmplY3RpbmdWaWV3Q2RSZWYsIGVSZWYubmF0aXZlRWxlbWVudClcclxuICAgIDogZmFsc2U7XHJcblxyXG4gIGxldCBhY3RpdmVUZW1wbGF0ZTogTjtcclxuXHJcbiAgY29uc3Qgc3RyYXRlZ3lIYW5kbGluZyQgPSBzdHJhdGVneUhhbmRsaW5nKGRlZmF1bHRTdHJhdGVneU5hbWUsIHN0cmF0ZWdpZXMpO1xyXG4gIGNvbnN0IHRlbXBsYXRlcyA9IHRlbXBsYXRlSGFuZGxpbmc8TiwgQz4odGVtcGxhdGVTZXR0aW5ncy52aWV3Q29udGFpbmVyUmVmKTtcclxuICBjb25zdCB2aWV3Q29udGFpbmVyUmVmID0gdGVtcGxhdGVTZXR0aW5ncy52aWV3Q29udGFpbmVyUmVmO1xyXG5cclxuICBjb25zdCB0cmlnZ2VySGFuZGxpbmcgPSBjb25maWcudGVtcGxhdGVUcmlnZ2VyJCB8fCBFTVBUWTtcclxuICBjb25zdCBnZXRDb250ZXh0ID0gbm90aWZpY2F0aW9uS2luZFRvVmlld0NvbnRleHQoXHJcbiAgICB0ZW1wbGF0ZVNldHRpbmdzLmN1c3RvbUNvbnRleHQgfHwgKCh2KSA9PiB7fSlcclxuICApO1xyXG5cclxuICBjb25zdCB3b3JrRmFjdG9yeSA9IHBhdGNoWm9uZVxyXG4gICAgPyAod29yazogVm9pZEZ1bmN0aW9uKSA9PiBwYXRjaFpvbmUucnVuKHdvcmspXHJcbiAgICA6ICh3b3JrOiBWb2lkRnVuY3Rpb24pID0+IHdvcmsoKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGFkZFRlbXBsYXRlUmVmOiB0ZW1wbGF0ZXMuYWRkLFxyXG4gICAgLy8gYWRkVHJpZ2dlcjogdHJpZ2dlckhhbmRsaW5nLm5leHQsXHJcbiAgICBuZXh0U3RyYXRlZ3k6IHN0cmF0ZWd5SGFuZGxpbmckLm5leHQsXHJcbiAgICByZW5kZXIodmFsdWVzJDogT2JzZXJ2YWJsZTxSeE5vdGlmaWNhdGlvbjxUPj4pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICByZXR1cm4gdmFsdWVzJC5waXBlKFxyXG4gICAgICAgIC8qIHRzbGludDpkaXNhYmxlICovXHJcbiAgICAgICAgLy8gbWVyZ2VXaXRoKHRyaWdnZXJIYW5kbGluZy50cmlnZ2VyJCB8fCBFTVBUWSksXHJcbiAgICAgICAgLyogdHNsaW50OmVuYWJsZSAqL1xyXG4gICAgICAgIHdpdGhMYXRlc3RGcm9tKHN0cmF0ZWd5SGFuZGxpbmckLnN0cmF0ZWd5JCksXHJcbiAgICAgICAgLy8gQ2FuY2VsIG9sZCByZW5kZXJzXHJcbiAgICAgICAgc3dpdGNoTWFwKChbbm90aWZpY2F0aW9uLCBzdHJhdGVneV0pID0+IHtcclxuICAgICAgICAgIGNvbnN0IGtpbmQ6IFJ4Tm90aWZpY2F0aW9uS2luZCA9IG5vdGlmaWNhdGlvbi5raW5kO1xyXG4gICAgICAgICAgY29uc3QgdmFsdWU6IFQgPSBub3RpZmljYXRpb24udmFsdWUgYXMgVDtcclxuICAgICAgICAgIGNvbnN0IHRlbXBsYXRlTmFtZSA9IG5vdGlmaWNhdGlvblRvVGVtcGxhdGVOYW1lW2tpbmRdKFxyXG4gICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgdGVtcGxhdGVzXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVzLmdldCh0ZW1wbGF0ZU5hbWUpO1xyXG4gICAgICAgICAgY29uc3QgaXNOZXdUZW1wbGF0ZSA9IGFjdGl2ZVRlbXBsYXRlICE9PSB0ZW1wbGF0ZU5hbWU7XHJcbiAgICAgICAgICBjb25zdCBub3RpZnlQYXJlbnQgPSBpc05ld1RlbXBsYXRlICYmIHBhcmVudDtcclxuICAgICAgICAgIHJldHVybiBtZXJnZShcclxuICAgICAgICAgICAgb25TdHJhdGVneShcclxuICAgICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgICBzdHJhdGVneSxcclxuICAgICAgICAgICAgICAodjogVCwgd29yazogUnhSZW5kZXJXb3JrLCBvcHRpb25zOiBSeENvYWxlc2NpbmdPcHRpb25zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gPEM+Z2V0Q29udGV4dFtraW5kXShub3RpZmljYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmV3VGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgLy8gdGVtcGxhdGUgaGFzIGNoYW5nZWQgKHVuZGVmaW5lZCA9PiBuZXh0OyBzdXNwZW5zZSA9PiBuZXh0OyAuLi4pXHJcbiAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSByZW1vdmUgJiBpbnNlcnRcclxuICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGN1cnJlbnQgdmlldyBpZiB0aGVyZSBpcyBhbnlcclxuICAgICAgICAgICAgICAgICAgaWYgKHZpZXdDb250YWluZXJSZWYubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBhdGNoIHJlbW92YWwgaWYgbmVlZGVkXHJcbiAgICAgICAgICAgICAgICAgICAgd29ya0ZhY3RvcnkoKCkgPT4gdmlld0NvbnRhaW5lclJlZi5jbGVhcigpKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgbmV3IHZpZXcgaWYgYW55XHJcbiAgICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZUVtYmVkZGVkVmlldyBpcyBhbHJlYWR5IHBhdGNoZWQsIG5vIG5lZWQgZm9yIHdvcmtGYWN0b3J5XHJcbiAgICAgICAgICAgICAgICAgICAgd29ya0ZhY3RvcnkoKCkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlcy5jcmVhdGVFbWJlZGRlZFZpZXcodGVtcGxhdGVOYW1lLCBjb250ZXh0KVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgLy8gdGVtcGxhdGUgZGlkbid0IGNoYW5nZSwgdXBkYXRlIGl0XHJcbiAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSB1cGRhdGVcclxuICAgICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IDxFbWJlZGRlZFZpZXdSZWY8Qz4+dmlld0NvbnRhaW5lclJlZi5nZXQoMCk7XHJcbiAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGNvbnRleHQpLmZvckVhY2goKGspID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3LmNvbnRleHRba10gPSBjb250ZXh0W2tdO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHZpZXcgY29udGV4dCwgcGF0Y2ggaWYgbmVlZGVkXHJcbiAgICAgICAgICAgICAgICAgIHdvcmtGYWN0b3J5KCgpID0+IHdvcmsodmlldywgb3B0aW9ucy5zY29wZSwgbm90aWZpY2F0aW9uKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVUZW1wbGF0ZSA9IHRlbXBsYXRlTmFtZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBzcGVjaWZ5IGFueSBzY29wZSBoZXJlLiBUaGUgdGVtcGxhdGUgbWFuYWdlciBpcyB0aGUgb25seSBvbmVcclxuICAgICAgICAgICAgICAvLyB3aG8gd2lsbCBjYWxsIGB2aWV3UmVmI2RldGVjdENoYW5nZXNgIG9uIGFueSBvZiB0aGUgdGVtcGxhdGVzIGl0IG1hbmFnZXMuXHJcbiAgICAgICAgICAgICAgLy8gd2hlbmV2ZXIgYSBuZXcgdmFsdWUgY29tZXMgaW4sIGFueSBwcmUtc2NoZWR1bGVkIHdvcmsgb2YgdGhpcyB0YXNrTWFuYWdlciB3aWxsXHJcbiAgICAgICAgICAgICAgLy8gYmUgbm9vcGVkIGJlZm9yZSBhIG5ldyB3b3JrIHdpbGwgYmUgc2NoZWR1bGVkLiBUaGlzIGhhcHBlbnMgYmVjYXVzZSBvZiB0aGUgaW1wbGVtZW50YXRpb25cclxuICAgICAgICAgICAgICAvLyBvZiBgU3RyYXRlZ3lDcmVkZW50aWFsI2JlaGF2aW9yYFxyXG4gICAgICAgICAgICApLnBpcGUoXHJcbiAgICAgICAgICAgICAgbm90aWZ5QWxsUGFyZW50c0lmTmVlZGVkKFxyXG4gICAgICAgICAgICAgICAgdE5vZGUsXHJcbiAgICAgICAgICAgICAgICBpbmplY3RpbmdWaWV3Q2RSZWYsXHJcbiAgICAgICAgICAgICAgICBzdHJhdGVneSxcclxuICAgICAgICAgICAgICAgICgpID0+IG5vdGlmeVBhcmVudFxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgbm90aWZ5SW5qZWN0aW5nUGFyZW50SWZOZWVkZWQoXHJcbiAgICAgICAgICAgICAgaW5qZWN0aW5nVmlld0NkUmVmLFxyXG4gICAgICAgICAgICAgIHN0cmF0ZWd5LFxyXG4gICAgICAgICAgICAgIGlzTmV3VGVtcGxhdGVcclxuICAgICAgICAgICAgKS5waXBlKGlnbm9yZUVsZW1lbnRzKCkpXHJcbiAgICAgICAgICApLnBpcGUoXHJcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGUpID0+IHtcclxuICAgICAgICAgICAgICBlcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG9mKGUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcbiJdfQ==