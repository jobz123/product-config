export const zoneGlobalDisableConfigurationsKeys = [
    'EventEmitter',
    'fs',
    'node_timers',
    'nextTick',
    'crypto',
    'defineProperty',
    'registerElement',
    'EventTargetLegacy',
    'timers',
    'requestAnimationFrame',
    'blocking',
    'EventTarget',
    'FileReader',
    'MutationObserver',
    'IntersectionObserver',
    'on_property',
    'customElements',
    'XHR',
    'geolocation',
    'canvas',
    'ZoneAwarePromise',
];
export const zoneGlobalEventsConfigurationsKeys = ['UNPATCHED_EVENTS', 'PASSIVE_EVENTS'];
export const zoneGlobalSettingsConfigurationsKeys = ['DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION'];
export const zoneRuntimeConfigurationsKeys = [
    'ignoreConsoleErrorUncaughtError',
];
export const zoneTestDisableConfigurationsKeys = ['jasmine', 'mocha', 'jest'];
export const zoneTestSettingsConfigurationsKeys = [
    'fakeAsyncDisablePatchingClock',
    'fakeAsyncAutoFakeAsyncWhenClockPatched',
    'supportWaitUnResolvedChainedPromise',
];
//# sourceMappingURL=data:application/json;base64,