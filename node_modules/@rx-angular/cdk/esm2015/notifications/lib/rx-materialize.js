import { map, materialize, tap } from 'rxjs/operators';
export function rxMaterialize() {
    return (o$) => o$.pipe(materialize(), tap(({ kind, error }) => {
        // As we dont want to just swallow errors we log them here
        if (kind === 'E') {
            console.error(error);
        }
    }), map(({ value, error, kind }) => {
        const rxNotificationKind = notificationKindToRxNotificationKind(kind);
        return {
            value,
            hasValue: kind === 'N',
            error,
            kind: rxNotificationKind,
            complete: rxNotificationKind === "complete" /* Complete */,
        };
    }));
}
/**
 * @internal
 *
 * @description
 * This function is here to turn RxJS notification kind values into RxNotification kind names.
 * The main reason for the naming is the RxNotification kind values map directly to the default
 * template names (`suspense`, `next`, `error` `complete`) in the directives of the template package
 */
export function notificationKindToRxNotificationKind(kind) {
    switch (kind) {
        case 'C':
            return "complete" /* Complete */;
        case 'E':
            return "error" /* Error */;
        case 'N':
        default:
            return "next" /* Next */;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtbWF0ZXJpYWxpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay9ub3RpZmljYXRpb25zL3NyYy9saWIvcngtbWF0ZXJpYWxpemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJdkQsTUFBTSxVQUFVLGFBQWE7SUFDM0IsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQ1osRUFBRSxDQUFDLElBQUksQ0FDTCxXQUFXLEVBQUUsRUFDYixHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ3RCLDBEQUEwRDtRQUMxRCxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QjtJQUNILENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1FBQzdCLE1BQU0sa0JBQWtCLEdBQUcsb0NBQW9DLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEUsT0FBTztZQUNMLEtBQUs7WUFDTCxRQUFRLEVBQUUsSUFBSSxLQUFLLEdBQUc7WUFDdEIsS0FBSztZQUNMLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsUUFBUSxFQUFFLGtCQUFrQiw4QkFBZ0M7U0FDN0QsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDTixDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxvQ0FBb0MsQ0FDbEQsSUFBNkM7SUFFN0MsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLEdBQUc7WUFDTixpQ0FBbUM7UUFDckMsS0FBSyxHQUFHO1lBQ04sMkJBQWdDO1FBQ2xDLEtBQUssR0FBRyxDQUFDO1FBQ1Q7WUFDRSx5QkFBK0I7S0FDbEM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BlcmF0b3JGdW5jdGlvbiwgT2JzZXJ2YWJsZU5vdGlmaWNhdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIG1hdGVyaWFsaXplLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBSeE5vdGlmaWNhdGlvbiwgUnhOb3RpZmljYXRpb25LaW5kIH0gZnJvbSAnLi9tb2RlbCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcnhNYXRlcmlhbGl6ZTxUPigpOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFJ4Tm90aWZpY2F0aW9uPFQ+PiB7XHJcbiAgcmV0dXJuIChvJCkgPT5cclxuICAgIG8kLnBpcGUoXHJcbiAgICAgIG1hdGVyaWFsaXplKCksXHJcbiAgICAgIHRhcCgoeyBraW5kLCBlcnJvciB9KSA9PiB7XHJcbiAgICAgICAgLy8gQXMgd2UgZG9udCB3YW50IHRvIGp1c3Qgc3dhbGxvdyBlcnJvcnMgd2UgbG9nIHRoZW0gaGVyZVxyXG4gICAgICAgIGlmIChraW5kID09PSAnRScpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSksXHJcbiAgICAgIG1hcCgoeyB2YWx1ZSwgZXJyb3IsIGtpbmQgfSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJ4Tm90aWZpY2F0aW9uS2luZCA9IG5vdGlmaWNhdGlvbktpbmRUb1J4Tm90aWZpY2F0aW9uS2luZChraW5kKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICBoYXNWYWx1ZToga2luZCA9PT0gJ04nLFxyXG4gICAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgICBraW5kOiByeE5vdGlmaWNhdGlvbktpbmQsXHJcbiAgICAgICAgICBjb21wbGV0ZTogcnhOb3RpZmljYXRpb25LaW5kID09PSBSeE5vdGlmaWNhdGlvbktpbmQuQ29tcGxldGUsXHJcbiAgICAgICAgfTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgaGVyZSB0byB0dXJuIFJ4SlMgbm90aWZpY2F0aW9uIGtpbmQgdmFsdWVzIGludG8gUnhOb3RpZmljYXRpb24ga2luZCBuYW1lcy5cclxuICogVGhlIG1haW4gcmVhc29uIGZvciB0aGUgbmFtaW5nIGlzIHRoZSBSeE5vdGlmaWNhdGlvbiBraW5kIHZhbHVlcyBtYXAgZGlyZWN0bHkgdG8gdGhlIGRlZmF1bHRcclxuICogdGVtcGxhdGUgbmFtZXMgKGBzdXNwZW5zZWAsIGBuZXh0YCwgYGVycm9yYCBgY29tcGxldGVgKSBpbiB0aGUgZGlyZWN0aXZlcyBvZiB0aGUgdGVtcGxhdGUgcGFja2FnZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmaWNhdGlvbktpbmRUb1J4Tm90aWZpY2F0aW9uS2luZChcclxuICBraW5kOiBPYnNlcnZhYmxlTm90aWZpY2F0aW9uPHVua25vd24+WydraW5kJ11cclxuKTogUnhOb3RpZmljYXRpb25LaW5kIHtcclxuICBzd2l0Y2ggKGtpbmQpIHtcclxuICAgIGNhc2UgJ0MnOlxyXG4gICAgICByZXR1cm4gUnhOb3RpZmljYXRpb25LaW5kLkNvbXBsZXRlO1xyXG4gICAgY2FzZSAnRSc6XHJcbiAgICAgIHJldHVybiBSeE5vdGlmaWNhdGlvbktpbmQuRXJyb3I7XHJcbiAgICBjYXNlICdOJzpcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBSeE5vdGlmaWNhdGlvbktpbmQuTmV4dDtcclxuICB9XHJcbn1cclxuIl19