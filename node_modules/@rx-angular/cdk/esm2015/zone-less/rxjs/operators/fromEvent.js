// tslint:disable
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { getZoneUnPatchedApi } from '../../get-zone-unpatched-api';
// @ts-ignore
const isFunction = (fn) => typeof fn === 'function';
const ɵ0 = isFunction;
const isArray = Array.isArray;
const ɵ1 = () => Object.prototype.toString;
const toString = (ɵ1)();
/* tslint:enable:max-line-length */
export function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction(options)) {
        // DEPRECATED PATH
        // @ts-ignore
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        // DEPRECATED PATH
        return fromEvent(target, eventName, options).pipe(map((args) => isArray(args) ? resultSelector(...args) : resultSelector(args)));
    }
    return new Observable((subscriber) => {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    let unsubscribe;
    if (isEventTarget(sourceObj)) {
        const source = sourceObj;
        getZoneUnPatchedApi(sourceObj, 'addEventListener').call(sourceObj, eventName, handler, options);
        unsubscribe = () => getZoneUnPatchedApi(source, 'removeEventListener').call(source, eventName, handler, options);
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        const source = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = () => source.off(eventName, handler);
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        const source = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = () => source.removeListener(eventName, handler);
    }
    else if (sourceObj && sourceObj.length) {
        for (let i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return (sourceObj &&
        typeof sourceObj.addListener === 'function' &&
        typeof sourceObj.removeListener === 'function');
}
function isJQueryStyleEventEmitter(sourceObj) {
    return (sourceObj &&
        typeof sourceObj.on === 'function' &&
        typeof sourceObj.off === 'function');
}
function isEventTarget(sourceObj) {
    return (sourceObj &&
        typeof sourceObj.addEventListener === 'function' &&
        typeof sourceObj.removeEventListener === 'function');
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,