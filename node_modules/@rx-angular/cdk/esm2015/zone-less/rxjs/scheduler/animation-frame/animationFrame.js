// tslint:disable file-name-casing
import * as rxjs from 'rxjs';
import { AnimationFrameAction } from './AnimationFrameAction';
import { createScheduler } from '../create-scheduler';
/**
 *
 * NOTE: This is a zone un-patched version of rxjs animationFrameScheduler
 *
 * Animation Frame Scheduler
 *
 * <span class="informal">Perform task when `window.requestAnimationFrame` would fire</span>
 *
 * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler
 * behaviour.
 *
 * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.
 * It makes sure scheduled task will happen just before next browser content repaint,
 * thus performing animations as efficiently as possible.
 *
 * ## Example
 * Schedule div height animation
 * ```ts
 * // html: <div style="background: #0ff;"></div>
 * import { animationFrameScheduler } from '@cu/perf-utils';
 *
 * const div = document.querySelector('div');
 *
 * animationFrameScheduler.schedule(function(height) {
 *   div.style.height = height + "px";
 *
 *   this.schedule(height + 1);  // `this` references currently executing Action,
 *                               // which we reschedule with new state
 * }, 0, 0);
 *
 * // You will see a div element growing in height
 * ```
 */
export const animationFrameScheduler = createScheduler(rxjs.animationFrameScheduler, AnimationFrameAction);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uRnJhbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay96b25lLWxlc3Mvc3JjL3J4anMvc2NoZWR1bGVyL2FuaW1hdGlvbi1mcmFtZS9hbmltYXRpb25GcmFtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFDbEMsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXREOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWdDRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLGVBQWUsQ0FDcEQsSUFBSSxDQUFDLHVCQUF1QixFQUM1QixvQkFBb0IsQ0FDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlIGZpbGUtbmFtZS1jYXNpbmdcclxuaW1wb3J0ICogYXMgcnhqcyBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQW5pbWF0aW9uRnJhbWVBY3Rpb24gfSBmcm9tICcuL0FuaW1hdGlvbkZyYW1lQWN0aW9uJztcclxuaW1wb3J0IHsgY3JlYXRlU2NoZWR1bGVyIH0gZnJvbSAnLi4vY3JlYXRlLXNjaGVkdWxlcic7XHJcblxyXG4vKipcclxuICpcclxuICogTk9URTogVGhpcyBpcyBhIHpvbmUgdW4tcGF0Y2hlZCB2ZXJzaW9uIG9mIHJ4anMgYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXJcclxuICpcclxuICogQW5pbWF0aW9uIEZyYW1lIFNjaGVkdWxlclxyXG4gKlxyXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+UGVyZm9ybSB0YXNrIHdoZW4gYHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIHdvdWxkIGZpcmU8L3NwYW4+XHJcbiAqXHJcbiAqIFdoZW4gYGFuaW1hdGlvbkZyYW1lYCBzY2hlZHVsZXIgaXMgdXNlZCB3aXRoIGRlbGF5LCBpdCB3aWxsIGZhbGwgYmFjayB0byB7QGxpbmsgYXN5bmNTY2hlZHVsZXJ9IHNjaGVkdWxlclxyXG4gKiBiZWhhdmlvdXIuXHJcbiAqXHJcbiAqIFdpdGhvdXQgZGVsYXksIGBhbmltYXRpb25GcmFtZWAgc2NoZWR1bGVyIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBzbW9vdGggYnJvd3NlciBhbmltYXRpb25zLlxyXG4gKiBJdCBtYWtlcyBzdXJlIHNjaGVkdWxlZCB0YXNrIHdpbGwgaGFwcGVuIGp1c3QgYmVmb3JlIG5leHQgYnJvd3NlciBjb250ZW50IHJlcGFpbnQsXHJcbiAqIHRodXMgcGVyZm9ybWluZyBhbmltYXRpb25zIGFzIGVmZmljaWVudGx5IGFzIHBvc3NpYmxlLlxyXG4gKlxyXG4gKiAjIyBFeGFtcGxlXHJcbiAqIFNjaGVkdWxlIGRpdiBoZWlnaHQgYW5pbWF0aW9uXHJcbiAqIGBgYHRzXHJcbiAqIC8vIGh0bWw6IDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kOiAjMGZmO1wiPjwvZGl2PlxyXG4gKiBpbXBvcnQgeyBhbmltYXRpb25GcmFtZVNjaGVkdWxlciB9IGZyb20gJ0BjdS9wZXJmLXV0aWxzJztcclxuICpcclxuICogY29uc3QgZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2Jyk7XHJcbiAqXHJcbiAqIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uKGhlaWdodCkge1xyXG4gKiAgIGRpdi5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XHJcbiAqXHJcbiAqICAgdGhpcy5zY2hlZHVsZShoZWlnaHQgKyAxKTsgIC8vIGB0aGlzYCByZWZlcmVuY2VzIGN1cnJlbnRseSBleGVjdXRpbmcgQWN0aW9uLFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCB3ZSByZXNjaGVkdWxlIHdpdGggbmV3IHN0YXRlXHJcbiAqIH0sIDAsIDApO1xyXG4gKlxyXG4gKiAvLyBZb3Ugd2lsbCBzZWUgYSBkaXYgZWxlbWVudCBncm93aW5nIGluIGhlaWdodFxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjb25zdCBhbmltYXRpb25GcmFtZVNjaGVkdWxlciA9IGNyZWF0ZVNjaGVkdWxlcihcclxuICByeGpzLmFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLFxyXG4gIEFuaW1hdGlvbkZyYW1lQWN0aW9uXHJcbik7XHJcbiJdfQ==