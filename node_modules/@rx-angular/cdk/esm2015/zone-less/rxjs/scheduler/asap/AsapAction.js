// tslint:disable
import { AsyncAction } from '../async/AsyncAction';
import { Promise } from '../../../browser/browser';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
export class AsapAction extends AsyncAction {
    constructor(scheduler, work) {
        super(scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    requestAsyncId(scheduler, id, delay = 0) {
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return super.requestAsyncId(scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If a microtask has already been scheduled, don't schedule another
        // one. If a microtask hasn't been scheduled yet, schedule one now. Return
        // the current scheduled microtask id.
        return (scheduler.scheduled ||
            (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, undefined))));
    }
    recycleAsyncId(scheduler, id, delay = 0) {
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return super.recycleAsyncId(scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested microtask and
        // set the scheduled flag to undefined so the next AsapAction will schedule
        // its own.
        if (scheduler.actions.length === 0) {
            Immediate.clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    }
}
let nextHandle = 1;
// The promise needs to be created lazily otherwise it won't be patched by Zones
let resolved;
const activeHandles = {};
/**
 * Finds the handle in the list of active handles, and removes it.
 * Returns `true` if found, `false` otherwise. Used both to clear
 * Immediate scheduled tasks, and to identify if a task should be scheduled.
 */
function findAndClearHandle(handle) {
    if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
    }
    return false;
}
/**
 * Helper functions to schedule and unschedule microtasks.
 */
const Immediate = {
    setImmediate(cb) {
        const handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
            resolved = Promise.resolve();
        }
        resolved.then(() => findAndClearHandle(handle) && cb());
        return handle;
    },
    clearImmediate(handle) {
        findAndClearHandle(handle);
    },
};
/**
 * Used for internal testing purposes only. Do not export from library.
 */
export const TestTools = {
    pending() {
        return Object.keys(activeHandles).length;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNhcEFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2RrL3pvbmUtbGVzcy9zcmMvcnhqcy9zY2hlZHVsZXIvYXNhcC9Bc2FwQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQjtBQUNqQixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHbkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRW5EOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sVUFBYyxTQUFRLFdBQWM7SUFDL0MsWUFDWSxTQUF3QixFQUN4QixJQUFtRDtRQUU3RCxLQUFLLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBSGIsY0FBUyxHQUFULFNBQVMsQ0FBZTtRQUN4QixTQUFJLEdBQUosSUFBSSxDQUErQztJQUcvRCxDQUFDO0lBRVMsY0FBYyxDQUN0QixTQUF3QixFQUN4QixFQUFRLEVBQ1IsUUFBZ0IsQ0FBQztRQUVqQiwwREFBMEQ7UUFDMUQsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxLQUFLLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxxREFBcUQ7UUFDckQsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0Isb0VBQW9FO1FBQ3BFLDBFQUEwRTtRQUMxRSxzQ0FBc0M7UUFDdEMsT0FBTyxDQUNMLFNBQVMsQ0FBQyxTQUFTO1lBQ25CLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUMzQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQzNDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUNTLGNBQWMsQ0FDdEIsU0FBd0IsRUFDeEIsRUFBUSxFQUNSLFFBQWdCLENBQUM7UUFFakIsc0VBQXNFO1FBQ3RFLHNFQUFzRTtRQUN0RSwyQ0FBMkM7UUFDM0MsSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ3ZFLE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ25EO1FBQ0Qsc0VBQXNFO1FBQ3RFLDJFQUEyRTtRQUMzRSxXQUFXO1FBQ1gsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3QixTQUFTLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUNqQztRQUNELHNGQUFzRjtRQUN0RixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFFRCxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFDbkIsZ0ZBQWdGO0FBQ2hGLElBQUksUUFBc0IsQ0FBQztBQUMzQixNQUFNLGFBQWEsR0FBMkIsRUFBRSxDQUFDO0FBRWpEOzs7O0dBSUc7QUFDSCxTQUFTLGtCQUFrQixDQUFDLE1BQWM7SUFDeEMsSUFBSSxNQUFNLElBQUksYUFBYSxFQUFFO1FBQzNCLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sU0FBUyxHQUFHO0lBQ2hCLFlBQVksQ0FBQyxFQUFjO1FBQ3pCLE1BQU0sTUFBTSxHQUFHLFVBQVUsRUFBRSxDQUFDO1FBQzVCLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDOUI7UUFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUFjO1FBQzNCLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7Q0FDRixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUc7SUFDdkIsT0FBTztRQUNMLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDM0MsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZVxyXG5pbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4uL2FzeW5jL0FzeW5jQWN0aW9uJztcclxuaW1wb3J0IHsgQXNhcFNjaGVkdWxlciB9IGZyb20gJy4vQXNhcFNjaGVkdWxlcic7XHJcbmltcG9ydCB7IFNjaGVkdWxlckFjdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcclxuaW1wb3J0IHsgUHJvbWlzZSB9IGZyb20gJy4uLy4uLy4uL2Jyb3dzZXIvYnJvd3Nlcic7XHJcblxyXG4vKipcclxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cclxuICogQGlnbm9yZVxyXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBc2FwQWN0aW9uPFQ+IGV4dGVuZHMgQXN5bmNBY3Rpb248VD4ge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIHNjaGVkdWxlcjogQXNhcFNjaGVkdWxlcixcclxuICAgIHByb3RlY3RlZCB3b3JrOiAodGhpczogU2NoZWR1bGVyQWN0aW9uPFQ+LCBzdGF0ZT86IFQpID0+IHZvaWRcclxuICApIHtcclxuICAgIHN1cGVyKHNjaGVkdWxlciwgd29yayk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgcmVxdWVzdEFzeW5jSWQoXHJcbiAgICBzY2hlZHVsZXI6IEFzYXBTY2hlZHVsZXIsXHJcbiAgICBpZD86IGFueSxcclxuICAgIGRlbGF5OiBudW1iZXIgPSAwXHJcbiAgKTogYW55IHtcclxuICAgIC8vIElmIGRlbGF5IGlzIGdyZWF0ZXIgdGhhbiAwLCByZXF1ZXN0IGFzIGFuIGFzeW5jIGFjdGlvbi5cclxuICAgIGlmIChkZWxheSAhPT0gbnVsbCAmJiBkZWxheSA+IDApIHtcclxuICAgICAgcmV0dXJuIHN1cGVyLnJlcXVlc3RBc3luY0lkKHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcclxuICAgIH1cclxuICAgIC8vIFB1c2ggdGhlIGFjdGlvbiB0byB0aGUgZW5kIG9mIHRoZSBzY2hlZHVsZXIgcXVldWUuXHJcbiAgICBzY2hlZHVsZXIuYWN0aW9ucy5wdXNoKHRoaXMpO1xyXG4gICAgLy8gSWYgYSBtaWNyb3Rhc2sgaGFzIGFscmVhZHkgYmVlbiBzY2hlZHVsZWQsIGRvbid0IHNjaGVkdWxlIGFub3RoZXJcclxuICAgIC8vIG9uZS4gSWYgYSBtaWNyb3Rhc2sgaGFzbid0IGJlZW4gc2NoZWR1bGVkIHlldCwgc2NoZWR1bGUgb25lIG5vdy4gUmV0dXJuXHJcbiAgICAvLyB0aGUgY3VycmVudCBzY2hlZHVsZWQgbWljcm90YXNrIGlkLlxyXG4gICAgcmV0dXJuIChcclxuICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlZCB8fFxyXG4gICAgICAoc2NoZWR1bGVyLnNjaGVkdWxlZCA9IEltbWVkaWF0ZS5zZXRJbW1lZGlhdGUoXHJcbiAgICAgICAgc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCB1bmRlZmluZWQpXHJcbiAgICAgICkpXHJcbiAgICApO1xyXG4gIH1cclxuICBwcm90ZWN0ZWQgcmVjeWNsZUFzeW5jSWQoXHJcbiAgICBzY2hlZHVsZXI6IEFzYXBTY2hlZHVsZXIsXHJcbiAgICBpZD86IGFueSxcclxuICAgIGRlbGF5OiBudW1iZXIgPSAwXHJcbiAgKTogYW55IHtcclxuICAgIC8vIElmIGRlbGF5IGV4aXN0cyBhbmQgaXMgZ3JlYXRlciB0aGFuIDAsIG9yIGlmIHRoZSBkZWxheSBpcyBudWxsICh0aGVcclxuICAgIC8vIGFjdGlvbiB3YXNuJ3QgcmVzY2hlZHVsZWQpIGJ1dCB3YXMgb3JpZ2luYWxseSBzY2hlZHVsZWQgYXMgYW4gYXN5bmNcclxuICAgIC8vIGFjdGlvbiwgdGhlbiByZWN5Y2xlIGFzIGFuIGFzeW5jIGFjdGlvbi5cclxuICAgIGlmICgoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB8fCAoZGVsYXkgPT09IG51bGwgJiYgdGhpcy5kZWxheSA+IDApKSB7XHJcbiAgICAgIHJldHVybiBzdXBlci5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XHJcbiAgICB9XHJcbiAgICAvLyBJZiB0aGUgc2NoZWR1bGVyIHF1ZXVlIGlzIGVtcHR5LCBjYW5jZWwgdGhlIHJlcXVlc3RlZCBtaWNyb3Rhc2sgYW5kXHJcbiAgICAvLyBzZXQgdGhlIHNjaGVkdWxlZCBmbGFnIHRvIHVuZGVmaW5lZCBzbyB0aGUgbmV4dCBBc2FwQWN0aW9uIHdpbGwgc2NoZWR1bGVcclxuICAgIC8vIGl0cyBvd24uXHJcbiAgICBpZiAoc2NoZWR1bGVyLmFjdGlvbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIEltbWVkaWF0ZS5jbGVhckltbWVkaWF0ZShpZCk7XHJcbiAgICAgIHNjaGVkdWxlci5zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICAvLyBSZXR1cm4gdW5kZWZpbmVkIHNvIHRoZSBhY3Rpb24ga25vd3MgdG8gcmVxdWVzdCBhIG5ldyBhc3luYyBpZCBpZiBpdCdzIHJlc2NoZWR1bGVkLlxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcbn1cclxuXHJcbmxldCBuZXh0SGFuZGxlID0gMTtcclxuLy8gVGhlIHByb21pc2UgbmVlZHMgdG8gYmUgY3JlYXRlZCBsYXppbHkgb3RoZXJ3aXNlIGl0IHdvbid0IGJlIHBhdGNoZWQgYnkgWm9uZXNcclxubGV0IHJlc29sdmVkOiBQcm9taXNlPGFueT47XHJcbmNvbnN0IGFjdGl2ZUhhbmRsZXM6IHsgW2tleTogbnVtYmVyXTogYW55IH0gPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBGaW5kcyB0aGUgaGFuZGxlIGluIHRoZSBsaXN0IG9mIGFjdGl2ZSBoYW5kbGVzLCBhbmQgcmVtb3ZlcyBpdC5cclxuICogUmV0dXJucyBgdHJ1ZWAgaWYgZm91bmQsIGBmYWxzZWAgb3RoZXJ3aXNlLiBVc2VkIGJvdGggdG8gY2xlYXJcclxuICogSW1tZWRpYXRlIHNjaGVkdWxlZCB0YXNrcywgYW5kIHRvIGlkZW50aWZ5IGlmIGEgdGFzayBzaG91bGQgYmUgc2NoZWR1bGVkLlxyXG4gKi9cclxuZnVuY3Rpb24gZmluZEFuZENsZWFySGFuZGxlKGhhbmRsZTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgaWYgKGhhbmRsZSBpbiBhY3RpdmVIYW5kbGVzKSB7XHJcbiAgICBkZWxldGUgYWN0aXZlSGFuZGxlc1toYW5kbGVdO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBmdW5jdGlvbnMgdG8gc2NoZWR1bGUgYW5kIHVuc2NoZWR1bGUgbWljcm90YXNrcy5cclxuICovXHJcbmNvbnN0IEltbWVkaWF0ZSA9IHtcclxuICBzZXRJbW1lZGlhdGUoY2I6ICgpID0+IHZvaWQpOiBudW1iZXIge1xyXG4gICAgY29uc3QgaGFuZGxlID0gbmV4dEhhbmRsZSsrO1xyXG4gICAgYWN0aXZlSGFuZGxlc1toYW5kbGVdID0gdHJ1ZTtcclxuICAgIGlmICghcmVzb2x2ZWQpIHtcclxuICAgICAgcmVzb2x2ZWQgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIHJlc29sdmVkLnRoZW4oKCkgPT4gZmluZEFuZENsZWFySGFuZGxlKGhhbmRsZSkgJiYgY2IoKSk7XHJcbiAgICByZXR1cm4gaGFuZGxlO1xyXG4gIH0sXHJcblxyXG4gIGNsZWFySW1tZWRpYXRlKGhhbmRsZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBmaW5kQW5kQ2xlYXJIYW5kbGUoaGFuZGxlKTtcclxuICB9LFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFVzZWQgZm9yIGludGVybmFsIHRlc3RpbmcgcHVycG9zZXMgb25seS4gRG8gbm90IGV4cG9ydCBmcm9tIGxpYnJhcnkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVGVzdFRvb2xzID0ge1xyXG4gIHBlbmRpbmcoKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoYWN0aXZlSGFuZGxlcykubGVuZ3RoO1xyXG4gIH0sXHJcbn07XHJcbiJdfQ==