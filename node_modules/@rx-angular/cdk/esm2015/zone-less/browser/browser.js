import { getZoneUnPatchedApi } from '../get-zone-unpatched-api';
/**
 * This file provides unpatched versions of APIs patched in the following file: https://github.com/angular/angular/blob/master/packages/zone.js/lib/browser/browser.ts
 */
/**
 * This function is a zone un-patched implementation of Window#queueMicrotask() method.
 * It is which is exposed on the Window or Worker interface,
 * queues a microtask to be executed at a safe time prior to control returning to the browser's event loop.
 * The microtask is a short function which will run after the current task has completed its
 * work and when there is no other code waiting to be run before control of the execution context is returned to the browser's event loop.
 */
export function queueMicrotask() {
    return getZoneUnPatchedApi('queueMicrotask');
}
export const Promise = getZoneUnPatchedApi('Promise');
/**
 * requestAnimationFrame
 *
 * @description
 *
 * This function is a zone un-patched implementation of Window#requestAnimationFrame() method
 *
 * The requestAnimationFrame() method calls a function or evaluates an expression on the next animationFrame.
 * The requestAnimationFrame() method will not continue calling the function after executed once.
 * The ID value returned by requestAnimationFrame() is used as the parameter for the cancelAnimationFrame() method.
 *
 * requestAnimationFrame(cb, ms);
 *
 * @param cb - Required. The function that will be executed
 *
 */
export function requestAnimationFrame(cb) {
    return getZoneUnPatchedApi('requestAnimationFrame')(cb);
}
/**
 * cancelAnimationFrame
 *
 * @description
 *
 * This function is a zone un-patched implementation of Window cancelAnimationFrame() method
 *
 * The cancelAnimationFrame() method clears a timer set with the requestAnimationFrame() method.
 * The ID value returned by requestAnimationFrame() is used as the parameter for the cancelAnimationFrame() method.
 *
 * To be able to use the cancelAnimationFrame() method, you must use a variable when creating the requestAnimationFrame method:
 *
 * const id = requestAnimationFrame("javascript function");
 * Then you will be able to stop the execution by calling the cancelAnimationFrame() method.
 *
 * cancelAnimationFrame(id);
 *
 * @param id {number} - Required. The ID value of the timer returned by the requestAnimationFrame() method
 *
 */
export function cancelAnimationFrame(id) {
    getZoneUnPatchedApi('cancelAnimationFrame')(id);
}
/**
 * setInterval
 *
 * @description
 *
 * This function is a zone un-patched implementation of Window setInterval() method
 *
 * The setInterval() method calls a function or evaluates an expression at specified intervals (in milliseconds).
 * The setInterval() method will continue calling the function until clearInterval() is called, or the window is closed.
 * The ID value returned by setInterval() is used as the parameter for the clearInterval() method.
 *
 * setInterval(cb, ms);
 *
 * @param cb - Required. The function that will be executed
 * @param ms - Required. The intervals (in milliseconds) on how often to execute the code. If the value is less than 10, the value 10 is used
 *
 */
export function setInterval(cb, ms = 0) {
    return getZoneUnPatchedApi('setInterval')(cb, ms);
}
/**
 * clearInterval
 *
 * @description
 *
 * This function is a zone un-patched implementation of Window clearInterval() method
 *
 * The clearInterval() method clears a timer set with the setInterval() method.
 * The ID value returned by setInterval() is used as the parameter for the clearInterval() method.
 *
 * To be able to use the clearInterval() method, you must use a variable when creating the interval method:
 *
 * const id = setInterval("javascript function", milliseconds);
 * Then you will be able to stop the execution by calling the clearInterval() method.
 *
 * clearInterval(id);
 *
 * @param id {number} - Required. The ID value of the timer returned by the setInterval() method
 *
 */
export function clearInterval(id) {
    return getZoneUnPatchedApi('clearInterval')(id);
}
/**
 * setTimeout
 *
 * @description
 *
 * This function is a zone un-patched implementation of Window setTimeout() method
 *
 * The setTimeout() method calls a function or evaluates an expression after a specified number of milliseconds.
 * The function is only executed once. If you need to repeat execution, use the setInterval() method.
 * Use the clearTimeout() method to prevent the function from running.
 *
 * setTimeout(cb, ms);
 *
 * @param cb - Required. The function that will be executed
 * @param ms - Optional. The number of milliseconds to wait before executing the code. If omitted, the value 0 is used
 *
 */
export function setTimeout(cb, ms = 0) {
    return getZoneUnPatchedApi('setTimeout')(cb, ms);
}
/**
 * clearTimeout
 *
 * @description
 *
 * This function is a zone un-patched implementation of Window#clearTimeout() method
 *
 * The clearTimeout() method clears a timer set with the setTimeout() method.
 * The ID value returned by setTimeout() is used as the parameter for the clearTimeout() method.
 *
 * const id = setTimeout("javascript function", milliseconds);
 * Then, if the function has not already been executed, you will be able to stop the execution by calling the clearTimeout() method.
 *
 * clearTimeout(id);
 *
 * @param id {number} -	Required. The ID value of the timer returned by the setTimeout() method
 *
 */
export function clearTimeout(id) {
    getZoneUnPatchedApi('clearTimeout')(id);
}
/**
 * This function is a zone un-patched implementation of Element#addEventListener() method.
 * @param target
 */
export function unpatchAddEventListener(target) {
    target.addEventListener = getZoneUnPatchedApi(target, 'addEventListener').bind(target);
    return target;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2RrL3pvbmUtbGVzcy9zcmMvYnJvd3Nlci9icm93c2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWhFOztHQUVHO0FBRUg7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGNBQWM7SUFDNUIsT0FBTyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQXVCLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTFFOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxFQUF3QjtJQUM1RCxPQUFPLG1CQUFtQixDQUFDLHVCQUF1QixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBRUgsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEVBQVU7SUFDN0MsbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLEVBQWdCLEVBQUUsS0FBYSxDQUFDO0lBQzFELE9BQU8sbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNILE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBVTtJQUN0QyxPQUFPLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNILE1BQU0sVUFBVSxVQUFVLENBQUMsRUFBZ0IsRUFBRSxLQUFhLENBQUM7SUFDekQsT0FBTyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsRUFBVTtJQUNyQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLHVCQUF1QixDQUF3QixNQUFTO0lBQ3RFLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FDM0MsTUFBTSxFQUNOLGtCQUFrQixDQUNuQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVmLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRab25lVW5QYXRjaGVkQXBpIH0gZnJvbSAnLi4vZ2V0LXpvbmUtdW5wYXRjaGVkLWFwaSc7XHJcblxyXG4vKipcclxuICogVGhpcyBmaWxlIHByb3ZpZGVzIHVucGF0Y2hlZCB2ZXJzaW9ucyBvZiBBUElzIHBhdGNoZWQgaW4gdGhlIGZvbGxvd2luZyBmaWxlOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3pvbmUuanMvbGliL2Jyb3dzZXIvYnJvd3Nlci50c1xyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGEgem9uZSB1bi1wYXRjaGVkIGltcGxlbWVudGF0aW9uIG9mIFdpbmRvdyNxdWV1ZU1pY3JvdGFzaygpIG1ldGhvZC5cclxuICogSXQgaXMgd2hpY2ggaXMgZXhwb3NlZCBvbiB0aGUgV2luZG93IG9yIFdvcmtlciBpbnRlcmZhY2UsXHJcbiAqIHF1ZXVlcyBhIG1pY3JvdGFzayB0byBiZSBleGVjdXRlZCBhdCBhIHNhZmUgdGltZSBwcmlvciB0byBjb250cm9sIHJldHVybmluZyB0byB0aGUgYnJvd3NlcidzIGV2ZW50IGxvb3AuXHJcbiAqIFRoZSBtaWNyb3Rhc2sgaXMgYSBzaG9ydCBmdW5jdGlvbiB3aGljaCB3aWxsIHJ1biBhZnRlciB0aGUgY3VycmVudCB0YXNrIGhhcyBjb21wbGV0ZWQgaXRzXHJcbiAqIHdvcmsgYW5kIHdoZW4gdGhlcmUgaXMgbm8gb3RoZXIgY29kZSB3YWl0aW5nIHRvIGJlIHJ1biBiZWZvcmUgY29udHJvbCBvZiB0aGUgZXhlY3V0aW9uIGNvbnRleHQgaXMgcmV0dXJuZWQgdG8gdGhlIGJyb3dzZXIncyBldmVudCBsb29wLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXVlTWljcm90YXNrKCkge1xyXG4gIHJldHVybiBnZXRab25lVW5QYXRjaGVkQXBpKCdxdWV1ZU1pY3JvdGFzaycpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yID0gZ2V0Wm9uZVVuUGF0Y2hlZEFwaSgnUHJvbWlzZScpO1xyXG5cclxuLyoqXHJcbiAqIHJlcXVlc3RBbmltYXRpb25GcmFtZVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHpvbmUgdW4tcGF0Y2hlZCBpbXBsZW1lbnRhdGlvbiBvZiBXaW5kb3cjcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgbWV0aG9kXHJcbiAqXHJcbiAqIFRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSBtZXRob2QgY2FsbHMgYSBmdW5jdGlvbiBvciBldmFsdWF0ZXMgYW4gZXhwcmVzc2lvbiBvbiB0aGUgbmV4dCBhbmltYXRpb25GcmFtZS5cclxuICogVGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpIG1ldGhvZCB3aWxsIG5vdCBjb250aW51ZSBjYWxsaW5nIHRoZSBmdW5jdGlvbiBhZnRlciBleGVjdXRlZCBvbmNlLlxyXG4gKiBUaGUgSUQgdmFsdWUgcmV0dXJuZWQgYnkgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgaXMgdXNlZCBhcyB0aGUgcGFyYW1ldGVyIGZvciB0aGUgY2FuY2VsQW5pbWF0aW9uRnJhbWUoKSBtZXRob2QuXHJcbiAqXHJcbiAqIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYiwgbXMpO1xyXG4gKlxyXG4gKiBAcGFyYW0gY2IgLSBSZXF1aXJlZC4gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYjogRnJhbWVSZXF1ZXN0Q2FsbGJhY2spOiBudW1iZXIge1xyXG4gIHJldHVybiBnZXRab25lVW5QYXRjaGVkQXBpKCdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnKShjYik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBjYW5jZWxBbmltYXRpb25GcmFtZVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHpvbmUgdW4tcGF0Y2hlZCBpbXBsZW1lbnRhdGlvbiBvZiBXaW5kb3cgY2FuY2VsQW5pbWF0aW9uRnJhbWUoKSBtZXRob2RcclxuICpcclxuICogVGhlIGNhbmNlbEFuaW1hdGlvbkZyYW1lKCkgbWV0aG9kIGNsZWFycyBhIHRpbWVyIHNldCB3aXRoIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSBtZXRob2QuXHJcbiAqIFRoZSBJRCB2YWx1ZSByZXR1cm5lZCBieSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSBpcyB1c2VkIGFzIHRoZSBwYXJhbWV0ZXIgZm9yIHRoZSBjYW5jZWxBbmltYXRpb25GcmFtZSgpIG1ldGhvZC5cclxuICpcclxuICogVG8gYmUgYWJsZSB0byB1c2UgdGhlIGNhbmNlbEFuaW1hdGlvbkZyYW1lKCkgbWV0aG9kLCB5b3UgbXVzdCB1c2UgYSB2YXJpYWJsZSB3aGVuIGNyZWF0aW5nIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgbWV0aG9kOlxyXG4gKlxyXG4gKiBjb25zdCBpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShcImphdmFzY3JpcHQgZnVuY3Rpb25cIik7XHJcbiAqIFRoZW4geW91IHdpbGwgYmUgYWJsZSB0byBzdG9wIHRoZSBleGVjdXRpb24gYnkgY2FsbGluZyB0aGUgY2FuY2VsQW5pbWF0aW9uRnJhbWUoKSBtZXRob2QuXHJcbiAqXHJcbiAqIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcclxuICpcclxuICogQHBhcmFtIGlkIHtudW1iZXJ9IC0gUmVxdWlyZWQuIFRoZSBJRCB2YWx1ZSBvZiB0aGUgdGltZXIgcmV0dXJuZWQgYnkgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpIG1ldGhvZFxyXG4gKlxyXG4gKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYW5jZWxBbmltYXRpb25GcmFtZShpZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgZ2V0Wm9uZVVuUGF0Y2hlZEFwaSgnY2FuY2VsQW5pbWF0aW9uRnJhbWUnKShpZCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBzZXRJbnRlcnZhbFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHpvbmUgdW4tcGF0Y2hlZCBpbXBsZW1lbnRhdGlvbiBvZiBXaW5kb3cgc2V0SW50ZXJ2YWwoKSBtZXRob2RcclxuICpcclxuICogVGhlIHNldEludGVydmFsKCkgbWV0aG9kIGNhbGxzIGEgZnVuY3Rpb24gb3IgZXZhbHVhdGVzIGFuIGV4cHJlc3Npb24gYXQgc3BlY2lmaWVkIGludGVydmFscyAoaW4gbWlsbGlzZWNvbmRzKS5cclxuICogVGhlIHNldEludGVydmFsKCkgbWV0aG9kIHdpbGwgY29udGludWUgY2FsbGluZyB0aGUgZnVuY3Rpb24gdW50aWwgY2xlYXJJbnRlcnZhbCgpIGlzIGNhbGxlZCwgb3IgdGhlIHdpbmRvdyBpcyBjbG9zZWQuXHJcbiAqIFRoZSBJRCB2YWx1ZSByZXR1cm5lZCBieSBzZXRJbnRlcnZhbCgpIGlzIHVzZWQgYXMgdGhlIHBhcmFtZXRlciBmb3IgdGhlIGNsZWFySW50ZXJ2YWwoKSBtZXRob2QuXHJcbiAqXHJcbiAqIHNldEludGVydmFsKGNiLCBtcyk7XHJcbiAqXHJcbiAqIEBwYXJhbSBjYiAtIFJlcXVpcmVkLiBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkXHJcbiAqIEBwYXJhbSBtcyAtIFJlcXVpcmVkLiBUaGUgaW50ZXJ2YWxzIChpbiBtaWxsaXNlY29uZHMpIG9uIGhvdyBvZnRlbiB0byBleGVjdXRlIHRoZSBjb2RlLiBJZiB0aGUgdmFsdWUgaXMgbGVzcyB0aGFuIDEwLCB0aGUgdmFsdWUgMTAgaXMgdXNlZFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEludGVydmFsKGNiOiBUaW1lckhhbmRsZXIsIG1zOiBudW1iZXIgPSAwKTogbnVtYmVyIHtcclxuICByZXR1cm4gZ2V0Wm9uZVVuUGF0Y2hlZEFwaSgnc2V0SW50ZXJ2YWwnKShjYiwgbXMpO1xyXG59XHJcblxyXG4vKipcclxuICogY2xlYXJJbnRlcnZhbFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHpvbmUgdW4tcGF0Y2hlZCBpbXBsZW1lbnRhdGlvbiBvZiBXaW5kb3cgY2xlYXJJbnRlcnZhbCgpIG1ldGhvZFxyXG4gKlxyXG4gKiBUaGUgY2xlYXJJbnRlcnZhbCgpIG1ldGhvZCBjbGVhcnMgYSB0aW1lciBzZXQgd2l0aCB0aGUgc2V0SW50ZXJ2YWwoKSBtZXRob2QuXHJcbiAqIFRoZSBJRCB2YWx1ZSByZXR1cm5lZCBieSBzZXRJbnRlcnZhbCgpIGlzIHVzZWQgYXMgdGhlIHBhcmFtZXRlciBmb3IgdGhlIGNsZWFySW50ZXJ2YWwoKSBtZXRob2QuXHJcbiAqXHJcbiAqIFRvIGJlIGFibGUgdG8gdXNlIHRoZSBjbGVhckludGVydmFsKCkgbWV0aG9kLCB5b3UgbXVzdCB1c2UgYSB2YXJpYWJsZSB3aGVuIGNyZWF0aW5nIHRoZSBpbnRlcnZhbCBtZXRob2Q6XHJcbiAqXHJcbiAqIGNvbnN0IGlkID0gc2V0SW50ZXJ2YWwoXCJqYXZhc2NyaXB0IGZ1bmN0aW9uXCIsIG1pbGxpc2Vjb25kcyk7XHJcbiAqIFRoZW4geW91IHdpbGwgYmUgYWJsZSB0byBzdG9wIHRoZSBleGVjdXRpb24gYnkgY2FsbGluZyB0aGUgY2xlYXJJbnRlcnZhbCgpIG1ldGhvZC5cclxuICpcclxuICogY2xlYXJJbnRlcnZhbChpZCk7XHJcbiAqXHJcbiAqIEBwYXJhbSBpZCB7bnVtYmVyfSAtIFJlcXVpcmVkLiBUaGUgSUQgdmFsdWUgb2YgdGhlIHRpbWVyIHJldHVybmVkIGJ5IHRoZSBzZXRJbnRlcnZhbCgpIG1ldGhvZFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFySW50ZXJ2YWwoaWQ6IG51bWJlcik6IHZvaWQge1xyXG4gIHJldHVybiBnZXRab25lVW5QYXRjaGVkQXBpKCdjbGVhckludGVydmFsJykoaWQpO1xyXG59XHJcblxyXG4vKipcclxuICogc2V0VGltZW91dFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHpvbmUgdW4tcGF0Y2hlZCBpbXBsZW1lbnRhdGlvbiBvZiBXaW5kb3cgc2V0VGltZW91dCgpIG1ldGhvZFxyXG4gKlxyXG4gKiBUaGUgc2V0VGltZW91dCgpIG1ldGhvZCBjYWxscyBhIGZ1bmN0aW9uIG9yIGV2YWx1YXRlcyBhbiBleHByZXNzaW9uIGFmdGVyIGEgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMuXHJcbiAqIFRoZSBmdW5jdGlvbiBpcyBvbmx5IGV4ZWN1dGVkIG9uY2UuIElmIHlvdSBuZWVkIHRvIHJlcGVhdCBleGVjdXRpb24sIHVzZSB0aGUgc2V0SW50ZXJ2YWwoKSBtZXRob2QuXHJcbiAqIFVzZSB0aGUgY2xlYXJUaW1lb3V0KCkgbWV0aG9kIHRvIHByZXZlbnQgdGhlIGZ1bmN0aW9uIGZyb20gcnVubmluZy5cclxuICpcclxuICogc2V0VGltZW91dChjYiwgbXMpO1xyXG4gKlxyXG4gKiBAcGFyYW0gY2IgLSBSZXF1aXJlZC4gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZFxyXG4gKiBAcGFyYW0gbXMgLSBPcHRpb25hbC4gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgZXhlY3V0aW5nIHRoZSBjb2RlLiBJZiBvbWl0dGVkLCB0aGUgdmFsdWUgMCBpcyB1c2VkXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0VGltZW91dChjYjogVGltZXJIYW5kbGVyLCBtczogbnVtYmVyID0gMCk6IG51bWJlciB7XHJcbiAgcmV0dXJuIGdldFpvbmVVblBhdGNoZWRBcGkoJ3NldFRpbWVvdXQnKShjYiwgbXMpO1xyXG59XHJcblxyXG4vKipcclxuICogY2xlYXJUaW1lb3V0XHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGEgem9uZSB1bi1wYXRjaGVkIGltcGxlbWVudGF0aW9uIG9mIFdpbmRvdyNjbGVhclRpbWVvdXQoKSBtZXRob2RcclxuICpcclxuICogVGhlIGNsZWFyVGltZW91dCgpIG1ldGhvZCBjbGVhcnMgYSB0aW1lciBzZXQgd2l0aCB0aGUgc2V0VGltZW91dCgpIG1ldGhvZC5cclxuICogVGhlIElEIHZhbHVlIHJldHVybmVkIGJ5IHNldFRpbWVvdXQoKSBpcyB1c2VkIGFzIHRoZSBwYXJhbWV0ZXIgZm9yIHRoZSBjbGVhclRpbWVvdXQoKSBtZXRob2QuXHJcbiAqXHJcbiAqIGNvbnN0IGlkID0gc2V0VGltZW91dChcImphdmFzY3JpcHQgZnVuY3Rpb25cIiwgbWlsbGlzZWNvbmRzKTtcclxuICogVGhlbiwgaWYgdGhlIGZ1bmN0aW9uIGhhcyBub3QgYWxyZWFkeSBiZWVuIGV4ZWN1dGVkLCB5b3Ugd2lsbCBiZSBhYmxlIHRvIHN0b3AgdGhlIGV4ZWN1dGlvbiBieSBjYWxsaW5nIHRoZSBjbGVhclRpbWVvdXQoKSBtZXRob2QuXHJcbiAqXHJcbiAqIGNsZWFyVGltZW91dChpZCk7XHJcbiAqXHJcbiAqIEBwYXJhbSBpZCB7bnVtYmVyfSAtXHRSZXF1aXJlZC4gVGhlIElEIHZhbHVlIG9mIHRoZSB0aW1lciByZXR1cm5lZCBieSB0aGUgc2V0VGltZW91dCgpIG1ldGhvZFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyVGltZW91dChpZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgZ2V0Wm9uZVVuUGF0Y2hlZEFwaSgnY2xlYXJUaW1lb3V0JykoaWQpO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHpvbmUgdW4tcGF0Y2hlZCBpbXBsZW1lbnRhdGlvbiBvZiBFbGVtZW50I2FkZEV2ZW50TGlzdGVuZXIoKSBtZXRob2QuXHJcbiAqIEBwYXJhbSB0YXJnZXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1bnBhdGNoQWRkRXZlbnRMaXN0ZW5lcjxUIGV4dGVuZHMgRXZlbnRUYXJnZXQ+KHRhcmdldDogVCk6IFQge1xyXG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyID0gZ2V0Wm9uZVVuUGF0Y2hlZEFwaShcclxuICAgIHRhcmdldCxcclxuICAgICdhZGRFdmVudExpc3RlbmVyJ1xyXG4gICkuYmluZCh0YXJnZXQpO1xyXG5cclxuICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbiJdfQ==