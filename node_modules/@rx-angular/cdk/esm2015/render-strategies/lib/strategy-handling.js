import { ReplaySubject } from 'rxjs';
import { map, share, startWith, switchAll } from 'rxjs/operators';
import { coerceAllFactory } from '@rx-angular/cdk/coercing';
/**
 * @internal
 *
 * A factory function returning an object to handle the process of turning strategy names into `RxStrategyCredentials`
 * You can next a strategy name as Observable or string and get an Observable of `RxStrategyCredentials`
 *
 * @param defaultStrategyName
 * @param strategies
 */
export function strategyHandling(defaultStrategyName, strategies) {
    const hotFlattened = coerceAllFactory(() => new ReplaySubject(1), switchAll());
    return {
        strategy$: hotFlattened.values$.pipe(startWith(defaultStrategyName), nameToStrategyCredentials(strategies, defaultStrategyName), share()),
        next(name) {
            hotFlattened.next(name);
        },
    };
}
/**
 * @internal
 */
function nameToStrategyCredentials(strategies, defaultStrategyName) {
    return (o$) => o$.pipe(map((name) => name && Object.keys(strategies).includes(name)
        ? strategies[name]
        : strategies[defaultStrategyName]));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3ktaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay9yZW5kZXItc3RyYXRlZ2llcy9zcmMvbGliL3N0cmF0ZWd5LWhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBUTVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixtQkFBMkIsRUFDM0IsVUFBK0M7SUFFL0MsTUFBTSxZQUFZLEdBQUcsZ0JBQWdCLENBQ25DLEdBQUcsRUFBRSxDQUFDLElBQUksYUFBYSxDQUE4QixDQUFDLENBQUMsRUFDdkQsU0FBUyxFQUFFLENBQ1osQ0FBQztJQUNGLE9BQU87UUFDTCxTQUFTLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ2xDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxFQUM5Qix5QkFBeUIsQ0FBQyxVQUFVLEVBQUUsbUJBQW1CLENBQUMsRUFDMUQsS0FBSyxFQUFFLENBQzZCO1FBQ3RDLElBQUksQ0FBQyxJQUFpQztZQUNwQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyx5QkFBeUIsQ0FDaEMsVUFBK0MsRUFDL0MsbUJBQTJCO0lBRTNCLE9BQU8sQ0FDTCxFQUF5QyxFQUNOLEVBQUUsQ0FDckMsRUFBRSxDQUFDLElBQUksQ0FDTCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNYLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDNUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDbEIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUNwQyxDQUNGLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHNoYXJlLCBzdGFydFdpdGgsIHN3aXRjaEFsbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IGNvZXJjZUFsbEZhY3RvcnkgfSBmcm9tICdAcngtYW5ndWxhci9jZGsvY29lcmNpbmcnO1xyXG5pbXBvcnQgeyBSeEN1c3RvbVN0cmF0ZWd5Q3JlZGVudGlhbHMsIFJ4U3RyYXRlZ3lDcmVkZW50aWFscyB9IGZyb20gJy4vbW9kZWwnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSeFN0cmF0ZWd5SGFuZGxlciB7XHJcbiAgc3RyYXRlZ3kkOiBPYnNlcnZhYmxlPFJ4U3RyYXRlZ3lDcmVkZW50aWFscz47XHJcbiAgbmV4dChuYW1lOiBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz4pOiB2b2lkO1xyXG59XHJcblxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqXHJcbiAqIEEgZmFjdG9yeSBmdW5jdGlvbiByZXR1cm5pbmcgYW4gb2JqZWN0IHRvIGhhbmRsZSB0aGUgcHJvY2VzcyBvZiB0dXJuaW5nIHN0cmF0ZWd5IG5hbWVzIGludG8gYFJ4U3RyYXRlZ3lDcmVkZW50aWFsc2BcclxuICogWW91IGNhbiBuZXh0IGEgc3RyYXRlZ3kgbmFtZSBhcyBPYnNlcnZhYmxlIG9yIHN0cmluZyBhbmQgZ2V0IGFuIE9ic2VydmFibGUgb2YgYFJ4U3RyYXRlZ3lDcmVkZW50aWFsc2BcclxuICpcclxuICogQHBhcmFtIGRlZmF1bHRTdHJhdGVneU5hbWVcclxuICogQHBhcmFtIHN0cmF0ZWdpZXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJhdGVneUhhbmRsaW5nKFxyXG4gIGRlZmF1bHRTdHJhdGVneU5hbWU6IHN0cmluZyxcclxuICBzdHJhdGVnaWVzOiBSeEN1c3RvbVN0cmF0ZWd5Q3JlZGVudGlhbHM8c3RyaW5nPlxyXG4pOiBSeFN0cmF0ZWd5SGFuZGxlciB7XHJcbiAgY29uc3QgaG90RmxhdHRlbmVkID0gY29lcmNlQWxsRmFjdG9yeTxzdHJpbmc+KFxyXG4gICAgKCkgPT4gbmV3IFJlcGxheVN1YmplY3Q8c3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+PigxKSxcclxuICAgIHN3aXRjaEFsbCgpXHJcbiAgKTtcclxuICByZXR1cm4ge1xyXG4gICAgc3RyYXRlZ3kkOiBob3RGbGF0dGVuZWQudmFsdWVzJC5waXBlKFxyXG4gICAgICBzdGFydFdpdGgoZGVmYXVsdFN0cmF0ZWd5TmFtZSksXHJcbiAgICAgIG5hbWVUb1N0cmF0ZWd5Q3JlZGVudGlhbHMoc3RyYXRlZ2llcywgZGVmYXVsdFN0cmF0ZWd5TmFtZSksXHJcbiAgICAgIHNoYXJlKClcclxuICAgICkgYXMgT2JzZXJ2YWJsZTxSeFN0cmF0ZWd5Q3JlZGVudGlhbHM+LFxyXG4gICAgbmV4dChuYW1lOiBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz4pIHtcclxuICAgICAgaG90RmxhdHRlbmVkLm5leHQobmFtZSk7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIG5hbWVUb1N0cmF0ZWd5Q3JlZGVudGlhbHMoXHJcbiAgc3RyYXRlZ2llczogUnhDdXN0b21TdHJhdGVneUNyZWRlbnRpYWxzPHN0cmluZz4sXHJcbiAgZGVmYXVsdFN0cmF0ZWd5TmFtZTogc3RyaW5nXHJcbikge1xyXG4gIHJldHVybiAoXHJcbiAgICBvJDogT2JzZXJ2YWJsZTxzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPlxyXG4gICk6IE9ic2VydmFibGU8UnhTdHJhdGVneUNyZWRlbnRpYWxzPiA9PlxyXG4gICAgbyQucGlwZShcclxuICAgICAgbWFwKChuYW1lKSA9PlxyXG4gICAgICAgIG5hbWUgJiYgT2JqZWN0LmtleXMoc3RyYXRlZ2llcykuaW5jbHVkZXMobmFtZSlcclxuICAgICAgICAgID8gc3RyYXRlZ2llc1tuYW1lXVxyXG4gICAgICAgICAgOiBzdHJhdGVnaWVzW2RlZmF1bHRTdHJhdGVneU5hbWVdXHJcbiAgICAgIClcclxuICAgICk7XHJcbn1cclxuIl19