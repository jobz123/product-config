import { Observable } from 'rxjs';
import { filter, mapTo, switchMap } from 'rxjs/operators';
import { cancelCallback, scheduleCallback, forceFrameRate, } from '@rx-angular/cdk/internals/scheduler';
import { coalescingManager } from '@rx-angular/cdk/coalescing';
forceFrameRate(60);
const ɵ0 = (cdRef) => cdRef.detectChanges(), ɵ1 = (work, scope) => {
    return (o$) => o$.pipe(scheduleOnQueue(work, { priority: 0 /* NoPriority */, scope }));
};
const noPriorityStrategy = {
    name: 'noPriority',
    work: ɵ0,
    behavior: ɵ1,
};
const ɵ2 = (cdRef) => cdRef.detectChanges(), ɵ3 = (work, scope) => {
    return (o$) => o$.pipe(scheduleOnQueue(work, {
        priority: 1 /* ImmediatePriority */,
        scope,
    }));
};
const immediateStrategy = {
    name: 'immediate',
    work: ɵ2,
    behavior: ɵ3,
};
const ɵ4 = (cdRef) => cdRef.detectChanges(), ɵ5 = (work, scope) => {
    return (o$) => o$.pipe(scheduleOnQueue(work, {
        priority: 2 /* UserBlockingPriority */,
        scope,
    }));
};
const userBlockingStrategy = {
    name: 'userBlocking',
    work: ɵ4,
    behavior: ɵ5,
};
const ɵ6 = (cdRef) => cdRef.detectChanges(), ɵ7 = (work, scope) => {
    return (o$) => o$.pipe(scheduleOnQueue(work, { priority: 3 /* NormalPriority */, scope }));
};
const normalStrategy = {
    name: 'normal',
    work: ɵ6,
    behavior: ɵ7,
};
const ɵ8 = (cdRef) => cdRef.detectChanges(), ɵ9 = (work, scope) => {
    return (o$) => o$.pipe(scheduleOnQueue(work, { priority: 4 /* LowPriority */, scope }));
};
const lowStrategy = {
    name: 'low',
    work: ɵ8,
    behavior: ɵ9,
};
const ɵ10 = (cdRef) => cdRef.detectChanges(), ɵ11 = (work, scope) => {
    return (o$) => o$.pipe(scheduleOnQueue(work, { priority: 5 /* IdlePriority */, scope }));
};
const idleStrategy = {
    name: 'idle',
    work: ɵ10,
    behavior: ɵ11,
};
function scheduleOnQueue(work, options) {
    return (o$) => o$.pipe(filter(() => !coalescingManager.isCoalescing(options.scope)), switchMap((v) => new Observable((subscriber) => {
        coalescingManager.add(options.scope);
        const task = scheduleCallback(options.priority, () => {
            work();
            coalescingManager.remove(options.scope);
            subscriber.next(v);
        }, { delay: options.delay });
        return () => {
            coalescingManager.remove(options.scope);
            cancelCallback(task);
        };
    }).pipe(mapTo(v))));
}
export const RX_CONCURRENT_STRATEGIES = {
    noPriority: noPriorityStrategy,
    immediate: immediateStrategy,
    userBlocking: userBlockingStrategy,
    normal: normalStrategy,
    low: lowStrategy,
    idle: idleStrategy,
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11 };
//# sourceMappingURL=data:application/json;base64,