import { ɵmarkDirty as markDirty } from '@angular/core';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { coalesceWith } from '@rx-angular/cdk/coalescing';
import { cancelAnimationFrame, requestAnimationFrame, } from '@rx-angular/cdk/zone-less';
const animationFrameTick = () => new Observable((subscriber) => {
    const id = requestAnimationFrame(() => {
        subscriber.next(0);
        subscriber.complete();
    });
    return () => {
        cancelAnimationFrame(id);
    };
});
const ɵ0 = animationFrameTick;
const ɵ1 = (cdRef, _, notification) => {
    cdRef.detectChanges();
}, ɵ2 = (work, scope) => (o$) => o$.pipe(coalesceWith(animationFrameTick(), scope), tap(() => work()));
const localCredentials = {
    name: 'local',
    work: ɵ1,
    behavior: ɵ2,
};
const ɵ3 = (_, context) => markDirty(context), ɵ4 = (work) => (o$) => o$.pipe(tap(() => work()));
const globalCredentials = {
    name: 'global',
    work: ɵ3,
    behavior: ɵ4,
};
const ɵ5 = () => void 0, ɵ6 = () => (o$) => o$;
const noopCredentials = {
    name: 'noop',
    work: ɵ5,
    behavior: ɵ6,
};
const ɵ7 = (cdRef) => cdRef.markForCheck(), ɵ8 = (work) => (o$) => o$.pipe(tap(() => work()));
const nativeCredentials = {
    name: 'native',
    work: ɵ7,
    behavior: ɵ8,
};
export const RX_NATIVE_STRATEGIES = {
    global: globalCredentials,
    native: nativeCredentials,
    noop: noopCredentials,
    local: localCredentials,
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXN0cmF0ZWdpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay9yZW5kZXItc3RyYXRlZ2llcy9zcmMvbGliL25hdGl2ZS1zdHJhdGVnaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLElBQUksU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMxRCxPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLHFCQUFxQixHQUN0QixNQUFNLDJCQUEyQixDQUFDO0FBR25DLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxFQUFFLENBQzlCLElBQUksVUFBVSxDQUFTLENBQUMsVUFBVSxFQUFFLEVBQUU7SUFDcEMsTUFBTSxFQUFFLEdBQUcscUJBQXFCLENBQUMsR0FBRyxFQUFFO1FBQ3BDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxHQUFHLEVBQUU7UUFDVixvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQzs7V0FJRyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLEVBQUU7SUFDL0IsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3hCLENBQUMsT0FFQyxDQUFDLElBQXdCLEVBQUUsS0FBOEIsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUNuRSxFQUFFLENBQUMsSUFBSSxDQUNMLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUN6QyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FDbEI7QUFWUCxNQUFNLGdCQUFnQixHQUEwQjtJQUM5QyxJQUFJLEVBQUUsT0FBTztJQUNiLElBQUksSUFFSDtJQUNELFFBQVEsSUFLSDtDQUNOLENBQUM7V0FJTSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FDOUIsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBSDdELE1BQU0saUJBQWlCLEdBQTBCO0lBQy9DLElBQUksRUFBRSxRQUFRO0lBQ2QsSUFBSSxJQUFvQztJQUN4QyxRQUFRLElBQW1EO0NBQzVELENBQUM7V0FJTSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FDUixHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUg1QixNQUFNLGVBQWUsR0FBMEI7SUFDN0MsSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLElBQWM7SUFDbEIsUUFBUSxJQUFrQjtDQUMzQixDQUFDO1dBSU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsT0FDM0IsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBSDdELE1BQU0saUJBQWlCLEdBQTBCO0lBQy9DLElBQUksRUFBRSxRQUFRO0lBQ2QsSUFBSSxJQUFpQztJQUNyQyxRQUFRLElBQW1EO0NBQzVELENBQUM7QUFJRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBdUI7SUFDdEQsTUFBTSxFQUFFLGlCQUFpQjtJQUN6QixNQUFNLEVBQUUsaUJBQWlCO0lBQ3pCLElBQUksRUFBRSxlQUFlO0lBQ3JCLEtBQUssRUFBRSxnQkFBZ0I7Q0FDeEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IMm1bWFya0RpcnR5IGFzIG1hcmtEaXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgY29hbGVzY2VXaXRoIH0gZnJvbSAnQHJ4LWFuZ3VsYXIvY2RrL2NvYWxlc2NpbmcnO1xyXG5pbXBvcnQge1xyXG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lLFxyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSxcclxufSBmcm9tICdAcngtYW5ndWxhci9jZGsvem9uZS1sZXNzJztcclxuaW1wb3J0IHsgUnhDdXN0b21TdHJhdGVneUNyZWRlbnRpYWxzLCBSeE5hdGl2ZVN0cmF0ZWd5TmFtZXMsIFJ4UmVuZGVyV29yaywgUnhTdHJhdGVneUNyZWRlbnRpYWxzIH0gZnJvbSAnLi9tb2RlbCc7XHJcblxyXG5jb25zdCBhbmltYXRpb25GcmFtZVRpY2sgPSAoKSA9PlxyXG4gIG5ldyBPYnNlcnZhYmxlPG51bWJlcj4oKHN1YnNjcmliZXIpID0+IHtcclxuICAgIGNvbnN0IGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgc3Vic2NyaWJlci5uZXh0KDApO1xyXG4gICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcclxuICAgIH07XHJcbiAgfSk7XHJcblxyXG5jb25zdCBsb2NhbENyZWRlbnRpYWxzOiBSeFN0cmF0ZWd5Q3JlZGVudGlhbHMgPSB7XHJcbiAgbmFtZTogJ2xvY2FsJyxcclxuICB3b3JrOiAoY2RSZWYsIF8sIG5vdGlmaWNhdGlvbikgPT4ge1xyXG4gICAgY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gIH0sXHJcbiAgYmVoYXZpb3I6XHJcbiAgICAod29yazogKCkgPT4gUnhSZW5kZXJXb3JrLCBzY29wZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pID0+IChvJCkgPT5cclxuICAgICAgbyQucGlwZShcclxuICAgICAgICBjb2FsZXNjZVdpdGgoYW5pbWF0aW9uRnJhbWVUaWNrKCksIHNjb3BlKSxcclxuICAgICAgICB0YXAoKCkgPT4gd29yaygpKVxyXG4gICAgICApLFxyXG59O1xyXG5cclxuY29uc3QgZ2xvYmFsQ3JlZGVudGlhbHM6IFJ4U3RyYXRlZ3lDcmVkZW50aWFscyA9IHtcclxuICBuYW1lOiAnZ2xvYmFsJyxcclxuICB3b3JrOiAoXywgY29udGV4dCkgPT4gbWFya0RpcnR5KGNvbnRleHQpLFxyXG4gIGJlaGF2aW9yOiAod29yazogYW55KSA9PiAobyQpID0+IG8kLnBpcGUodGFwKCgpID0+IHdvcmsoKSkpLFxyXG59O1xyXG5cclxuY29uc3Qgbm9vcENyZWRlbnRpYWxzOiBSeFN0cmF0ZWd5Q3JlZGVudGlhbHMgPSB7XHJcbiAgbmFtZTogJ25vb3AnLFxyXG4gIHdvcms6ICgpID0+IHZvaWQgMCxcclxuICBiZWhhdmlvcjogKCkgPT4gKG8kKSA9PiBvJCxcclxufTtcclxuXHJcbmNvbnN0IG5hdGl2ZUNyZWRlbnRpYWxzOiBSeFN0cmF0ZWd5Q3JlZGVudGlhbHMgPSB7XHJcbiAgbmFtZTogJ25hdGl2ZScsXHJcbiAgd29yazogKGNkUmVmKSA9PiBjZFJlZi5tYXJrRm9yQ2hlY2soKSxcclxuICBiZWhhdmlvcjogKHdvcms6IGFueSkgPT4gKG8kKSA9PiBvJC5waXBlKHRhcCgoKSA9PiB3b3JrKCkpKSxcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFJ4TmF0aXZlU3RyYXRlZ2llcyA9XHJcbiAgUnhDdXN0b21TdHJhdGVneUNyZWRlbnRpYWxzPFJ4TmF0aXZlU3RyYXRlZ3lOYW1lcz47XHJcbmV4cG9ydCBjb25zdCBSWF9OQVRJVkVfU1RSQVRFR0lFUzogUnhOYXRpdmVTdHJhdGVnaWVzID0ge1xyXG4gIGdsb2JhbDogZ2xvYmFsQ3JlZGVudGlhbHMsXHJcbiAgbmF0aXZlOiBuYXRpdmVDcmVkZW50aWFscyxcclxuICBub29wOiBub29wQ3JlZGVudGlhbHMsXHJcbiAgbG9jYWw6IGxvY2FsQ3JlZGVudGlhbHMsXHJcbn07XHJcbiJdfQ==