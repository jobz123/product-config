import { Inject, Injectable, Optional, } from '@angular/core';
import { BehaviorSubject, fromEvent, } from 'rxjs';
import { map, shareReplay, switchMap, takeUntil } from 'rxjs/operators';
import { mergeDefaultConfig, RX_ANGULAR_CONFIG } from './config';
import { onStrategy } from './onStrategy';
import * as i0 from "@angular/core";
import * as i1 from "./config";
/**
 * @description
 * RxStrategyProvider is a wrapper service that you can use to consume strategies and schedule your code execution.
 *
 * @example
 * Component({
 *   selector: 'app-service-communicator',
 *   template: ``
 * });
 * export class ServiceCommunicationComponent {
 *   private currentUserSettings;
 *
 *   constructor(
 *     private strategyProvider: RxStrategyProvider,
 *     private userService: UserService,
 *     private backgroundSync: BackgroundSyncService
 *   ) {
 *     this.userService.fetchCurrentUserSettings
 *       .pipe(
 *         tap(settings => (this.currentUserSettings = settings)),
 *         this.strategyProvider.scheduleWith(
 *           settings => this.backgroundSync.openConnection(settings),
 *           { strategy: 'idle' }
 *         )
 *       )
 *       .subscribe();
 *   }
 * }
 *
 * @docsCategory RxStrategyProvider
 * @docsPage RxStrategyProvider
 */
export class RxStrategyProvider {
    /**
     * @internal
     */
    constructor(cfg) {
        this._strategies$ = new BehaviorSubject(undefined);
        this._primaryStrategy$ = new BehaviorSubject(undefined);
        /**
         * @description
         * Current strategy of the service as an observable.
         */
        this.primaryStrategy$ = this._primaryStrategy$.asObservable();
        /**
         * @description
         * Returns observable of an object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.
         */
        this.strategies$ = this._strategies$.asObservable();
        /**
         * @description
         * Returns an observable of an array of strategy names available in the service.
         */
        this.strategyNames$ = this.strategies$.pipe(map((strategies) => Object.values(strategies).map((s) => s.name)), shareReplay({ bufferSize: 1, refCount: true }));
        this._cfg = mergeDefaultConfig(cfg);
        this._strategies$.next(this._cfg.customStrategies);
        this.primaryStrategy = this.config.primaryStrategy;
    }
    /**
     * @description
     * Returns current `RxAngularConfig` used in the service.
     * Config includes:
     * - strategy that currently in use - `primaryStrategy`
     * - array of custom user defined strategies - `customStrategies`
     * - setting that is responsible for running in our outside of the zone.js - `patchZone`
     */
    get config() {
        return this._cfg;
    }
    /**
     * @description
     * Returns object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.
     */
    get strategies() {
        return this._strategies$.getValue();
    }
    /**
     * @description
     * Returns an array of strategy names available in the service.
     */
    get strategyNames() {
        return Object.values(this.strategies).map((s) => s.name);
    }
    /**
     * @description
     * Returns current strategy of the service.
     */
    get primaryStrategy() {
        return this._primaryStrategy$.getValue().name;
    }
    /**
     * @description
     * Set's the strategy that will be used by the service.
     */
    set primaryStrategy(strategyName) {
        this._primaryStrategy$.next(this.strategies[strategyName]);
    }
    /**
     * @description
     * Allows to schedule a work inside rxjs `pipe`. Accepts the work and configuration options object.
     * - work is any function that should be executed
     * - (optional) options includes strategy, patchZone and scope
     *
     * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.
     * Scope setup is useful if your work is some of the methods of `ChangeDetectorRef`. Only one change detection will be triggered if you have multiple schedules of change detection methods and scope is set to `this`.
     *
     * @example
     * myObservable$.pipe(
     *    this.strategyProvider.scheduleWith(() => myWork(), {strategy: 'idle', patchZone: false})
     * ).subscribe();
     *
     * @return MonoTypeOperatorFunction<R>
     */
    scheduleWith(work, options) {
        const strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];
        const scope = (options === null || options === void 0 ? void 0 : options.scope) || {};
        const _work = getWork(work, options === null || options === void 0 ? void 0 : options.patchZone);
        return (o$) => o$.pipe(switchMap((v) => onStrategy(v, strategy, (_v) => {
            _work(_v);
        }, { scope })));
    }
    /**
     * @description
     * Allows to schedule a work as an observable. Accepts the work and configuration options object.
     * - work is any function that should be executed
     * - (optional) options includes strategy, patchZone and scope
     *
     * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.
     * Scope setup is especially useful if you provide work that will trigger a change detection.
     *
     * @example
     * this.strategyProvider.schedule(() => myWork(), {strategy: 'idle', patchZone: false}).subscribe();
     *
     * @return Observable<R>
     */
    schedule(work, options) {
        const strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];
        const scope = (options === null || options === void 0 ? void 0 : options.scope) || {};
        const _work = getWork(work, options === null || options === void 0 ? void 0 : options.patchZone);
        let returnVal;
        return onStrategy(null, strategy, () => {
            returnVal = _work();
        }, { scope }).pipe(map(() => returnVal));
    }
    /**
     * @description
     * Allows to schedule a change detection cycle. Accepts the ChangeDetectorRef and configuration options object.
     * Options include:
     * - afterCD which is the work that should be executed after change detection cycle.
     * - abortCtrl is an AbortController that you can use to cancel the scheduled cycle.
     *
     * @example
     * this.strategyProvider.scheduleCd(this.changeDetectorRef, {afterCD: myWork()});
     *
     * @return AbortController
     */
    scheduleCD(cdRef, options) {
        const strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];
        const scope = (options === null || options === void 0 ? void 0 : options.scope) || cdRef;
        const abC = (options === null || options === void 0 ? void 0 : options.abortCtrl) || new AbortController();
        const work = getWork(() => {
            strategy.work(cdRef, scope);
            if (options === null || options === void 0 ? void 0 : options.afterCD) {
                options.afterCD();
            }
        }, options.patchZone);
        onStrategy(null, strategy, () => {
            work();
        }, { scope })
            .pipe(takeUntil(fromEvent(abC.signal, 'abort')))
            .subscribe();
        return abC;
    }
}
/** @nocollapse */ RxStrategyProvider.ɵprov = i0.ɵɵdefineInjectable({ factory: function RxStrategyProvider_Factory() { return new RxStrategyProvider(i0.ɵɵinject(i1.RX_ANGULAR_CONFIG, 8)); }, token: RxStrategyProvider, providedIn: "root" });
/** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
RxStrategyProvider.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/**
 * @type {function(): !Array<(null|{
 *   type: ?,
 *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),
 * })>}
 * @nocollapse
 */
RxStrategyProvider.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RX_ANGULAR_CONFIG,] }] }
];
function getWork(work, patchZone) {
    let _work = work;
    if (patchZone) {
        _work = (args) => patchZone.run(() => work(args));
    }
    return _work;
}
//# sourceMappingURL=data:application/json;base64,