import { distinctUntilChanged, switchAll } from 'rxjs/operators';
import { coerceObservableWith } from './coerceObservableWith';
/**
 * This operator takes an Observable of values ot Observables aof values and
 * It forwards only distinct values from distinct incoming Observables or values.
 * This comes in handy in any environment where you handle processing of incoming dynamic values and their state.
 *
 * Optionally you can pass a flatten strategy to get find grained control of the flattening process. E.g. mergeAll, switchAll
 *
 * @param flattenOperator - determines the flattening strategy e.g. mergeAll, concatAll, exhaust, switchAll. default is switchAll
 *
 */
export function coerceDistinctWith(flattenOperator) {
    flattenOperator = flattenOperator || switchAll();
    return (o$) => o$.pipe(coerceObservableWith(), distinctUntilChanged(), flattenOperator, distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29lcmNlRGlzdGluY3RPYnNlcnZhYmxlV2l0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2RrL2NvZXJjaW5nL3NyYy9saWIvY29lcmNlRGlzdGluY3RPYnNlcnZhYmxlV2l0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQUUsb0JBQW9CLEVBQU8sU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFOUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLGtCQUFrQixDQUNoQyxlQUF5RDtJQUV6RCxlQUFlLEdBQUcsZUFBZSxJQUFJLFNBQVMsRUFBRSxDQUFDO0lBQ2pELE9BQU8sQ0FBQyxFQUFpQyxFQUFFLEVBQUUsQ0FDM0MsRUFBRSxDQUFDLElBQUksQ0FDTCxvQkFBb0IsRUFBRSxFQUN0QixvQkFBb0IsRUFBRSxFQUN0QixlQUFlLEVBQ2Ysb0JBQW9CLEVBQUUsQ0FDdkIsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIGlzT2JzZXJ2YWJsZSxcclxuICBPYnNlcnZhYmxlLFxyXG4gIE9ic2VydmFibGVJbnB1dCxcclxuICBvZixcclxuICBPcGVyYXRvckZ1bmN0aW9uLFxyXG59IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzd2l0Y2hBbGwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGNvZXJjZU9ic2VydmFibGVXaXRoIH0gZnJvbSAnLi9jb2VyY2VPYnNlcnZhYmxlV2l0aCc7XHJcblxyXG4vKipcclxuICogVGhpcyBvcGVyYXRvciB0YWtlcyBhbiBPYnNlcnZhYmxlIG9mIHZhbHVlcyBvdCBPYnNlcnZhYmxlcyBhb2YgdmFsdWVzIGFuZFxyXG4gKiBJdCBmb3J3YXJkcyBvbmx5IGRpc3RpbmN0IHZhbHVlcyBmcm9tIGRpc3RpbmN0IGluY29taW5nIE9ic2VydmFibGVzIG9yIHZhbHVlcy5cclxuICogVGhpcyBjb21lcyBpbiBoYW5keSBpbiBhbnkgZW52aXJvbm1lbnQgd2hlcmUgeW91IGhhbmRsZSBwcm9jZXNzaW5nIG9mIGluY29taW5nIGR5bmFtaWMgdmFsdWVzIGFuZCB0aGVpciBzdGF0ZS5cclxuICpcclxuICogT3B0aW9uYWxseSB5b3UgY2FuIHBhc3MgYSBmbGF0dGVuIHN0cmF0ZWd5IHRvIGdldCBmaW5kIGdyYWluZWQgY29udHJvbCBvZiB0aGUgZmxhdHRlbmluZyBwcm9jZXNzLiBFLmcuIG1lcmdlQWxsLCBzd2l0Y2hBbGxcclxuICpcclxuICogQHBhcmFtIGZsYXR0ZW5PcGVyYXRvciAtIGRldGVybWluZXMgdGhlIGZsYXR0ZW5pbmcgc3RyYXRlZ3kgZS5nLiBtZXJnZUFsbCwgY29uY2F0QWxsLCBleGhhdXN0LCBzd2l0Y2hBbGwuIGRlZmF1bHQgaXMgc3dpdGNoQWxsXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29lcmNlRGlzdGluY3RXaXRoPFQ+KFxyXG4gIGZsYXR0ZW5PcGVyYXRvcj86IE9wZXJhdG9yRnVuY3Rpb248T2JzZXJ2YWJsZUlucHV0PFQ+LCBUPlxyXG4pIHtcclxuICBmbGF0dGVuT3BlcmF0b3IgPSBmbGF0dGVuT3BlcmF0b3IgfHwgc3dpdGNoQWxsKCk7XHJcbiAgcmV0dXJuIChvJDogT2JzZXJ2YWJsZTxPYnNlcnZhYmxlPFQ+IHwgVD4pID0+XHJcbiAgICBvJC5waXBlKFxyXG4gICAgICBjb2VyY2VPYnNlcnZhYmxlV2l0aCgpLFxyXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxyXG4gICAgICBmbGF0dGVuT3BlcmF0b3IsXHJcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcclxuICAgICk7XHJcbn1cclxuIl19