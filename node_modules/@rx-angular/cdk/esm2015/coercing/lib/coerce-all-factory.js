import { Subject } from 'rxjs';
import { switchAll } from 'rxjs/operators';
import { coerceDistinctWith } from './coerceDistinctObservableWith';
/**
 * @internal
 *
 * A factory function returning an object to handle the process of merging Observable next notifications into one
 *   Observable. This API takes away the clumsy handling of static values and Observable, reduces the number of
 *   emissions by:
 * - only merging distinct Observables
 * - only emit distingt values of the merged result
 *
 * You can next a Observable of `U` multiple times and merge them into the Observable exposed under one optimized
 *   `values$`
 *
 */
export function coerceAllFactory(subjectFactory, flattenOperator) {
    const observablesSubject = subjectFactory ? subjectFactory() : new Subject();
    flattenOperator = flattenOperator || switchAll();
    const values$ = observablesSubject.pipe(coerceDistinctWith(flattenOperator));
    return {
        next(observable) {
            observablesSubject.next(observable);
        },
        values$,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29lcmNlLWFsbC1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jZGsvY29lcmNpbmcvc3JjL2xpYi9jb2VyY2UtYWxsLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpRCxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRXBFOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FDOUIsY0FBc0QsRUFDdEQsZUFBeUQ7SUFLekQsTUFBTSxrQkFBa0IsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBQzdFLGVBQWUsR0FBRyxlQUFlLElBQUssU0FBUyxFQUFVLENBQUM7SUFDMUQsTUFBTSxPQUFPLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUNyQyxrQkFBa0IsQ0FBQyxlQUFzQixDQUFDLENBQzFCLENBQUM7SUFFbkIsT0FBTztRQUNMLElBQUksQ0FBQyxVQUFrQztZQUNyQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUNELE9BQU87S0FDUixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmFibGVJbnB1dCwgT3BlcmF0b3JGdW5jdGlvbiwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hBbGwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGNvZXJjZURpc3RpbmN0V2l0aCB9IGZyb20gJy4vY29lcmNlRGlzdGluY3RPYnNlcnZhYmxlV2l0aCc7XHJcblxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqXHJcbiAqIEEgZmFjdG9yeSBmdW5jdGlvbiByZXR1cm5pbmcgYW4gb2JqZWN0IHRvIGhhbmRsZSB0aGUgcHJvY2VzcyBvZiBtZXJnaW5nIE9ic2VydmFibGUgbmV4dCBub3RpZmljYXRpb25zIGludG8gb25lXHJcbiAqICAgT2JzZXJ2YWJsZS4gVGhpcyBBUEkgdGFrZXMgYXdheSB0aGUgY2x1bXN5IGhhbmRsaW5nIG9mIHN0YXRpYyB2YWx1ZXMgYW5kIE9ic2VydmFibGUsIHJlZHVjZXMgdGhlIG51bWJlciBvZlxyXG4gKiAgIGVtaXNzaW9ucyBieTpcclxuICogLSBvbmx5IG1lcmdpbmcgZGlzdGluY3QgT2JzZXJ2YWJsZXNcclxuICogLSBvbmx5IGVtaXQgZGlzdGluZ3QgdmFsdWVzIG9mIHRoZSBtZXJnZWQgcmVzdWx0XHJcbiAqXHJcbiAqIFlvdSBjYW4gbmV4dCBhIE9ic2VydmFibGUgb2YgYFVgIG11bHRpcGxlIHRpbWVzIGFuZCBtZXJnZSB0aGVtIGludG8gdGhlIE9ic2VydmFibGUgZXhwb3NlZCB1bmRlciBvbmUgb3B0aW1pemVkXHJcbiAqICAgYHZhbHVlcyRgXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29lcmNlQWxsRmFjdG9yeTxVLCBSID0gVT4oXHJcbiAgc3ViamVjdEZhY3Rvcnk/OiAoKSA9PiBTdWJqZWN0PE9ic2VydmFibGVJbnB1dDxVPiB8IFU+LFxyXG4gIGZsYXR0ZW5PcGVyYXRvcj86IE9wZXJhdG9yRnVuY3Rpb248T2JzZXJ2YWJsZUlucHV0PFU+LCBSPlxyXG4pOiB7XHJcbiAgdmFsdWVzJDogT2JzZXJ2YWJsZTxSPjtcclxuICBuZXh0KG9ic2VydmFibGU6IE9ic2VydmFibGVJbnB1dDxVPiB8IFUpOiB2b2lkO1xyXG59IHtcclxuICBjb25zdCBvYnNlcnZhYmxlc1N1YmplY3QgPSBzdWJqZWN0RmFjdG9yeSA/IHN1YmplY3RGYWN0b3J5KCkgOiBuZXcgU3ViamVjdCgpO1xyXG4gIGZsYXR0ZW5PcGVyYXRvciA9IGZsYXR0ZW5PcGVyYXRvciB8fCAoc3dpdGNoQWxsKCkgYXMgYW55KTtcclxuICBjb25zdCB2YWx1ZXMkID0gb2JzZXJ2YWJsZXNTdWJqZWN0LnBpcGUoXHJcbiAgICBjb2VyY2VEaXN0aW5jdFdpdGgoZmxhdHRlbk9wZXJhdG9yIGFzIGFueSlcclxuICApIGFzIE9ic2VydmFibGU8Uj47XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBuZXh0KG9ic2VydmFibGU6IE9ic2VydmFibGVJbnB1dDxVPiB8IFUpIHtcclxuICAgICAgb2JzZXJ2YWJsZXNTdWJqZWN0Lm5leHQob2JzZXJ2YWJsZSk7XHJcbiAgICB9LFxyXG4gICAgdmFsdWVzJCxcclxuICB9O1xyXG59XHJcbiJdfQ==