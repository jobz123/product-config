import { distinctUntilChanged, switchAll } from 'rxjs/operators';
import { coerceObservable } from './coerceObservable';
/**
 * This Observable factory creates an Observable out of a static value or ObservableInput.
 * It forwards only distinct values from distinct incoming Observables or values.
 * This comes in handy in any environment where you handle processing of incoming dynamic values and their state.
 *
 * Optionally you can pass a flatten strategy to get find grained control of the flattening process. E.g. mergeAll, switchAll
 *
 * @param o$ - The Observable to coerce and map to a Observable with distinct values
 * @param flattenOperator - determines the flattening strategy e.g. mergeAll, concatAll, exhaust, switchAll. default is switchAll
 */
export function coerceDistinctObservable(o$, flattenOperator) {
    flattenOperator = flattenOperator || switchAll();
    return coerceObservable(o$).pipe(distinctUntilChanged(), flattenOperator, distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29lcmNlRGlzdGluY3RPYnNlcnZhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jZGsvY29lcmNpbmcvc3JjL2xpYi9jb2VyY2VEaXN0aW5jdE9ic2VydmFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsT0FBTyxFQUFFLG9CQUFvQixFQUFPLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXREOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsRUFBaUMsRUFDakMsZUFBeUQ7SUFFekQsZUFBZSxHQUFHLGVBQWUsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUNqRCxPQUFPLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDOUIsb0JBQW9CLEVBQUUsRUFDdEIsZUFBZSxFQUNmLG9CQUFvQixFQUFFLENBQ3ZCLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBpc09ic2VydmFibGUsXHJcbiAgT2JzZXJ2YWJsZSxcclxuICBPYnNlcnZhYmxlSW5wdXQsXHJcbiAgb2YsXHJcbiAgT3BlcmF0b3JGdW5jdGlvbixcclxufSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgc3dpdGNoQWxsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBjb2VyY2VPYnNlcnZhYmxlIH0gZnJvbSAnLi9jb2VyY2VPYnNlcnZhYmxlJztcclxuXHJcbi8qKlxyXG4gKiBUaGlzIE9ic2VydmFibGUgZmFjdG9yeSBjcmVhdGVzIGFuIE9ic2VydmFibGUgb3V0IG9mIGEgc3RhdGljIHZhbHVlIG9yIE9ic2VydmFibGVJbnB1dC5cclxuICogSXQgZm9yd2FyZHMgb25seSBkaXN0aW5jdCB2YWx1ZXMgZnJvbSBkaXN0aW5jdCBpbmNvbWluZyBPYnNlcnZhYmxlcyBvciB2YWx1ZXMuXHJcbiAqIFRoaXMgY29tZXMgaW4gaGFuZHkgaW4gYW55IGVudmlyb25tZW50IHdoZXJlIHlvdSBoYW5kbGUgcHJvY2Vzc2luZyBvZiBpbmNvbWluZyBkeW5hbWljIHZhbHVlcyBhbmQgdGhlaXIgc3RhdGUuXHJcbiAqXHJcbiAqIE9wdGlvbmFsbHkgeW91IGNhbiBwYXNzIGEgZmxhdHRlbiBzdHJhdGVneSB0byBnZXQgZmluZCBncmFpbmVkIGNvbnRyb2wgb2YgdGhlIGZsYXR0ZW5pbmcgcHJvY2Vzcy4gRS5nLiBtZXJnZUFsbCwgc3dpdGNoQWxsXHJcbiAqXHJcbiAqIEBwYXJhbSBvJCAtIFRoZSBPYnNlcnZhYmxlIHRvIGNvZXJjZSBhbmQgbWFwIHRvIGEgT2JzZXJ2YWJsZSB3aXRoIGRpc3RpbmN0IHZhbHVlc1xyXG4gKiBAcGFyYW0gZmxhdHRlbk9wZXJhdG9yIC0gZGV0ZXJtaW5lcyB0aGUgZmxhdHRlbmluZyBzdHJhdGVneSBlLmcuIG1lcmdlQWxsLCBjb25jYXRBbGwsIGV4aGF1c3QsIHN3aXRjaEFsbC4gZGVmYXVsdCBpcyBzd2l0Y2hBbGxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2VyY2VEaXN0aW5jdE9ic2VydmFibGU8VD4oXHJcbiAgbyQ6IE9ic2VydmFibGU8T2JzZXJ2YWJsZTxUPiB8IFQ+LFxyXG4gIGZsYXR0ZW5PcGVyYXRvcj86IE9wZXJhdG9yRnVuY3Rpb248T2JzZXJ2YWJsZUlucHV0PFQ+LCBUPlxyXG4pIHtcclxuICBmbGF0dGVuT3BlcmF0b3IgPSBmbGF0dGVuT3BlcmF0b3IgfHwgc3dpdGNoQWxsKCk7XHJcbiAgcmV0dXJuIGNvZXJjZU9ic2VydmFibGUobyQpLnBpcGUoXHJcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxyXG4gICAgZmxhdHRlbk9wZXJhdG9yLFxyXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxyXG4gICk7XHJcbn1cclxuIl19