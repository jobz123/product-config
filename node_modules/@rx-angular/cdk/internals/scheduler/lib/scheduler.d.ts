import { ReactSchedulerTask } from './schedulerMinHeap';
import { PriorityLevel } from './schedulerPriorities';
declare let getCurrentTime: () => number;
declare function runWithPriority(priorityLevel: any, eventHandler: any): any;
declare function next(eventHandler: any): any;
declare function wrapCallback(callback: VoidFunction): () => any;
interface ScheduleCallbackOptions {
    delay: number;
}
declare function scheduleCallback(priorityLevel: PriorityLevel, callback: VoidFunction, options?: ScheduleCallbackOptions): ReactSchedulerTask;
declare function pauseExecution(): void;
declare function continueExecution(): void;
declare function getFirstCallbackNode(): ReactSchedulerTask;
declare function cancelCallback(task: any): void;
declare function getCurrentPriorityLevel(): PriorityLevel;
declare function shouldYieldToHost(): boolean;
declare function requestPaint(): void;
declare function forceFrameRate(fps: any): void;
declare const _requestPaint: typeof requestPaint;
export { runWithPriority, next, scheduleCallback, cancelCallback, wrapCallback, getCurrentPriorityLevel, shouldYieldToHost as shouldYield, _requestPaint as requestPaint, continueExecution, pauseExecution, getFirstCallbackNode, getCurrentTime as now, forceFrameRate as forceFrameRate, };
