import { ChangeDetectorRef, NgZone } from '@angular/core';
import { coalescingObj } from '@rx-angular/cdk/coalescing';
import { RxNotification } from '@rx-angular/cdk/notifications';
import { Observable } from 'rxjs';
export interface ScheduleOnStrategyOptions {
    scope?: {};
    strategy?: string;
    patchZone?: false | NgZone;
}
export declare type RxRenderWork = <T = unknown>(cdRef: ChangeDetectorRef, scope?: coalescingObj, notification?: RxNotification<T>) => void;
export declare type RxRenderBehavior = <T = unknown>(work: any, scope?: coalescingObj) => (o: Observable<T>) => Observable<T>;
export interface RxStrategyCredentials<S = string> {
    name: S;
    work: RxRenderWork;
    behavior: RxRenderBehavior;
}
export declare type RxCustomStrategyCredentials<T extends string> = Record<T, RxStrategyCredentials>;
export declare type RxNativeStrategyNames = 'native' | 'local' | 'global' | 'noop';
export declare type RxConcurrentStrategyNames = 'noPriority' | 'immediate' | 'userBlocking' | 'normal' | 'low' | 'idle';
export declare type RxDefaultStrategyNames = RxNativeStrategyNames | RxConcurrentStrategyNames;
export declare type RxStrategyNames<T> = RxDefaultStrategyNames | T;
export declare type RxStrategies<T extends string> = RxCustomStrategyCredentials<RxStrategyNames<T>>;
