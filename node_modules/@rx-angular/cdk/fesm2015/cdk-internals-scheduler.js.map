{"version":3,"file":"cdk-internals-scheduler.js","sources":["../../../../libs/cdk/internals/scheduler/src/lib/schedulerFeatureFlags.ts","../../../../libs/cdk/internals/scheduler/src/lib/schedulerMinHeap.ts","../../../../libs/cdk/internals/scheduler/src/lib/scheduler.ts","../../../../libs/cdk/internals/scheduler/src/cdk-internals-scheduler.ts"],"sourcesContent":["export const enableIsInputPending = false;\r\n","import { PriorityLevel } from './schedulerPriorities';\r\n\r\ntype Heap = Array<ReactSchedulerTask>;\r\n\r\nexport interface ReactSchedulerTask {\r\n  id: number;\r\n  sortIndex: number;\r\n  callback: VoidFunction;\r\n  priorityLevel: PriorityLevel;\r\n  startTime: number;\r\n  expirationTime: number;\r\n  isQueued?: boolean;\r\n}\r\n\r\nexport function push(heap: Heap, node: ReactSchedulerTask): void {\r\n  const index = heap.length;\r\n  heap.push(node);\r\n  siftUp(heap, node, index);\r\n}\r\n\r\nexport function peek(heap: Heap): ReactSchedulerTask | null {\r\n  const first = heap[0];\r\n  return first === undefined ? null : first;\r\n}\r\n\r\nexport function pop(heap: Heap): ReactSchedulerTask | null {\r\n  const first = heap[0];\r\n  if (first !== undefined) {\r\n    const last = heap.pop();\r\n    if (last !== first) {\r\n      heap[0] = last;\r\n      siftDown(heap, last, 0);\r\n    }\r\n    return first;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction siftUp(heap, node, i) {\r\n  let index = i;\r\n  // eslint-disable-next-line no-constant-condition\r\n  while (true) {\r\n    // tslint:disable-next-line:no-bitwise\r\n    const parentIndex = (index - 1) >>> 1;\r\n    const parent = heap[parentIndex];\r\n    if (parent !== undefined && compare(parent, node) > 0) {\r\n      // The parent is larger. Swap positions.\r\n      heap[parentIndex] = node;\r\n      heap[index] = parent;\r\n      index = parentIndex;\r\n    } else {\r\n      // The parent is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction siftDown(heap, node, i) {\r\n  let index = i;\r\n  const length = heap.length;\r\n  while (index < length) {\r\n    const leftIndex = (index + 1) * 2 - 1;\r\n    const left = heap[leftIndex];\r\n    const rightIndex = leftIndex + 1;\r\n    const right = heap[rightIndex];\r\n\r\n    // If the left or right node is smaller, swap with the smaller of those.\r\n    if (left !== undefined && compare(left, node) < 0) {\r\n      if (right !== undefined && compare(right, left) < 0) {\r\n        heap[index] = right;\r\n        heap[rightIndex] = node;\r\n        index = rightIndex;\r\n      } else {\r\n        heap[index] = left;\r\n        heap[leftIndex] = node;\r\n        index = leftIndex;\r\n      }\r\n    } else if (right !== undefined && compare(right, node) < 0) {\r\n      heap[index] = right;\r\n      heap[rightIndex] = node;\r\n      index = rightIndex;\r\n    } else {\r\n      // Neither child is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction compare(a, b) {\r\n  // Compare sort index first, then task id.\r\n  const diff = a.sortIndex - b.sortIndex;\r\n  return diff !== 0 ? diff : a.id - b.id;\r\n}\r\n","// see https://raw.githubusercontent.com/facebook/react/master/packages/scheduler/src/forks/SchedulerDOM.js\r\n\r\nimport { ɵglobal } from '@angular/core';\r\nimport { enableIsInputPending } from './schedulerFeatureFlags';\r\nimport { peek, pop, push, ReactSchedulerTask } from './schedulerMinHeap';\r\n\r\nimport { PriorityLevel } from './schedulerPriorities';\r\n\r\n/**\r\n * @description Will be provided through Terser global definitions by Angular CLI\r\n * during the production build.\r\n */\r\ndeclare const ngDevMode: boolean;\r\n\r\nlet getCurrentTime: () => number;\r\nconst hasPerformanceNow =\r\n  typeof performance === 'object' && typeof performance.now === 'function';\r\n\r\nif (hasPerformanceNow) {\r\n  const localPerformance = performance;\r\n  getCurrentTime = () => localPerformance.now();\r\n} else {\r\n  const localDate = Date;\r\n  const initialTime = localDate.now();\r\n  getCurrentTime = () => localDate.now() - initialTime;\r\n}\r\n\r\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\r\n// Math.pow(2, 30) - 1\r\n// 0b111111111111111111111111111111\r\nconst maxSigned31BitInt = 1073741823;\r\n\r\n// Times out immediately\r\nconst IMMEDIATE_PRIORITY_TIMEOUT = -1;\r\n// Eventually times out\r\nconst USER_BLOCKING_PRIORITY_TIMEOUT = 250;\r\nconst NORMAL_PRIORITY_TIMEOUT = 5000;\r\nconst LOW_PRIORITY_TIMEOUT = 10000;\r\n// Never times out\r\nconst IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\r\n\r\n// Tasks are stored on a min heap\r\nconst taskQueue = [];\r\nconst timerQueue = [];\r\n\r\n// Incrementing id counter. Used to maintain insertion order.\r\nlet taskIdCounter = 1;\r\n\r\n// Pausing the scheduler is useful for debugging.\r\nlet isSchedulerPaused = false;\r\n\r\nlet currentTask = null;\r\nlet currentPriorityLevel = PriorityLevel.NormalPriority;\r\n\r\n// This is set while performing work, to prevent re-entrancy.\r\nlet isPerformingWork = false;\r\n\r\nlet isHostCallbackScheduled = false;\r\nlet isHostTimeoutScheduled = false;\r\n\r\n// Capture local references to native APIs, in case a polyfill overrides them.\r\nconst setTimeout = ɵglobal.setTimeout;\r\nconst clearTimeout = ɵglobal.clearTimeout;\r\nconst setImmediate = ɵglobal.setImmediate; // IE and Node.js + jsdom\r\nconst messageChannel = ɵglobal.MessageChannel;\r\n\r\nfunction advanceTimers(currentTime) {\r\n  // Check for tasks that are no longer delayed and add them to the queue.\r\n  let timer = peek(timerQueue);\r\n  while (timer !== null) {\r\n    if (timer.callback === null) {\r\n      // Timer was cancelled.\r\n      pop(timerQueue);\r\n    } else if (timer.startTime <= currentTime) {\r\n      // Timer fired. Transfer to the task queue.\r\n      pop(timerQueue);\r\n      timer.sortIndex = timer.expirationTime;\r\n      push(taskQueue, timer);\r\n    } else {\r\n      // Remaining timers are pending.\r\n      return;\r\n    }\r\n    timer = peek(timerQueue);\r\n  }\r\n}\r\n\r\nfunction handleTimeout(currentTime) {\r\n  isHostTimeoutScheduled = false;\r\n  advanceTimers(currentTime);\r\n\r\n  if (!isHostCallbackScheduled) {\r\n    if (peek(taskQueue) !== null) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    } else {\r\n      const firstTimer = peek(timerQueue);\r\n      if (firstTimer !== null) {\r\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushWork(hasTimeRemaining, initialTime) {\r\n  // We'll need a host callback the next time work is scheduled.\r\n  isHostCallbackScheduled = false;\r\n  if (isHostTimeoutScheduled) {\r\n    // We scheduled a timeout but it's no longer needed. Cancel it.\r\n    isHostTimeoutScheduled = false;\r\n    cancelHostTimeout();\r\n  }\r\n\r\n  isPerformingWork = true;\r\n  const previousPriorityLevel = currentPriorityLevel;\r\n  try {\r\n    return workLoop(hasTimeRemaining, initialTime);\r\n  } finally {\r\n    currentTask = null;\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    isPerformingWork = false;\r\n  }\r\n}\r\n\r\nfunction workLoop(hasTimeRemaining, initialTime) {\r\n  let currentTime = initialTime;\r\n  advanceTimers(currentTime);\r\n  currentTask = peek(taskQueue);\r\n  while (currentTask !== null && !isSchedulerPaused) {\r\n    if (\r\n      currentTask.expirationTime > currentTime &&\r\n      (!hasTimeRemaining || shouldYieldToHost())\r\n    ) {\r\n      // This currentTask hasn't expired, and we've reached the deadline.\r\n      break;\r\n    }\r\n    const callback = currentTask.callback;\r\n    if (typeof callback === 'function') {\r\n      currentTask.callback = null;\r\n      currentPriorityLevel = currentTask.priorityLevel;\r\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\r\n      const continuationCallback = callback(didUserCallbackTimeout);\r\n      currentTime = getCurrentTime();\r\n      if (typeof continuationCallback === 'function') {\r\n        currentTask.callback = continuationCallback;\r\n      } else {\r\n        if (currentTask === peek(taskQueue)) {\r\n          pop(taskQueue);\r\n        }\r\n      }\r\n      advanceTimers(currentTime);\r\n    } else {\r\n      pop(taskQueue);\r\n    }\r\n    currentTask = peek(taskQueue);\r\n  }\r\n  // Return whether there's additional work\r\n  if (currentTask !== null) {\r\n    return true;\r\n  } else {\r\n    const firstTimer = peek(timerQueue);\r\n    if (firstTimer !== null) {\r\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction runWithPriority(priorityLevel, eventHandler) {\r\n  switch (priorityLevel) {\r\n    case PriorityLevel.ImmediatePriority:\r\n    case PriorityLevel.UserBlockingPriority:\r\n    case PriorityLevel.NormalPriority:\r\n    case PriorityLevel.LowPriority:\r\n    case PriorityLevel.IdlePriority:\r\n      break;\r\n    default:\r\n      priorityLevel = PriorityLevel.NormalPriority;\r\n  }\r\n\r\n  const previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction next(eventHandler) {\r\n  let priorityLevel;\r\n  switch (currentPriorityLevel) {\r\n    case PriorityLevel.ImmediatePriority:\r\n    case PriorityLevel.UserBlockingPriority:\r\n    case PriorityLevel.NormalPriority:\r\n      // Shift down to normal priority\r\n      priorityLevel = PriorityLevel.NormalPriority;\r\n      break;\r\n    default:\r\n      // Anything lower than normal priority should remain at the current level.\r\n      priorityLevel = currentPriorityLevel;\r\n      break;\r\n  }\r\n\r\n  const previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction wrapCallback(callback: VoidFunction) {\r\n  const parentPriorityLevel = currentPriorityLevel;\r\n  return () => {\r\n    // This is a fork of runWithPriority, inlined for performance.\r\n    const previousPriorityLevel = currentPriorityLevel;\r\n    currentPriorityLevel = parentPriorityLevel;\r\n\r\n    try {\r\n      // eslint-disable-next-line prefer-rest-params\r\n      return callback.apply(this, arguments);\r\n    } finally {\r\n      currentPriorityLevel = previousPriorityLevel;\r\n    }\r\n  };\r\n}\r\n\r\ninterface ScheduleCallbackOptions {\r\n  delay: number;\r\n}\r\n\r\nfunction scheduleCallback(\r\n  priorityLevel: PriorityLevel,\r\n  callback: VoidFunction,\r\n  options?: ScheduleCallbackOptions\r\n): ReactSchedulerTask {\r\n  const currentTime = getCurrentTime();\r\n\r\n  let startTime: number;\r\n  if (typeof options === 'object' && options !== null) {\r\n    const delay = options.delay;\r\n    if (typeof delay === 'number' && delay > 0) {\r\n      startTime = currentTime + delay;\r\n    } else {\r\n      startTime = currentTime;\r\n    }\r\n  } else {\r\n    startTime = currentTime;\r\n  }\r\n\r\n  let timeout: number;\r\n  switch (priorityLevel) {\r\n    case PriorityLevel.ImmediatePriority:\r\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\r\n      break;\r\n    case PriorityLevel.UserBlockingPriority:\r\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\r\n      break;\r\n    case PriorityLevel.IdlePriority:\r\n      timeout = IDLE_PRIORITY_TIMEOUT;\r\n      break;\r\n    case PriorityLevel.LowPriority:\r\n      timeout = LOW_PRIORITY_TIMEOUT;\r\n      break;\r\n    case PriorityLevel.NormalPriority:\r\n    default:\r\n      timeout = NORMAL_PRIORITY_TIMEOUT;\r\n      break;\r\n  }\r\n\r\n  const expirationTime = startTime + timeout;\r\n\r\n  const newTask: ReactSchedulerTask = {\r\n    id: taskIdCounter++,\r\n    callback,\r\n    priorityLevel,\r\n    startTime,\r\n    expirationTime,\r\n    sortIndex: -1,\r\n  };\r\n\r\n  if (startTime > currentTime) {\r\n    // This is a delayed task.\r\n    newTask.sortIndex = startTime;\r\n    push(timerQueue, newTask);\r\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\r\n      // All tasks are delayed, and this is the task with the earliest delay.\r\n      if (isHostTimeoutScheduled) {\r\n        // Cancel an existing timeout.\r\n        cancelHostTimeout();\r\n      } else {\r\n        isHostTimeoutScheduled = true;\r\n      }\r\n      // Schedule a timeout.\r\n      requestHostTimeout(handleTimeout, startTime - currentTime);\r\n    }\r\n  } else {\r\n    newTask.sortIndex = expirationTime;\r\n    push(taskQueue, newTask);\r\n    // Schedule a host callback, if needed. If we're already performing work,\r\n    // wait until the next time we yield.\r\n    if (!isHostCallbackScheduled && !isPerformingWork) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    }\r\n  }\r\n\r\n  return newTask;\r\n}\r\n\r\nfunction pauseExecution() {\r\n  isSchedulerPaused = true;\r\n}\r\n\r\nfunction continueExecution() {\r\n  isSchedulerPaused = false;\r\n  if (!isHostCallbackScheduled && !isPerformingWork) {\r\n    isHostCallbackScheduled = true;\r\n    requestHostCallback(flushWork);\r\n  }\r\n}\r\n\r\nfunction getFirstCallbackNode() {\r\n  return peek(taskQueue);\r\n}\r\n\r\nfunction cancelCallback(task) {\r\n  // Null out the callback to indicate the task has been canceled. (Can't\r\n  // remove from the queue because you can't remove arbitrary nodes from an\r\n  // array based heap, only the first one.)\r\n  task.callback = null;\r\n}\r\n\r\nfunction getCurrentPriorityLevel() {\r\n  return currentPriorityLevel;\r\n}\r\n\r\nlet isMessageLoopRunning = false;\r\nlet scheduledHostCallback = null;\r\nlet taskTimeoutID = -1;\r\n\r\n// Scheduler periodically yields in case there is other work on the main\r\n// thread, like user events. By default, it yields multiple times per frame.\r\n// It does not attempt to align with frame boundaries, since most tasks don't\r\n// need to be frame aligned; for those that do, use requestAnimationFrame.\r\nlet yieldInterval = 16;\r\nlet deadline = 0;\r\n\r\n// TODO: Make this configurable\r\n// TODO: Adjust this based on priority?\r\nconst maxYieldInterval = 300;\r\nlet needsPaint = false;\r\n\r\nfunction shouldYieldToHost() {\r\n  if (\r\n    enableIsInputPending &&\r\n    navigator !== undefined &&\r\n    (navigator as any).scheduling !== undefined &&\r\n    (navigator as any).scheduling.isInputPending !== undefined\r\n  ) {\r\n    const scheduling = (navigator as any).scheduling;\r\n    const currentTime = getCurrentTime();\r\n    if (currentTime >= deadline) {\r\n      // There's no time left. We may want to yield control of the main\r\n      // thread, so the browser can perform high priority tasks. The main ones\r\n      // are painting and user input. If there's a pending paint or a pending\r\n      // input, then we should yield. But if there's neither, then we can\r\n      // yield less often while remaining responsive. We'll eventually yield\r\n      // regardless, since there could be a pending paint that wasn't\r\n      // accompanied by a call to `requestPaint`, or other main thread tasks\r\n      // like network events.\r\n      if (needsPaint || scheduling.isInputPending()) {\r\n        // There is either a pending paint or a pending input.\r\n        return true;\r\n      }\r\n      // There's no pending input. Only yield if we've reached the max\r\n      // yield interval.\r\n      return currentTime >= maxYieldInterval;\r\n    } else {\r\n      // There's still time left in the frame.\r\n      return false;\r\n    }\r\n  } else {\r\n    // `isInputPending` is not available. Since we have no way of knowing if\r\n    // there's pending input, always yield at the end of the frame.\r\n    return getCurrentTime() >= deadline;\r\n  }\r\n}\r\n\r\nfunction requestPaint() {\r\n  if (\r\n    enableIsInputPending &&\r\n    navigator !== undefined &&\r\n    (navigator as any).scheduling !== undefined &&\r\n    (navigator as any).scheduling.isInputPending !== undefined\r\n  ) {\r\n    needsPaint = true;\r\n  }\r\n\r\n  // Since we yield every frame regardless, `requestPaint` has no effect.\r\n}\r\n\r\nfunction forceFrameRate(fps) {\r\n  if (fps < 0 || fps > 125) {\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      console.error(\r\n        'forceFrameRate takes a positive int between 0 and 125, ' +\r\n          'forcing frame rates higher than 125 fps is not supported'\r\n      );\r\n    }\r\n    return;\r\n  }\r\n  if (fps > 0) {\r\n    yieldInterval = Math.floor(1000 / fps);\r\n  } else {\r\n    // reset the framerate\r\n    yieldInterval = 5;\r\n  }\r\n}\r\n\r\nconst performWorkUntilDeadline = () => {\r\n  if (scheduledHostCallback !== null) {\r\n    const currentTime = getCurrentTime();\r\n    // Yield after `yieldInterval` ms, regardless of where we are in the vsync\r\n    // cycle. This means there's always time remaining at the beginning of\r\n    // the message event.\r\n    deadline = currentTime + yieldInterval;\r\n    const hasTimeRemaining = true;\r\n\r\n    // If a scheduler task throws, exit the current browser task so the\r\n    // error can be observed.\r\n    //\r\n    // Intentionally not using a try-catch, since that makes some debugging\r\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\r\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\r\n    let hasMoreWork = true;\r\n    try {\r\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\r\n    } finally {\r\n      if (hasMoreWork) {\r\n        // If there's more work, schedule the next message event at the end\r\n        // of the preceding one.\r\n        schedulePerformWorkUntilDeadline();\r\n      } else {\r\n        isMessageLoopRunning = false;\r\n        scheduledHostCallback = null;\r\n      }\r\n    }\r\n  } else {\r\n    isMessageLoopRunning = false;\r\n  }\r\n  // Yielding to the browser will give it a chance to paint, so we can\r\n  // reset this.\r\n  needsPaint = false;\r\n};\r\n\r\nlet schedulePerformWorkUntilDeadline;\r\nif (typeof setImmediate === 'function') {\r\n  // Node.js and old IE.\r\n  // There's a few reasons for why we prefer setImmediate.\r\n  //\r\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\r\n  // (Even though this is a DOM fork of the Scheduler, you could get here\r\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\r\n  // https://github.com/facebook/react/issues/20756\r\n  //\r\n  // But also, it runs earlier which is the semantic we want.\r\n  // If other browsers ever implement it, it's better to use it.\r\n  // Although both of these would be inferior to native scheduling.\r\n  schedulePerformWorkUntilDeadline = () => {\r\n    setImmediate(performWorkUntilDeadline);\r\n  };\r\n} else if (typeof messageChannel !== 'undefined') {\r\n  const channel: MessageChannel = new messageChannel();\r\n  const port = channel.port2;\r\n\r\n  channel.port1.onmessage = performWorkUntilDeadline;\r\n  schedulePerformWorkUntilDeadline = () => {\r\n    port.postMessage(null);\r\n  };\r\n} else {\r\n  // We should only fallback here in non-browser environments.\r\n  schedulePerformWorkUntilDeadline = () => {\r\n    setTimeout(performWorkUntilDeadline, 0);\r\n  };\r\n}\r\n\r\nfunction requestHostCallback(callback) {\r\n  scheduledHostCallback = callback;\r\n  if (!isMessageLoopRunning) {\r\n    isMessageLoopRunning = true;\r\n    schedulePerformWorkUntilDeadline();\r\n  }\r\n}\r\n\r\nfunction requestHostTimeout(callback, ms) {\r\n  taskTimeoutID = setTimeout(() => {\r\n    callback(getCurrentTime());\r\n  }, ms);\r\n}\r\n\r\nfunction cancelHostTimeout() {\r\n  clearTimeout(taskTimeoutID);\r\n  taskTimeoutID = -1;\r\n}\r\n\r\nconst _requestPaint = requestPaint;\r\n\r\nexport {\r\n  runWithPriority,\r\n  next,\r\n  scheduleCallback,\r\n  cancelCallback,\r\n  wrapCallback,\r\n  getCurrentPriorityLevel,\r\n  shouldYieldToHost as shouldYield,\r\n  _requestPaint as requestPaint,\r\n  continueExecution,\r\n  pauseExecution,\r\n  getFirstCallbackNode,\r\n  getCurrentTime as now,\r\n  forceFrameRate as forceFrameRate,\r\n};\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}