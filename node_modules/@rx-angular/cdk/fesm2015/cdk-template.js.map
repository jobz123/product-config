{"version":3,"file":"cdk-template.js","sources":["../../../../libs/cdk/template/src/lib/utils.ts","../../../../libs/cdk/template/src/lib/model.ts","../../../../libs/cdk/template/src/lib/render-error.ts","../../../../libs/cdk/template/src/lib/template-manager.ts","../../../../libs/cdk/template/src/lib/list-view-handler.ts","../../../../libs/cdk/template/src/lib/list-template-manager.ts","../../../../libs/cdk/template/src/lib/list-view-context.ts","../../../../libs/cdk/template/src/cdk-template.ts"],"sourcesContent":["import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EmbeddedViewRef,\r\n  TemplateRef,\r\n  Type,\r\n  ViewContainerRef,\r\n  ÉµdetectChanges as detectChanges,\r\n} from '@angular/core';\r\nimport {\r\n  combineLatest,\r\n  concat,\r\n  merge,\r\n  Observable,\r\n  of,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { MonoTypeOperatorFunction } from 'rxjs';\r\nimport {\r\n  delay,\r\n  ignoreElements,\r\n  switchMap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { asyncScheduler } from '@rx-angular/cdk/zone-less';\r\nimport { RxStrategyCredentials, onStrategy } from '@rx-angular/cdk/render-strategies';\r\n\r\n// Below are constants for LView indices to help us look up LView members\r\n// without having to remember the specific indices.\r\n// Uglify will inline these when minifying so there shouldn't be a cost.\r\nconst TVIEW = 1;\r\nconst T_HOST = 6;\r\nconst L_CONTAINER_NATIVE = 7;\r\nconst CONTEXT = 8;\r\nconst HEADER_OFFSET = 20;\r\n\r\nexport type TNode = any;\r\n\r\n/**\r\n * @internal\r\n *\r\n * Returns the TNode of the passed node form TVIEW of passed cdRef\r\n *\r\n * @param cdRef\r\n * @param native\r\n */\r\nexport function getTNode(cdRef: ChangeDetectorRef, native: Node): TNode {\r\n  const lView = (cdRef as any)._cdRefInjectingView;\r\n  if (!lView) {\r\n    return undefined;\r\n  }\r\n  const tView = lView[TVIEW];\r\n  let i = HEADER_OFFSET;\r\n  let lContainer;\r\n  while (!lContainer && i <= tView['bindingStartIndex']) {\r\n    const candidate = lView[i];\r\n    if (candidate && candidate[L_CONTAINER_NATIVE] === native) {\r\n      lContainer = candidate;\r\n    }\r\n    i++;\r\n  }\r\n  return lContainer[T_HOST];\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Returns a set of references to parent views\r\n *\r\n *\r\n * @param cdRef\r\n * @param tNode\r\n */\r\nexport function extractProjectionParentViewSet(\r\n  cdRef: ChangeDetectorRef,\r\n  tNode: TNode\r\n): Set<Type<Component>> {\r\n  const injectingLView = (cdRef as any)._cdRefInjectingView;\r\n  const injectingTView = injectingLView[1];\r\n  const components = new Set<number>(injectingTView['components']);\r\n  const parentElements = new Set<Type<Component>>();\r\n  let parent = tNode['parent'];\r\n  while (parent != null && components.size > 0) {\r\n    const idx = parent['index'];\r\n    if (components.has(idx)) {\r\n      // TODO: we should discuss about this. currently only the first Component will get returned, not a list of\r\n      //  components. Maybe we should make the parent notification configurable regarding the level of `deepness`?\r\n      // components.delete(idx);\r\n      components.clear();\r\n      parentElements.add(injectingLView[idx][CONTEXT]);\r\n    }\r\n    parent = parent['parent'];\r\n  }\r\n  return parentElements;\r\n}\r\n\r\nexport function extractProjectionViews(\r\n  cdRef: ChangeDetectorRef,\r\n  tNode: TNode\r\n): Type<any>[] {\r\n  return Array.from(extractProjectionParentViewSet(cdRef, tNode));\r\n}\r\n\r\n/**\r\n * A side effect operator similar to `tap` but with a static logic\r\n *\r\n *\r\n *\r\n * @param cdRef\r\n * @param tNode\r\n * @param strategy$\r\n */\r\nexport function renderProjectionParents(\r\n  cdRef: ChangeDetectorRef,\r\n  tNode: TNode,\r\n  strategy$: Observable<RxStrategyCredentials>\r\n): OperatorFunction<any, any> {\r\n  return (o$) =>\r\n    o$.pipe(\r\n      withLatestFrom(strategy$),\r\n      switchMap(([_, strategy]) => {\r\n        const parentElements = extractProjectionParentViewSet(cdRef, tNode);\r\n        const behaviors = [];\r\n        for (const el of parentElements.values()) {\r\n          behaviors.push(\r\n            onStrategy(\r\n              el,\r\n              strategy,\r\n              (value, work, options) => {\r\n                detectChanges(el);\r\n              },\r\n              { scope: el }\r\n            )\r\n          );\r\n        }\r\n        behaviors.push(\r\n          onStrategy(\r\n            null,\r\n            strategy,\r\n            (value, work, options) => work(cdRef, options.scope),\r\n            { scope: (cdRef as any).context || cdRef }\r\n          )\r\n        );\r\n        return merge(...behaviors);\r\n      })\r\n    );\r\n}\r\n\r\n/**\r\n * @internal\r\n * creates an embeddedViewRef\r\n *\r\n * @param viewContainerRef\r\n * @param templateRef\r\n * @param context\r\n * @param index\r\n * @return EmbeddedViewRef<C>\r\n */\r\nexport function createEmbeddedView<C>(\r\n  viewContainerRef: ViewContainerRef,\r\n  templateRef: TemplateRef<C>,\r\n  context: C,\r\n  index = 0\r\n): EmbeddedViewRef<C> {\r\n  const view = viewContainerRef.createEmbeddedView(templateRef, context, index);\r\n  view.detectChanges();\r\n  return view;\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * A factory function returning an object to handle `TemplateRef`'s.\r\n * You can add and get a `TemplateRef`.\r\n *\r\n */\r\nexport function templateHandling<N, C>(\r\n  viewContainerRef: ViewContainerRef\r\n): {\r\n  add(name: N, templateRef: TemplateRef<C>): void;\r\n  get(name: N): TemplateRef<C>;\r\n  createEmbeddedView(name: N, context?: C, index?: number): EmbeddedViewRef<C>;\r\n} {\r\n  const templateCache = new Map<N, TemplateRef<C>>();\r\n\r\n  const get = (name: N): TemplateRef<C> => {\r\n    return templateCache.get(name);\r\n  };\r\n  return {\r\n    add(name: N, templateRef: TemplateRef<C>): void {\r\n      assertTemplate(name, templateRef);\r\n      if (!templateCache.has(name)) {\r\n        templateCache.set(name, templateRef);\r\n      } else {\r\n        throw new Error(\r\n          'Updating an already existing Template is not supported at the moment.'\r\n        );\r\n      }\r\n    },\r\n    get,\r\n    createEmbeddedView: (name: N, context?: C) =>\r\n      createEmbeddedView(viewContainerRef, get(name), context),\r\n  };\r\n\r\n  //\r\n  function assertTemplate<T>(\r\n    property: any,\r\n    templateRef: TemplateRef<T> | null\r\n  ): templateRef is TemplateRef<T> {\r\n    const isTemplateRefOrNull = !!(\r\n      !templateRef || templateRef.createEmbeddedView\r\n    );\r\n    if (!isTemplateRefOrNull) {\r\n      throw new Error(\r\n        `${property} must be a TemplateRef, but received something else.`\r\n      );\r\n    }\r\n    return isTemplateRefOrNull;\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * A side effect operator similar to `tap` but with a static internal logic.\r\n * It calls detect changes on the 'VirtualParent' and the injectingViewCdRef.\r\n *\r\n * @param tNode\r\n * @param injectingViewCdRef\r\n * @param strategy\r\n * @param notifyNeeded\r\n */\r\nexport function notifyAllParentsIfNeeded<T>(\r\n  tNode: TNode,\r\n  injectingViewCdRef: ChangeDetectorRef,\r\n  strategy: RxStrategyCredentials,\r\n  notifyNeeded: () => boolean\r\n): MonoTypeOperatorFunction<T> {\r\n  return (o$) =>\r\n    o$.pipe(\r\n      delay(0, asyncScheduler),\r\n      switchMap((v) => {\r\n        const notifyParent = notifyNeeded();\r\n        if (!notifyParent) {\r\n          return of(v);\r\n        }\r\n        const behaviors = tNode\r\n          ? getVirtualParentNotifications$(tNode, injectingViewCdRef, strategy)\r\n          : [];\r\n        // @TODO remove this CD on injectingViewCdRef if possible\r\n        behaviors.push(\r\n          onStrategy(\r\n            injectingViewCdRef,\r\n            strategy,\r\n            (_v, work, options) => work(injectingViewCdRef, options.scope),\r\n            {\r\n              scope: (injectingViewCdRef as any).context || injectingViewCdRef,\r\n            }\r\n          )\r\n        );\r\n        if (behaviors.length === 1) {\r\n          return of(v);\r\n        }\r\n        return concat(of(v), combineLatest(behaviors).pipe(ignoreElements()));\r\n      })\r\n    );\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * returns an Observable executing a side effects for change detection of parents\r\n *\r\n * @param injectingViewCdRef\r\n * @param strategy\r\n * @param notify\r\n */\r\nexport function notifyInjectingParentIfNeeded(\r\n  injectingViewCdRef: ChangeDetectorRef,\r\n  strategy: RxStrategyCredentials,\r\n  notify: boolean\r\n): Observable<null> {\r\n  return concat(\r\n    of(null),\r\n    notify\r\n      ? onStrategy(\r\n        injectingViewCdRef,\r\n          strategy,\r\n          (value, work, options) => {\r\n            // console.log('notify injectingView', injectingViewCdRef);\r\n            work(injectingViewCdRef, options.scope);\r\n          },\r\n          {}\r\n        ).pipe(ignoreElements())\r\n      : ([] as unknown as Observable<never>)\r\n  );\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Returns an array of observables triggering `detectChanges` on the __virtual parent__  (parent of the projected view)\r\n *\r\n * @param tNode - is a component that was projected into another component (virtual parent)\r\n * @param injectingViewCdRef - is needed to get the\r\n * @param strategy - the strategy to run the change detection\r\n */\r\nexport function getVirtualParentNotifications$(\r\n  tNode: TNode,\r\n  injectingViewCdRef: ChangeDetectorRef,\r\n  strategy: RxStrategyCredentials\r\n): Observable<unknown>[] {\r\n  const parentElements = extractProjectionParentViewSet(\r\n    injectingViewCdRef,\r\n    tNode\r\n  );\r\n  const behaviors = [];\r\n  for (const parentComponent of parentElements.values()) {\r\n    behaviors.push(\r\n      onStrategy(\r\n        parentComponent,\r\n        strategy,\r\n        // Here we CD the parent to update their projected views scenarios\r\n        (value, work, options) => {\r\n          // console.log('parentComponent', parentComponent);\r\n          detectChanges(parentComponent);\r\n        },\r\n        { scope: parentComponent }\r\n      )\r\n    );\r\n  }\r\n  return behaviors;\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  ErrorHandler,\r\n  NgZone,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { RxNotification } from '@rx-angular/cdk/notifications';\r\nimport { RxStrategies } from '@rx-angular/cdk/render-strategies';\r\n\r\nexport type rxBaseTemplateNames = 'errorTpl' | 'completeTpl' | 'suspenseTpl';\r\n\r\nexport enum RxBaseTemplateNames {\r\n  error = 'errorTpl',\r\n  complete = 'completeTpl',\r\n  suspense = 'suspenseTpl',\r\n}\r\n\r\nexport const enum RxListTemplateChangeType {\r\n  insert,\r\n  remove,\r\n  move,\r\n  update,\r\n  context,\r\n}\r\n// [value, index, oldIndex?]\r\nexport type RxListTemplateChangePayload<T> = [T, number, number?];\r\nexport type RxListTemplateChange<T = any> = [\r\n  RxListTemplateChangeType,\r\n  RxListTemplateChangePayload<T>\r\n];\r\nexport type RxListTemplateChanges<T = any> = [\r\n  RxListTemplateChange<T>[], // changes to apply\r\n  boolean // notify parent\r\n];\r\n\r\nexport interface RxViewContext<T> {\r\n  // to enable `let` syntax we have to use $implicit (var; let v = var)\r\n  $implicit: T;\r\n  // set context var complete to true (var$; let e = $error)\r\n  $error: false | Error;\r\n  // set context var complete to true (var$; let c = $complete)\r\n  $complete: boolean;\r\n  // set context var suspense to true (var$; let s = $suspense)\r\n  $suspense: any;\r\n}\r\n\r\nexport interface RxRenderAware<T> {\r\n  nextStrategy: (nextConfig: string | Observable<string>) => void;\r\n  render: (values$: Observable<RxNotification<T>>) => Observable<void>;\r\n}\r\n\r\nexport interface RxRenderSettings<T, C> {\r\n  cdRef: ChangeDetectorRef;\r\n  eRef: ElementRef;\r\n  parent: boolean;\r\n  patchZone: NgZone | false;\r\n  strategies: RxStrategies<string>;\r\n  defaultStrategyName: string;\r\n  errorHandler?: ErrorHandler;\r\n}\r\n\r\nexport type CreateEmbeddedView<C> = (\r\n  viewContainerRef: ViewContainerRef,\r\n  patchZone: NgZone | false\r\n) => (\r\n  templateRef: TemplateRef<C>,\r\n  context?: C,\r\n  index?: number\r\n) => EmbeddedViewRef<C>;\r\n\r\nexport type CreateViewContext<T, C, U = unknown> = (\r\n  value: T,\r\n  computedContext: U\r\n) => C;\r\n\r\nexport type UpdateViewContext<T, C, U = unknown> = (\r\n  value: T,\r\n  view: EmbeddedViewRef<C>,\r\n  computedContext?: U\r\n) => void;\r\n\r\nexport interface RxTemplateSettings<T, C, U = unknown> {\r\n  patchZone: NgZone | false;\r\n  viewContainerRef: ViewContainerRef;\r\n  createViewContext: CreateViewContext<T, C, U>;\r\n  updateViewContext: UpdateViewContext<T, C, U>;\r\n  initialTemplateRef?: TemplateRef<C>;\r\n  customContext?: (value: T) => any;\r\n}\r\n","import { ErrorHandler } from '@angular/core';\r\n\r\n/** @internal **/\r\nexport type RxRenderError<T> = [Error, T];\r\n\r\n/** @internal **/\r\nexport type RxRenderErrorFactory<T, E> = (\r\n  error: Error,\r\n  value: T\r\n) => RxRenderError<E>;\r\n\r\n/** @internal **/\r\nexport function isRxRenderError<T>(e: any): e is RxRenderError<T> {\r\n  return (\r\n    e != null && Array.isArray(e) && e.length === 2 && e[0] instanceof Error\r\n  );\r\n}\r\n\r\n/** @internal **/\r\nexport function createErrorHandler(\r\n  _handler?: ErrorHandler\r\n): ErrorHandler {\r\n  const _handleError = _handler\r\n    ? (e) => _handler.handleError(e)\r\n    : console.error;\r\n  return {\r\n    handleError: (error) => {\r\n      if (isRxRenderError(error)) {\r\n        _handleError(error[0]);\r\n        console.error('additionalErrorContext', error[1]);\r\n      } else {\r\n        _handleError(error);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\n/** @internal **/\r\nexport function toRenderError<T>(e: Error, context: T): RxRenderError<T> {\r\n  return [e, context];\r\n}\r\n","import { EmbeddedViewRef, TemplateRef } from '@angular/core';\r\nimport { RxCoalescingOptions } from '@rx-angular/cdk/coalescing';\r\nimport {\r\n  RxCompleteNotification,\r\n  RxErrorNotification,\r\n  RxNextNotification,\r\n  RxNotification,\r\n  RxNotificationKind,\r\n  RxSuspenseNotification,\r\n} from '@rx-angular/cdk/notifications';\r\nimport { EMPTY, merge, Observable, of } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  ignoreElements,\r\n  switchMap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { RxRenderWork, onStrategy, strategyHandling } from '@rx-angular/cdk/render-strategies';\r\nimport {\r\n  rxBaseTemplateNames,\r\n  RxRenderAware,\r\n  RxRenderSettings,\r\n  RxTemplateSettings,\r\n  RxViewContext,\r\n} from './model';\r\nimport { createErrorHandler } from './render-error';\r\nimport {\r\n  getTNode,\r\n  notifyAllParentsIfNeeded,\r\n  notifyInjectingParentIfNeeded,\r\n  templateHandling,\r\n  TNode,\r\n} from './utils';\r\n\r\nexport interface RxTemplateManager<\r\n  T,\r\n  C extends RxViewContext<T>,\r\n  N = rxBaseTemplateNames | string\r\n> extends RxRenderAware<T> {\r\n  addTemplateRef: (name: N, templateRef: TemplateRef<C>) => void;\r\n  // addTrigger: (trigger$: Observable<RxNotification<T>>) => void;\r\n  // activeTemplate: N;\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * A factory function that returns a map of projections to turn a notification of a Observable (next, error, complete)\r\n *\r\n * @param customNextContext - projection function to provide custom properties as well as override existing\r\n */\r\nexport function notificationKindToViewContext<T>(\r\n  customNextContext: (value: T) => object\r\n): RxViewContextMap<T> {\r\n  // @TODO rethink overrides\r\n  return {\r\n    suspense: (notification: RxSuspenseNotification<T>) => {\r\n      const $implicit: T | null | undefined = notification.value as T;\r\n      return {\r\n        $implicit,\r\n        $suspense: true,\r\n        $error: false,\r\n        $complete: false,\r\n        ...customNextContext($implicit),\r\n      };\r\n    },\r\n    next: (notification: RxNextNotification<T>) => {\r\n      const $implicit: T | null | undefined = notification.value as T;\r\n      return {\r\n        $implicit,\r\n        $suspense: false,\r\n        $error: false,\r\n        $complete: false,\r\n        ...customNextContext($implicit),\r\n      };\r\n    },\r\n    error: (notification: RxErrorNotification<T>) => {\r\n      const $implicit: T | null | undefined = notification.value as T;\r\n      return {\r\n        $implicit,\r\n        $complete: false,\r\n        $error: notification.error,\r\n        $suspense: false,\r\n        ...customNextContext($implicit),\r\n      };\r\n    },\r\n    complete: (notification: RxCompleteNotification<T>) => {\r\n      const $implicit: T | null | undefined = notification.value as T;\r\n      return {\r\n        $implicit,\r\n        $error: false,\r\n        $complete: true,\r\n        $suspense: false,\r\n        ...customNextContext($implicit),\r\n      };\r\n    },\r\n  };\r\n}\r\nexport type RxViewContextMap<T> = Record<\r\n  RxNotificationKind,\r\n  (value?: any) => Partial<RxViewContext<T>>\r\n>;\r\n\r\nexport type RxNotificationTemplateNameMap<T, C, N> = Record<\r\n  RxNotificationKind,\r\n  (value?: T, templates?: { get: (name: N) => TemplateRef<C> }) => N\r\n>;\r\n\r\nexport function createTemplateManager<\r\n  T,\r\n  C extends RxViewContext<T>,\r\n  N = rxBaseTemplateNames | string\r\n>(config: {\r\n  renderSettings: RxRenderSettings<T, C>;\r\n  templateSettings: RxTemplateSettings<T, C>;\r\n  templateTrigger$?: Observable<RxNotification<unknown>>;\r\n  notificationToTemplateName: RxNotificationTemplateNameMap<T, C, N>;\r\n}): RxTemplateManager<T, C, N> {\r\n  const { renderSettings, notificationToTemplateName, templateSettings } =\r\n    config;\r\n  const {\r\n    defaultStrategyName,\r\n    strategies,\r\n    cdRef: injectingViewCdRef,\r\n    patchZone,\r\n    parent,\r\n    eRef,\r\n  } = renderSettings;\r\n\r\n  const errorHandler = createErrorHandler(renderSettings.errorHandler);\r\n  const tNode: TNode = parent\r\n    ? getTNode(injectingViewCdRef, eRef.nativeElement)\r\n    : false;\r\n\r\n  let activeTemplate: N;\r\n\r\n  const strategyHandling$ = strategyHandling(defaultStrategyName, strategies);\r\n  const templates = templateHandling<N, C>(templateSettings.viewContainerRef);\r\n  const viewContainerRef = templateSettings.viewContainerRef;\r\n\r\n  const triggerHandling = config.templateTrigger$ || EMPTY;\r\n  const getContext = notificationKindToViewContext(\r\n    templateSettings.customContext || ((v) => {})\r\n  );\r\n\r\n  const workFactory = patchZone\r\n    ? (work: VoidFunction) => patchZone.run(work)\r\n    : (work: VoidFunction) => work();\r\n\r\n  return {\r\n    addTemplateRef: templates.add,\r\n    // addTrigger: triggerHandling.next,\r\n    nextStrategy: strategyHandling$.next,\r\n    render(values$: Observable<RxNotification<T>>): Observable<any> {\r\n      return values$.pipe(\r\n        /* tslint:disable */\r\n        // mergeWith(triggerHandling.trigger$ || EMPTY),\r\n        /* tslint:enable */\r\n        withLatestFrom(strategyHandling$.strategy$),\r\n        // Cancel old renders\r\n        switchMap(([notification, strategy]) => {\r\n          const kind: RxNotificationKind = notification.kind;\r\n          const value: T = notification.value as T;\r\n          const templateName = notificationToTemplateName[kind](\r\n            value,\r\n            templates\r\n          );\r\n\r\n          const template = templates.get(templateName);\r\n          const isNewTemplate = activeTemplate !== templateName;\r\n          const notifyParent = isNewTemplate && parent;\r\n          return merge(\r\n            onStrategy(\r\n              value,\r\n              strategy,\r\n              (v: T, work: RxRenderWork, options: RxCoalescingOptions) => {\r\n                const context = <C>getContext[kind](notification);\r\n                if (isNewTemplate) {\r\n                  // template has changed (undefined => next; suspense => next; ...)\r\n                  // handle remove & insert\r\n                  // remove current view if there is any\r\n                  if (viewContainerRef.length > 0) {\r\n                    // patch removal if needed\r\n                    workFactory(() => viewContainerRef.clear());\r\n                  }\r\n                  // create new view if any\r\n                  if (template) {\r\n                    // createEmbeddedView is already patched, no need for workFactory\r\n                    workFactory(() =>\r\n                      templates.createEmbeddedView(templateName, context)\r\n                    );\r\n                  }\r\n                } else if (template) {\r\n                  // template didn't change, update it\r\n                  // handle update\r\n                  const view = <EmbeddedViewRef<C>>viewContainerRef.get(0);\r\n                  Object.keys(context).forEach((k) => {\r\n                    view.context[k] = context[k];\r\n                  });\r\n                  // update view context, patch if needed\r\n                  workFactory(() => work(view, options.scope, notification));\r\n                }\r\n                activeTemplate = templateName;\r\n              }\r\n              // we don't need to specify any scope here. The template manager is the only one\r\n              // who will call `viewRef#detectChanges` on any of the templates it manages.\r\n              // whenever a new value comes in, any pre-scheduled work of this taskManager will\r\n              // be nooped before a new work will be scheduled. This happens because of the implementation\r\n              // of `StrategyCredential#behavior`\r\n            ).pipe(\r\n              notifyAllParentsIfNeeded(\r\n                tNode,\r\n                injectingViewCdRef,\r\n                strategy,\r\n                () => notifyParent\r\n              )\r\n            ),\r\n            notifyInjectingParentIfNeeded(\r\n              injectingViewCdRef,\r\n              strategy,\r\n              isNewTemplate\r\n            ).pipe(ignoreElements())\r\n          ).pipe(\r\n            catchError((e) => {\r\n              errorHandler.handleError(e);\r\n              return of(e);\r\n            })\r\n          );\r\n        })\r\n      );\r\n    },\r\n  };\r\n}\r\n","import {\r\n  RxListTemplateChange,\r\n  RxListTemplateChanges,\r\n  RxListTemplateChangeType,\r\n  RxTemplateSettings,\r\n} from './model';\r\nimport { EmbeddedViewRef, IterableChanges } from '@angular/core';\r\nimport { RxListViewContext } from './list-view-context';\r\nimport { createEmbeddedView } from './utils';\r\n\r\n/**\r\n * @internal\r\n *\r\n * Factory that returns a `ListTemplateManager` for the passed params.\r\n *\r\n * @param templateSettings\r\n */\r\nexport function getTemplateHandler<C extends RxListViewContext<T>, T>(\r\n  templateSettings: RxTemplateSettings<T, C>\r\n): ListTemplateManager<T> {\r\n  const {\r\n    viewContainerRef,\r\n    initialTemplateRef,\r\n    createViewContext,\r\n    updateViewContext,\r\n    patchZone,\r\n  } = templateSettings;\r\n\r\n  const workFactory = patchZone\r\n    ? (work: VoidFunction) => patchZone.run(work)\r\n    : (work: VoidFunction) => work();\r\n\r\n  return {\r\n    updateUnchangedContext,\r\n    insertView,\r\n    moveView,\r\n    removeView,\r\n    getListChanges,\r\n    updateView,\r\n  };\r\n\r\n  // =====\r\n\r\n  function updateUnchangedContext(index: number, count: number) {\r\n    const view = <EmbeddedViewRef<C>>viewContainerRef.get(index);\r\n    workFactory(() => {\r\n      view.context.updateContext({\r\n        count,\r\n        index,\r\n      });\r\n      view.detectChanges();\r\n    });\r\n  }\r\n\r\n  function moveView(\r\n    oldIndex: number,\r\n    item: T,\r\n    index: number,\r\n    count: number\r\n  ): void {\r\n    const oldView = viewContainerRef.get(oldIndex);\r\n    const view = <EmbeddedViewRef<C>>viewContainerRef.move(oldView, index);\r\n    workFactory(() => {\r\n      updateViewContext(item, view, {\r\n        count,\r\n        index,\r\n      });\r\n      view.detectChanges();\r\n    });\r\n  }\r\n\r\n  function updateView(item: T, index: number, count: number): void {\r\n    const view = <EmbeddedViewRef<C>>viewContainerRef.get(index);\r\n    workFactory(() => {\r\n      updateViewContext(item, view, {\r\n        count,\r\n        index,\r\n      });\r\n      view.detectChanges();\r\n    });\r\n  }\r\n\r\n  function removeView(index: number): void {\r\n    return workFactory(() => viewContainerRef.remove(index));\r\n  }\r\n\r\n  function insertView(item: T, index: number, count: number): void {\r\n    workFactory(() => {\r\n      createEmbeddedView(\r\n        viewContainerRef,\r\n        initialTemplateRef,\r\n        createViewContext(item, {\r\n          count,\r\n          index,\r\n        }),\r\n        index\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * An object that holds methods needed to introduce actions to a list e.g. move, remove, insert\r\n */\r\nexport interface ListTemplateManager<T> {\r\n  updateUnchangedContext(index: number, count: number): void;\r\n\r\n  insertView(item: T, index: number, count: number): void;\r\n\r\n  moveView(oldIndex: number, item: T, index: number, count: number): void;\r\n\r\n  updateView(item: T, index: number, count: number): void;\r\n\r\n  removeView(index: number): void;\r\n\r\n  getListChanges(\r\n    changes: IterableChanges<T>,\r\n    items: T[]\r\n  ): RxListTemplateChanges;\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * @param changes\r\n * @param items\r\n */\r\nfunction getListChanges<T>(\r\n  changes: IterableChanges<T>,\r\n  items: T[]\r\n): RxListTemplateChanges {\r\n  const changedIdxs = new Set<T>();\r\n  const changesArr: RxListTemplateChange[] = [];\r\n  let notifyParent = false;\r\n  changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\r\n    const item = record.item;\r\n    if (record.previousIndex == null) {\r\n      // insert\r\n      changesArr.push(getInsertChange(item, currentIndex === null ? undefined : currentIndex));\r\n      changedIdxs.add(item);\r\n      notifyParent = true;\r\n    } else if (currentIndex == null) {\r\n      // remove\r\n      changesArr.push(getRemoveChange(item, adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex));\r\n      changedIdxs.add(item);\r\n      notifyParent = true;\r\n    } else if (adjustedPreviousIndex !== null) {\r\n      // move\r\n      changesArr.push(getMoveChange(item, currentIndex, adjustedPreviousIndex));\r\n      changedIdxs.add(item);\r\n      notifyParent = true;\r\n    }\r\n  });\r\n  changes.forEachIdentityChange((record) => {\r\n    const item = record.item;\r\n    if (!changedIdxs.has(item)) {\r\n      changesArr.push(getUpdateChange(item, record.currentIndex));\r\n      changedIdxs.add(item);\r\n    }\r\n  });\r\n  items.forEach((item, index) => {\r\n    if (!changedIdxs.has(item)) {\r\n      changesArr.push(getUnchangedChange(item, index));\r\n    }\r\n  });\r\n  return [changesArr, notifyParent];\r\n\r\n  // ==========\r\n\r\n  function getMoveChange(\r\n    item: T,\r\n    currentIndex: number,\r\n    adjustedPreviousIndex: number\r\n  ): RxListTemplateChange {\r\n    return [\r\n      RxListTemplateChangeType.move,\r\n      [item, currentIndex, adjustedPreviousIndex],\r\n    ];\r\n  }\r\n\r\n  function getUpdateChange(\r\n    item: T,\r\n    currentIndex: number\r\n  ): RxListTemplateChange {\r\n    return [RxListTemplateChangeType.update, [item, currentIndex]];\r\n  }\r\n\r\n  function getUnchangedChange(item: T, index: number): RxListTemplateChange {\r\n    return [RxListTemplateChangeType.context, [item, index]];\r\n  }\r\n\r\n  function getInsertChange(\r\n    item: T,\r\n    currentIndex: number\r\n  ): RxListTemplateChange {\r\n    return [\r\n      RxListTemplateChangeType.insert,\r\n      [item, currentIndex === null ? undefined : currentIndex],\r\n    ];\r\n  }\r\n\r\n  function getRemoveChange(\r\n    item: T,\r\n    adjustedPreviousIndex: number\r\n  ): RxListTemplateChange {\r\n    return [\r\n      RxListTemplateChangeType.remove,\r\n      [item, adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex],\r\n    ];\r\n  }\r\n}\r\n","import {\r\n  EmbeddedViewRef,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  NgIterable,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n} from '@angular/core';\r\nimport { combineLatest, merge, Observable, of, OperatorFunction } from 'rxjs';\r\nimport {\r\n  catchError, distinctUntilChanged,\r\n  ignoreElements,\r\n  map,\r\n  switchMap,\r\n  tap\r\n} from 'rxjs/operators';\r\nimport { RxStrategyCredentials, onStrategy, strategyHandling } from '@rx-angular/cdk/render-strategies';\r\nimport {\r\n  RxListViewComputedContext,\r\n  RxListViewContext,\r\n} from './list-view-context';\r\nimport { getTemplateHandler } from './list-view-handler';\r\nimport {\r\n  RxListTemplateChange,\r\n  RxListTemplateChangeType,\r\n  RxRenderSettings,\r\n  RxTemplateSettings,\r\n} from './model';\r\nimport { createErrorHandler } from './render-error';\r\nimport {\r\n  getTNode,\r\n  notifyAllParentsIfNeeded,\r\n  notifyInjectingParentIfNeeded,\r\n  TNode,\r\n} from './utils';\r\n\r\nexport interface RxListManager<T> {\r\n  nextStrategy: (config: string | Observable<string>) => void;\r\n\r\n  render(changes$: Observable<NgIterable<T>>): Observable<void>;\r\n}\r\n\r\nexport function createListTemplateManager<\r\n  T,\r\n  C extends RxListViewContext<T>\r\n>(config: {\r\n  renderSettings: RxRenderSettings<T, C>;\r\n  templateSettings: Omit<\r\n    RxTemplateSettings<T, C, RxListViewComputedContext>,\r\n    'patchZone'\r\n  > & {\r\n    templateRef: TemplateRef<C>;\r\n  };\r\n  //\r\n  trackBy: TrackByFunction<T>;\r\n  iterableDiffers: IterableDiffers;\r\n}): RxListManager<T> {\r\n  const { templateSettings, renderSettings, trackBy, iterableDiffers } = config;\r\n  const {\r\n    defaultStrategyName,\r\n    strategies,\r\n    cdRef: injectingViewCdRef,\r\n    patchZone,\r\n    parent,\r\n    eRef,\r\n  } = renderSettings;\r\n  const errorHandler = createErrorHandler(renderSettings.errorHandler);\r\n  const strategyHandling$ = strategyHandling(defaultStrategyName, strategies);\r\n  const differ: IterableDiffer<T> = iterableDiffers.find([]).create(trackBy);\r\n  //               type,  context\r\n  const tNode: TNode = parent\r\n    ? getTNode(injectingViewCdRef, eRef.nativeElement)\r\n    : false;\r\n  /* TODO (regarding createView): this is currently not in use. for the list-manager this would mean to provide\r\n   functions for not only create. developers than should have to provide create, move, remove,... the whole thing.\r\n   i don't know if this is the right decision for a first RC */\r\n  const listViewHandler = getTemplateHandler({\r\n    ...templateSettings,\r\n    initialTemplateRef: templateSettings.templateRef,\r\n    patchZone,\r\n  });\r\n  const viewContainerRef = templateSettings.viewContainerRef;\r\n\r\n  let notifyParent = false;\r\n  let changesArr: RxListTemplateChange[];\r\n  let partiallyFinished = false;\r\n\r\n  return {\r\n    nextStrategy(nextConfig: Observable<string>): void {\r\n      strategyHandling$.next(nextConfig);\r\n    },\r\n    render(values$: Observable<NgIterable<T>>): Observable<any> {\r\n      return values$.pipe(render());\r\n    },\r\n  };\r\n\r\n  function render(): OperatorFunction<NgIterable<T>, any> {\r\n    return (o$: Observable<NgIterable<T>>): Observable<any> =>\r\n      combineLatest([o$, strategyHandling$.strategy$.pipe(distinctUntilChanged())]).pipe(\r\n        // map iterable to latest diff\r\n        map(([iterable, strategy]) => {\r\n          if (partiallyFinished) {\r\n            const currentIterable = [];\r\n            for (let i = 0, ilen = viewContainerRef.length; i < ilen; i++) {\r\n              const viewRef = <EmbeddedViewRef<C>>viewContainerRef.get(i);\r\n              currentIterable[i] = viewRef.context.$implicit;\r\n            }\r\n            differ.diff(currentIterable);\r\n          }\r\n          return {\r\n            changes: differ.diff(iterable),\r\n            items: iterable != null && Array.isArray(iterable) ? iterable : [],\r\n            strategy\r\n          };\r\n        }),\r\n        // Cancel old renders\r\n        switchMap(({ changes, items, strategy }) => {\r\n          if (!changes) {\r\n            return of([]);\r\n          }\r\n          const listChanges = listViewHandler.getListChanges(changes, items);\r\n          changesArr = listChanges[0];\r\n          const insertedOrRemoved = listChanges[1];\r\n          const applyChanges$ = getObservablesFromChangesArray(\r\n            changesArr,\r\n            strategy,\r\n            items.length\r\n          );\r\n          partiallyFinished = true;\r\n          // @TODO we need to know if we need to notifyParent on move aswell\r\n          notifyParent = insertedOrRemoved && parent;\r\n          return new Observable(subscriber => {\r\n            const s = merge(\r\n              combineLatest(\r\n                // emit after all changes are rendered\r\n                applyChanges$.length > 0 ? applyChanges$ : [of(items)]\r\n              ).pipe(\r\n                tap(() => (partiallyFinished = false)),\r\n                // somehow this makes the strategySelect work\r\n                notifyAllParentsIfNeeded(\r\n                  tNode,\r\n                  injectingViewCdRef,\r\n                  strategy,\r\n                  () => notifyParent\r\n                )\r\n              ),\r\n              // emit injectingParent if needed\r\n              notifyInjectingParentIfNeeded(\r\n                injectingViewCdRef,\r\n                strategy,\r\n                insertedOrRemoved\r\n              ).pipe(ignoreElements())\r\n            ).pipe(\r\n              map(() => items),\r\n              catchError((e) => {\r\n                partiallyFinished = false;\r\n                errorHandler.handleError(e);\r\n                return of(items);\r\n              })\r\n            ).subscribe(subscriber);\r\n            return () => {\r\n              s.unsubscribe();\r\n            }\r\n          })\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * returns an array of streams which process all of the view updates needed to reflect the latest diff to the\r\n   * viewContainer.\r\n   * I\r\n   *\r\n   * @param changes\r\n   * @param strategy\r\n   * @param count\r\n   */\r\n  function getObservablesFromChangesArray(\r\n    changes: RxListTemplateChange<T>[],\r\n    strategy: RxStrategyCredentials,\r\n    count: number\r\n  ): Observable<RxListTemplateChangeType>[] {\r\n    return changes.length > 0\r\n      ? changes.map((change) => {\r\n        const payload = change[1];\r\n          return onStrategy(\r\n            change[0],\r\n            strategy,\r\n            type => {\r\n              switch (type) {\r\n                case RxListTemplateChangeType.insert:\r\n                  listViewHandler.insertView(payload[0], payload[1], count);\r\n                  break;\r\n                case RxListTemplateChangeType.move:\r\n                  listViewHandler.moveView(\r\n                    payload[2],\r\n                    payload[0],\r\n                    payload[1],\r\n                    count\r\n                  );\r\n                  break;\r\n                case RxListTemplateChangeType.remove:\r\n                  listViewHandler.removeView(payload[1]);\r\n                  break;\r\n                case RxListTemplateChangeType.update:\r\n                  listViewHandler.updateView(payload[0], payload[1], count);\r\n                  break;\r\n                case RxListTemplateChangeType.context:\r\n                  listViewHandler.updateUnchangedContext(payload[1], count);\r\n                  break;\r\n              }\r\n            },\r\n            {}\r\n          );\r\n        })\r\n      : [of(null)];\r\n  }\r\n}\r\n","import { NgIterable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\r\nimport { distinctUntilChanged, map, pluck } from 'rxjs/operators';\r\n\r\nexport interface RxListViewComputedContext {\r\n  index: number;\r\n  count: number;\r\n}\r\n\r\nexport interface RxListViewContext<T, U = RxListViewComputedContext>\r\n  extends RxListViewComputedContext {\r\n  $implicit: T;\r\n  item$: Observable<T>;\r\n  updateContext(newProps: Partial<U>): void;\r\n}\r\n\r\nconst computeFirst = ({ count, index }) => index === 0;\r\nconst computeLast = ({ count, index }) => index === count - 1;\r\nconst computeEven = ({ count, index }) => index % 2 === 0;\r\n\r\nexport class RxDefaultListViewContext<\r\n  T,\r\n  U extends NgIterable<T> = NgIterable<T>,\r\n  K = keyof T\r\n> implements RxListViewContext<T> {\r\n  readonly _item = new ReplaySubject<T>(1);\r\n  item$ = this._item.asObservable();\r\n  private _$implicit: T;\r\n  private _$complete: boolean;\r\n  private _$error: false | Error;\r\n  private _$suspense: any;\r\n  private readonly _context$ = new BehaviorSubject<RxListViewComputedContext>({\r\n    index: -1,\r\n    count: -1,\r\n  });\r\n\r\n  set $implicit($implicit: T) {\r\n    this._$implicit = $implicit;\r\n    this._item.next($implicit);\r\n  }\r\n\r\n  get $implicit(): T {\r\n    return this._$implicit;\r\n  }\r\n\r\n  get $complete(): boolean {\r\n    return this._$complete;\r\n  }\r\n\r\n  get $error(): false | Error {\r\n    return this._$error;\r\n  }\r\n\r\n  get $suspense(): any {\r\n    return this._$suspense;\r\n  }\r\n\r\n  get index(): number {\r\n    return this._context$.getValue().index;\r\n  }\r\n\r\n  get count(): number {\r\n    return this._context$.getValue().count;\r\n  }\r\n\r\n  get first(): boolean {\r\n    return computeFirst(this._context$.getValue());\r\n  }\r\n\r\n  get last(): boolean {\r\n    return computeLast(this._context$.getValue());\r\n  }\r\n\r\n  get even(): boolean {\r\n    return computeEven(this._context$.getValue());\r\n  }\r\n\r\n  get odd(): boolean {\r\n    return !this.even;\r\n  }\r\n\r\n  get index$(): Observable<number> {\r\n    return this._context$.pipe(pluck('index'), distinctUntilChanged());\r\n  }\r\n\r\n  get count$(): Observable<number> {\r\n    return this._context$.pipe(pluck('count'), distinctUntilChanged());\r\n  }\r\n\r\n  get first$(): Observable<boolean> {\r\n    return this._context$.pipe(map(computeFirst), distinctUntilChanged());\r\n  }\r\n\r\n  get last$(): Observable<boolean> {\r\n    return this._context$.pipe(map(computeLast), distinctUntilChanged());\r\n  }\r\n\r\n  get even$(): Observable<boolean> {\r\n    return this._context$.pipe(map(computeEven), distinctUntilChanged());\r\n  }\r\n\r\n  get odd$(): Observable<boolean> {\r\n    return this.even$.pipe(map((even) => !even));\r\n  }\r\n\r\n  constructor(private item: T, customProps?: { count: number; index: number }) {\r\n    // tslint:disable-next-line:no-unused-expression\r\n    this.$implicit = item;\r\n    if (customProps) {\r\n      this.updateContext(customProps);\r\n    }\r\n  }\r\n\r\n  updateContext(newProps: Partial<RxListViewComputedContext>): void {\r\n    this._context$.next({\r\n      ...this._context$.getValue(),\r\n      ...newProps,\r\n    });\r\n  }\r\n\r\n  select = (props: K[]): Observable<any> => {\r\n    return this.item$.pipe(pluck(...(props as any)));\r\n  };\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["detectChanges"],"mappings":"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"}