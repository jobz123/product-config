{"version":3,"file":"cdk-coercing.js","sources":["../../../../libs/cdk/coercing/src/lib/coerceObservable.ts","../../../../libs/cdk/coercing/src/lib/coerceObservableWith.ts","../../../../libs/cdk/coercing/src/lib/coerceDistinctObservable.ts","../../../../libs/cdk/coercing/src/lib/coerceDistinctObservableWith.ts","../../../../libs/cdk/coercing/src/lib/coerce-all-factory.ts","../../../../libs/cdk/coercing/src/cdk-coercing.ts"],"sourcesContent":["import { isObservable, Observable, ObservableInput, of } from 'rxjs';\r\n\r\n/**\r\n * This Observable factory creates an Observable out of a static value or ObservableInput.\r\n *\r\n * @param o - the value to coerce\r\n */\r\nexport function coerceObservable<T>(\r\n  o: ObservableInput<T | null | undefined> | T | null | undefined\r\n): Observable<T | null | undefined> {\r\n  return isObservable(o) ? o : of(o as T | null | undefined);\r\n}\r\n","import { Observable, OperatorFunction } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { coerceObservable } from './coerceObservable';\r\n\r\n/**\r\n * This operator maps an Observable out of a static value or ObservableInput.\r\n *\r\n */\r\nexport function coerceObservableWith<T>(): OperatorFunction<\r\n  Observable<T | null | undefined> | T | null | undefined,\r\n  Observable<T | null | undefined>\r\n> {\r\n  return (o$: Observable<Observable<T> | T>) => map(coerceObservable)(o$);\r\n}\r\n","import {\r\n  isObservable,\r\n  Observable,\r\n  ObservableInput,\r\n  of,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { distinctUntilChanged, map, switchAll } from 'rxjs/operators';\r\nimport { coerceObservable } from './coerceObservable';\r\n\r\n/**\r\n * This Observable factory creates an Observable out of a static value or ObservableInput.\r\n * It forwards only distinct values from distinct incoming Observables or values.\r\n * This comes in handy in any environment where you handle processing of incoming dynamic values and their state.\r\n *\r\n * Optionally you can pass a flatten strategy to get find grained control of the flattening process. E.g. mergeAll, switchAll\r\n *\r\n * @param o$ - The Observable to coerce and map to a Observable with distinct values\r\n * @param flattenOperator - determines the flattening strategy e.g. mergeAll, concatAll, exhaust, switchAll. default is switchAll\r\n */\r\nexport function coerceDistinctObservable<T>(\r\n  o$: Observable<Observable<T> | T>,\r\n  flattenOperator?: OperatorFunction<ObservableInput<T>, T>\r\n) {\r\n  flattenOperator = flattenOperator || switchAll();\r\n  return coerceObservable(o$).pipe(\r\n    distinctUntilChanged(),\r\n    flattenOperator,\r\n    distinctUntilChanged()\r\n  );\r\n}\r\n","import {\r\n  isObservable,\r\n  Observable,\r\n  ObservableInput,\r\n  of,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { distinctUntilChanged, map, switchAll } from 'rxjs/operators';\r\nimport { coerceObservableWith } from './coerceObservableWith';\r\n\r\n/**\r\n * This operator takes an Observable of values ot Observables aof values and\r\n * It forwards only distinct values from distinct incoming Observables or values.\r\n * This comes in handy in any environment where you handle processing of incoming dynamic values and their state.\r\n *\r\n * Optionally you can pass a flatten strategy to get find grained control of the flattening process. E.g. mergeAll, switchAll\r\n *\r\n * @param flattenOperator - determines the flattening strategy e.g. mergeAll, concatAll, exhaust, switchAll. default is switchAll\r\n *\r\n */\r\nexport function coerceDistinctWith<T>(\r\n  flattenOperator?: OperatorFunction<ObservableInput<T>, T>\r\n) {\r\n  flattenOperator = flattenOperator || switchAll();\r\n  return (o$: Observable<Observable<T> | T>) =>\r\n    o$.pipe(\r\n      coerceObservableWith(),\r\n      distinctUntilChanged(),\r\n      flattenOperator,\r\n      distinctUntilChanged()\r\n    );\r\n}\r\n","import { Observable, ObservableInput, OperatorFunction, Subject } from 'rxjs';\r\nimport { switchAll } from 'rxjs/operators';\r\nimport { coerceDistinctWith } from './coerceDistinctObservableWith';\r\n\r\n/**\r\n * @internal\r\n *\r\n * A factory function returning an object to handle the process of merging Observable next notifications into one\r\n *   Observable. This API takes away the clumsy handling of static values and Observable, reduces the number of\r\n *   emissions by:\r\n * - only merging distinct Observables\r\n * - only emit distingt values of the merged result\r\n *\r\n * You can next a Observable of `U` multiple times and merge them into the Observable exposed under one optimized\r\n *   `values$`\r\n *\r\n */\r\nexport function coerceAllFactory<U, R = U>(\r\n  subjectFactory?: () => Subject<ObservableInput<U> | U>,\r\n  flattenOperator?: OperatorFunction<ObservableInput<U>, R>\r\n): {\r\n  values$: Observable<R>;\r\n  next(observable: ObservableInput<U> | U): void;\r\n} {\r\n  const observablesSubject = subjectFactory ? subjectFactory() : new Subject();\r\n  flattenOperator = flattenOperator || (switchAll() as any);\r\n  const values$ = observablesSubject.pipe(\r\n    coerceDistinctWith(flattenOperator as any)\r\n  ) as Observable<R>;\r\n\r\n  return {\r\n    next(observable: ObservableInput<U> | U) {\r\n      observablesSubject.next(observable);\r\n    },\r\n    values$,\r\n  };\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;AAEA;;;;;SAKgB,gBAAgB,CAC9B,CAA+D;IAE/D,OAAO,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAyB,CAAC,CAAC;AAC7D;;ACPA;;;;SAIgB,oBAAoB;IAIlC,OAAO,CAAC,EAAiC,KAAK,GAAG,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC;AAC1E;;ACHA;;;;;;;;;;SAUgB,wBAAwB,CACtC,EAAiC,EACjC,eAAyD;IAEzD,eAAe,GAAG,eAAe,IAAI,SAAS,EAAE,CAAC;IACjD,OAAO,gBAAgB,CAAC,EAAE,CAAC,CAAC,IAAI,CAC9B,oBAAoB,EAAE,EACtB,eAAe,EACf,oBAAoB,EAAE,CACvB,CAAC;AACJ;;ACpBA;;;;;;;;;;SAUgB,kBAAkB,CAChC,eAAyD;IAEzD,eAAe,GAAG,eAAe,IAAI,SAAS,EAAE,CAAC;IACjD,OAAO,CAAC,EAAiC,KACvC,EAAE,CAAC,IAAI,CACL,oBAAoB,EAAE,EACtB,oBAAoB,EAAE,EACtB,eAAe,EACf,oBAAoB,EAAE,CACvB,CAAC;AACN;;AC3BA;;;;;;;;;;;;;SAagB,gBAAgB,CAC9B,cAAsD,EACtD,eAAyD;IAKzD,MAAM,kBAAkB,GAAG,cAAc,GAAG,cAAc,EAAE,GAAG,IAAI,OAAO,EAAE,CAAC;IAC7E,eAAe,GAAG,eAAe,IAAK,SAAS,EAAU,CAAC;IAC1D,MAAM,OAAO,GAAG,kBAAkB,CAAC,IAAI,CACrC,kBAAkB,CAAC,eAAsB,CAAC,CAC1B,CAAC;IAEnB,OAAO;QACL,IAAI,CAAC,UAAkC;YACrC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACrC;QACD,OAAO;KACR,CAAC;AACJ;;ACpCA;;;;;;"}