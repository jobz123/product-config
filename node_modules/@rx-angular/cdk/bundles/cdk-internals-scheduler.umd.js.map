{"version":3,"file":"cdk-internals-scheduler.umd.js","sources":["../../../../libs/cdk/internals/scheduler/src/lib/schedulerFeatureFlags.ts","../../../../libs/cdk/internals/scheduler/src/lib/schedulerMinHeap.ts","../../../../libs/cdk/internals/scheduler/src/lib/scheduler.ts","../../../../libs/cdk/internals/scheduler/src/cdk-internals-scheduler.ts"],"sourcesContent":["export const enableIsInputPending = false;\r\n","import { PriorityLevel } from './schedulerPriorities';\r\n\r\ntype Heap = Array<ReactSchedulerTask>;\r\n\r\nexport interface ReactSchedulerTask {\r\n  id: number;\r\n  sortIndex: number;\r\n  callback: VoidFunction;\r\n  priorityLevel: PriorityLevel;\r\n  startTime: number;\r\n  expirationTime: number;\r\n  isQueued?: boolean;\r\n}\r\n\r\nexport function push(heap: Heap, node: ReactSchedulerTask): void {\r\n  const index = heap.length;\r\n  heap.push(node);\r\n  siftUp(heap, node, index);\r\n}\r\n\r\nexport function peek(heap: Heap): ReactSchedulerTask | null {\r\n  const first = heap[0];\r\n  return first === undefined ? null : first;\r\n}\r\n\r\nexport function pop(heap: Heap): ReactSchedulerTask | null {\r\n  const first = heap[0];\r\n  if (first !== undefined) {\r\n    const last = heap.pop();\r\n    if (last !== first) {\r\n      heap[0] = last;\r\n      siftDown(heap, last, 0);\r\n    }\r\n    return first;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction siftUp(heap, node, i) {\r\n  let index = i;\r\n  // eslint-disable-next-line no-constant-condition\r\n  while (true) {\r\n    // tslint:disable-next-line:no-bitwise\r\n    const parentIndex = (index - 1) >>> 1;\r\n    const parent = heap[parentIndex];\r\n    if (parent !== undefined && compare(parent, node) > 0) {\r\n      // The parent is larger. Swap positions.\r\n      heap[parentIndex] = node;\r\n      heap[index] = parent;\r\n      index = parentIndex;\r\n    } else {\r\n      // The parent is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction siftDown(heap, node, i) {\r\n  let index = i;\r\n  const length = heap.length;\r\n  while (index < length) {\r\n    const leftIndex = (index + 1) * 2 - 1;\r\n    const left = heap[leftIndex];\r\n    const rightIndex = leftIndex + 1;\r\n    const right = heap[rightIndex];\r\n\r\n    // If the left or right node is smaller, swap with the smaller of those.\r\n    if (left !== undefined && compare(left, node) < 0) {\r\n      if (right !== undefined && compare(right, left) < 0) {\r\n        heap[index] = right;\r\n        heap[rightIndex] = node;\r\n        index = rightIndex;\r\n      } else {\r\n        heap[index] = left;\r\n        heap[leftIndex] = node;\r\n        index = leftIndex;\r\n      }\r\n    } else if (right !== undefined && compare(right, node) < 0) {\r\n      heap[index] = right;\r\n      heap[rightIndex] = node;\r\n      index = rightIndex;\r\n    } else {\r\n      // Neither child is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction compare(a, b) {\r\n  // Compare sort index first, then task id.\r\n  const diff = a.sortIndex - b.sortIndex;\r\n  return diff !== 0 ? diff : a.id - b.id;\r\n}\r\n","// see https://raw.githubusercontent.com/facebook/react/master/packages/scheduler/src/forks/SchedulerDOM.js\r\n\r\nimport { ɵglobal } from '@angular/core';\r\nimport { enableIsInputPending } from './schedulerFeatureFlags';\r\nimport { peek, pop, push, ReactSchedulerTask } from './schedulerMinHeap';\r\n\r\nimport { PriorityLevel } from './schedulerPriorities';\r\n\r\n/**\r\n * @description Will be provided through Terser global definitions by Angular CLI\r\n * during the production build.\r\n */\r\ndeclare const ngDevMode: boolean;\r\n\r\nlet getCurrentTime: () => number;\r\nconst hasPerformanceNow =\r\n  typeof performance === 'object' && typeof performance.now === 'function';\r\n\r\nif (hasPerformanceNow) {\r\n  const localPerformance = performance;\r\n  getCurrentTime = () => localPerformance.now();\r\n} else {\r\n  const localDate = Date;\r\n  const initialTime = localDate.now();\r\n  getCurrentTime = () => localDate.now() - initialTime;\r\n}\r\n\r\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\r\n// Math.pow(2, 30) - 1\r\n// 0b111111111111111111111111111111\r\nconst maxSigned31BitInt = 1073741823;\r\n\r\n// Times out immediately\r\nconst IMMEDIATE_PRIORITY_TIMEOUT = -1;\r\n// Eventually times out\r\nconst USER_BLOCKING_PRIORITY_TIMEOUT = 250;\r\nconst NORMAL_PRIORITY_TIMEOUT = 5000;\r\nconst LOW_PRIORITY_TIMEOUT = 10000;\r\n// Never times out\r\nconst IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\r\n\r\n// Tasks are stored on a min heap\r\nconst taskQueue = [];\r\nconst timerQueue = [];\r\n\r\n// Incrementing id counter. Used to maintain insertion order.\r\nlet taskIdCounter = 1;\r\n\r\n// Pausing the scheduler is useful for debugging.\r\nlet isSchedulerPaused = false;\r\n\r\nlet currentTask = null;\r\nlet currentPriorityLevel = PriorityLevel.NormalPriority;\r\n\r\n// This is set while performing work, to prevent re-entrancy.\r\nlet isPerformingWork = false;\r\n\r\nlet isHostCallbackScheduled = false;\r\nlet isHostTimeoutScheduled = false;\r\n\r\n// Capture local references to native APIs, in case a polyfill overrides them.\r\nconst setTimeout = ɵglobal.setTimeout;\r\nconst clearTimeout = ɵglobal.clearTimeout;\r\nconst setImmediate = ɵglobal.setImmediate; // IE and Node.js + jsdom\r\nconst messageChannel = ɵglobal.MessageChannel;\r\n\r\nfunction advanceTimers(currentTime) {\r\n  // Check for tasks that are no longer delayed and add them to the queue.\r\n  let timer = peek(timerQueue);\r\n  while (timer !== null) {\r\n    if (timer.callback === null) {\r\n      // Timer was cancelled.\r\n      pop(timerQueue);\r\n    } else if (timer.startTime <= currentTime) {\r\n      // Timer fired. Transfer to the task queue.\r\n      pop(timerQueue);\r\n      timer.sortIndex = timer.expirationTime;\r\n      push(taskQueue, timer);\r\n    } else {\r\n      // Remaining timers are pending.\r\n      return;\r\n    }\r\n    timer = peek(timerQueue);\r\n  }\r\n}\r\n\r\nfunction handleTimeout(currentTime) {\r\n  isHostTimeoutScheduled = false;\r\n  advanceTimers(currentTime);\r\n\r\n  if (!isHostCallbackScheduled) {\r\n    if (peek(taskQueue) !== null) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    } else {\r\n      const firstTimer = peek(timerQueue);\r\n      if (firstTimer !== null) {\r\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushWork(hasTimeRemaining, initialTime) {\r\n  // We'll need a host callback the next time work is scheduled.\r\n  isHostCallbackScheduled = false;\r\n  if (isHostTimeoutScheduled) {\r\n    // We scheduled a timeout but it's no longer needed. Cancel it.\r\n    isHostTimeoutScheduled = false;\r\n    cancelHostTimeout();\r\n  }\r\n\r\n  isPerformingWork = true;\r\n  const previousPriorityLevel = currentPriorityLevel;\r\n  try {\r\n    return workLoop(hasTimeRemaining, initialTime);\r\n  } finally {\r\n    currentTask = null;\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    isPerformingWork = false;\r\n  }\r\n}\r\n\r\nfunction workLoop(hasTimeRemaining, initialTime) {\r\n  let currentTime = initialTime;\r\n  advanceTimers(currentTime);\r\n  currentTask = peek(taskQueue);\r\n  while (currentTask !== null && !isSchedulerPaused) {\r\n    if (\r\n      currentTask.expirationTime > currentTime &&\r\n      (!hasTimeRemaining || shouldYieldToHost())\r\n    ) {\r\n      // This currentTask hasn't expired, and we've reached the deadline.\r\n      break;\r\n    }\r\n    const callback = currentTask.callback;\r\n    if (typeof callback === 'function') {\r\n      currentTask.callback = null;\r\n      currentPriorityLevel = currentTask.priorityLevel;\r\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\r\n      const continuationCallback = callback(didUserCallbackTimeout);\r\n      currentTime = getCurrentTime();\r\n      if (typeof continuationCallback === 'function') {\r\n        currentTask.callback = continuationCallback;\r\n      } else {\r\n        if (currentTask === peek(taskQueue)) {\r\n          pop(taskQueue);\r\n        }\r\n      }\r\n      advanceTimers(currentTime);\r\n    } else {\r\n      pop(taskQueue);\r\n    }\r\n    currentTask = peek(taskQueue);\r\n  }\r\n  // Return whether there's additional work\r\n  if (currentTask !== null) {\r\n    return true;\r\n  } else {\r\n    const firstTimer = peek(timerQueue);\r\n    if (firstTimer !== null) {\r\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction runWithPriority(priorityLevel, eventHandler) {\r\n  switch (priorityLevel) {\r\n    case PriorityLevel.ImmediatePriority:\r\n    case PriorityLevel.UserBlockingPriority:\r\n    case PriorityLevel.NormalPriority:\r\n    case PriorityLevel.LowPriority:\r\n    case PriorityLevel.IdlePriority:\r\n      break;\r\n    default:\r\n      priorityLevel = PriorityLevel.NormalPriority;\r\n  }\r\n\r\n  const previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction next(eventHandler) {\r\n  let priorityLevel;\r\n  switch (currentPriorityLevel) {\r\n    case PriorityLevel.ImmediatePriority:\r\n    case PriorityLevel.UserBlockingPriority:\r\n    case PriorityLevel.NormalPriority:\r\n      // Shift down to normal priority\r\n      priorityLevel = PriorityLevel.NormalPriority;\r\n      break;\r\n    default:\r\n      // Anything lower than normal priority should remain at the current level.\r\n      priorityLevel = currentPriorityLevel;\r\n      break;\r\n  }\r\n\r\n  const previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction wrapCallback(callback: VoidFunction) {\r\n  const parentPriorityLevel = currentPriorityLevel;\r\n  return () => {\r\n    // This is a fork of runWithPriority, inlined for performance.\r\n    const previousPriorityLevel = currentPriorityLevel;\r\n    currentPriorityLevel = parentPriorityLevel;\r\n\r\n    try {\r\n      // eslint-disable-next-line prefer-rest-params\r\n      return callback.apply(this, arguments);\r\n    } finally {\r\n      currentPriorityLevel = previousPriorityLevel;\r\n    }\r\n  };\r\n}\r\n\r\ninterface ScheduleCallbackOptions {\r\n  delay: number;\r\n}\r\n\r\nfunction scheduleCallback(\r\n  priorityLevel: PriorityLevel,\r\n  callback: VoidFunction,\r\n  options?: ScheduleCallbackOptions\r\n): ReactSchedulerTask {\r\n  const currentTime = getCurrentTime();\r\n\r\n  let startTime: number;\r\n  if (typeof options === 'object' && options !== null) {\r\n    const delay = options.delay;\r\n    if (typeof delay === 'number' && delay > 0) {\r\n      startTime = currentTime + delay;\r\n    } else {\r\n      startTime = currentTime;\r\n    }\r\n  } else {\r\n    startTime = currentTime;\r\n  }\r\n\r\n  let timeout: number;\r\n  switch (priorityLevel) {\r\n    case PriorityLevel.ImmediatePriority:\r\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\r\n      break;\r\n    case PriorityLevel.UserBlockingPriority:\r\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\r\n      break;\r\n    case PriorityLevel.IdlePriority:\r\n      timeout = IDLE_PRIORITY_TIMEOUT;\r\n      break;\r\n    case PriorityLevel.LowPriority:\r\n      timeout = LOW_PRIORITY_TIMEOUT;\r\n      break;\r\n    case PriorityLevel.NormalPriority:\r\n    default:\r\n      timeout = NORMAL_PRIORITY_TIMEOUT;\r\n      break;\r\n  }\r\n\r\n  const expirationTime = startTime + timeout;\r\n\r\n  const newTask: ReactSchedulerTask = {\r\n    id: taskIdCounter++,\r\n    callback,\r\n    priorityLevel,\r\n    startTime,\r\n    expirationTime,\r\n    sortIndex: -1,\r\n  };\r\n\r\n  if (startTime > currentTime) {\r\n    // This is a delayed task.\r\n    newTask.sortIndex = startTime;\r\n    push(timerQueue, newTask);\r\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\r\n      // All tasks are delayed, and this is the task with the earliest delay.\r\n      if (isHostTimeoutScheduled) {\r\n        // Cancel an existing timeout.\r\n        cancelHostTimeout();\r\n      } else {\r\n        isHostTimeoutScheduled = true;\r\n      }\r\n      // Schedule a timeout.\r\n      requestHostTimeout(handleTimeout, startTime - currentTime);\r\n    }\r\n  } else {\r\n    newTask.sortIndex = expirationTime;\r\n    push(taskQueue, newTask);\r\n    // Schedule a host callback, if needed. If we're already performing work,\r\n    // wait until the next time we yield.\r\n    if (!isHostCallbackScheduled && !isPerformingWork) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    }\r\n  }\r\n\r\n  return newTask;\r\n}\r\n\r\nfunction pauseExecution() {\r\n  isSchedulerPaused = true;\r\n}\r\n\r\nfunction continueExecution() {\r\n  isSchedulerPaused = false;\r\n  if (!isHostCallbackScheduled && !isPerformingWork) {\r\n    isHostCallbackScheduled = true;\r\n    requestHostCallback(flushWork);\r\n  }\r\n}\r\n\r\nfunction getFirstCallbackNode() {\r\n  return peek(taskQueue);\r\n}\r\n\r\nfunction cancelCallback(task) {\r\n  // Null out the callback to indicate the task has been canceled. (Can't\r\n  // remove from the queue because you can't remove arbitrary nodes from an\r\n  // array based heap, only the first one.)\r\n  task.callback = null;\r\n}\r\n\r\nfunction getCurrentPriorityLevel() {\r\n  return currentPriorityLevel;\r\n}\r\n\r\nlet isMessageLoopRunning = false;\r\nlet scheduledHostCallback = null;\r\nlet taskTimeoutID = -1;\r\n\r\n// Scheduler periodically yields in case there is other work on the main\r\n// thread, like user events. By default, it yields multiple times per frame.\r\n// It does not attempt to align with frame boundaries, since most tasks don't\r\n// need to be frame aligned; for those that do, use requestAnimationFrame.\r\nlet yieldInterval = 16;\r\nlet deadline = 0;\r\n\r\n// TODO: Make this configurable\r\n// TODO: Adjust this based on priority?\r\nconst maxYieldInterval = 300;\r\nlet needsPaint = false;\r\n\r\nfunction shouldYieldToHost() {\r\n  if (\r\n    enableIsInputPending &&\r\n    navigator !== undefined &&\r\n    (navigator as any).scheduling !== undefined &&\r\n    (navigator as any).scheduling.isInputPending !== undefined\r\n  ) {\r\n    const scheduling = (navigator as any).scheduling;\r\n    const currentTime = getCurrentTime();\r\n    if (currentTime >= deadline) {\r\n      // There's no time left. We may want to yield control of the main\r\n      // thread, so the browser can perform high priority tasks. The main ones\r\n      // are painting and user input. If there's a pending paint or a pending\r\n      // input, then we should yield. But if there's neither, then we can\r\n      // yield less often while remaining responsive. We'll eventually yield\r\n      // regardless, since there could be a pending paint that wasn't\r\n      // accompanied by a call to `requestPaint`, or other main thread tasks\r\n      // like network events.\r\n      if (needsPaint || scheduling.isInputPending()) {\r\n        // There is either a pending paint or a pending input.\r\n        return true;\r\n      }\r\n      // There's no pending input. Only yield if we've reached the max\r\n      // yield interval.\r\n      return currentTime >= maxYieldInterval;\r\n    } else {\r\n      // There's still time left in the frame.\r\n      return false;\r\n    }\r\n  } else {\r\n    // `isInputPending` is not available. Since we have no way of knowing if\r\n    // there's pending input, always yield at the end of the frame.\r\n    return getCurrentTime() >= deadline;\r\n  }\r\n}\r\n\r\nfunction requestPaint() {\r\n  if (\r\n    enableIsInputPending &&\r\n    navigator !== undefined &&\r\n    (navigator as any).scheduling !== undefined &&\r\n    (navigator as any).scheduling.isInputPending !== undefined\r\n  ) {\r\n    needsPaint = true;\r\n  }\r\n\r\n  // Since we yield every frame regardless, `requestPaint` has no effect.\r\n}\r\n\r\nfunction forceFrameRate(fps) {\r\n  if (fps < 0 || fps > 125) {\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      console.error(\r\n        'forceFrameRate takes a positive int between 0 and 125, ' +\r\n          'forcing frame rates higher than 125 fps is not supported'\r\n      );\r\n    }\r\n    return;\r\n  }\r\n  if (fps > 0) {\r\n    yieldInterval = Math.floor(1000 / fps);\r\n  } else {\r\n    // reset the framerate\r\n    yieldInterval = 5;\r\n  }\r\n}\r\n\r\nconst performWorkUntilDeadline = () => {\r\n  if (scheduledHostCallback !== null) {\r\n    const currentTime = getCurrentTime();\r\n    // Yield after `yieldInterval` ms, regardless of where we are in the vsync\r\n    // cycle. This means there's always time remaining at the beginning of\r\n    // the message event.\r\n    deadline = currentTime + yieldInterval;\r\n    const hasTimeRemaining = true;\r\n\r\n    // If a scheduler task throws, exit the current browser task so the\r\n    // error can be observed.\r\n    //\r\n    // Intentionally not using a try-catch, since that makes some debugging\r\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\r\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\r\n    let hasMoreWork = true;\r\n    try {\r\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\r\n    } finally {\r\n      if (hasMoreWork) {\r\n        // If there's more work, schedule the next message event at the end\r\n        // of the preceding one.\r\n        schedulePerformWorkUntilDeadline();\r\n      } else {\r\n        isMessageLoopRunning = false;\r\n        scheduledHostCallback = null;\r\n      }\r\n    }\r\n  } else {\r\n    isMessageLoopRunning = false;\r\n  }\r\n  // Yielding to the browser will give it a chance to paint, so we can\r\n  // reset this.\r\n  needsPaint = false;\r\n};\r\n\r\nlet schedulePerformWorkUntilDeadline;\r\nif (typeof setImmediate === 'function') {\r\n  // Node.js and old IE.\r\n  // There's a few reasons for why we prefer setImmediate.\r\n  //\r\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\r\n  // (Even though this is a DOM fork of the Scheduler, you could get here\r\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\r\n  // https://github.com/facebook/react/issues/20756\r\n  //\r\n  // But also, it runs earlier which is the semantic we want.\r\n  // If other browsers ever implement it, it's better to use it.\r\n  // Although both of these would be inferior to native scheduling.\r\n  schedulePerformWorkUntilDeadline = () => {\r\n    setImmediate(performWorkUntilDeadline);\r\n  };\r\n} else if (typeof messageChannel !== 'undefined') {\r\n  const channel: MessageChannel = new messageChannel();\r\n  const port = channel.port2;\r\n\r\n  channel.port1.onmessage = performWorkUntilDeadline;\r\n  schedulePerformWorkUntilDeadline = () => {\r\n    port.postMessage(null);\r\n  };\r\n} else {\r\n  // We should only fallback here in non-browser environments.\r\n  schedulePerformWorkUntilDeadline = () => {\r\n    setTimeout(performWorkUntilDeadline, 0);\r\n  };\r\n}\r\n\r\nfunction requestHostCallback(callback) {\r\n  scheduledHostCallback = callback;\r\n  if (!isMessageLoopRunning) {\r\n    isMessageLoopRunning = true;\r\n    schedulePerformWorkUntilDeadline();\r\n  }\r\n}\r\n\r\nfunction requestHostTimeout(callback, ms) {\r\n  taskTimeoutID = setTimeout(() => {\r\n    callback(getCurrentTime());\r\n  }, ms);\r\n}\r\n\r\nfunction cancelHostTimeout() {\r\n  clearTimeout(taskTimeoutID);\r\n  taskTimeoutID = -1;\r\n}\r\n\r\nconst _requestPaint = requestPaint;\r\n\r\nexport {\r\n  runWithPriority,\r\n  next,\r\n  scheduleCallback,\r\n  cancelCallback,\r\n  wrapCallback,\r\n  getCurrentPriorityLevel,\r\n  shouldYieldToHost as shouldYield,\r\n  _requestPaint as requestPaint,\r\n  continueExecution,\r\n  pauseExecution,\r\n  getFirstCallbackNode,\r\n  getCurrentTime as now,\r\n  forceFrameRate as forceFrameRate,\r\n};\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["ɵglobal"],"mappings":"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"}