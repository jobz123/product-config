(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@rx-angular/cdk/zone-less'), require('@rx-angular/cdk/render-strategies')) :
    typeof define === 'function' && define.amd ? define('@rx-angular/cdk/template', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@rx-angular/cdk/zone-less', '@rx-angular/cdk/render-strategies'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['rx-angular'] = global['rx-angular'] || {}, global['rx-angular']['cdk-template'] = {}), global.ng.core, global.rxjs, global.rxjs.operators, global['rx-angular']['cdk-zone-less'], global['rx-angular']['cdk-render-strategies']));
}(this, (function (exports, core, rxjs, operators, zoneLess, renderStrategies) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    // Below are constants for LView indices to help us look up LView members
    // without having to remember the specific indices.
    // Uglify will inline these when minifying so there shouldn't be a cost.
    var TVIEW = 1;
    var T_HOST = 6;
    var L_CONTAINER_NATIVE = 7;
    var CONTEXT = 8;
    var HEADER_OFFSET = 20;
    /**
     * @internal
     *
     * Returns the TNode of the passed node form TVIEW of passed cdRef
     *
     * @param cdRef
     * @param native
     */
    function getTNode(cdRef, native) {
        var lView = cdRef._cdRefInjectingView;
        if (!lView) {
            return undefined;
        }
        var tView = lView[TVIEW];
        var i = HEADER_OFFSET;
        var lContainer;
        while (!lContainer && i <= tView['bindingStartIndex']) {
            var candidate = lView[i];
            if (candidate && candidate[L_CONTAINER_NATIVE] === native) {
                lContainer = candidate;
            }
            i++;
        }
        return lContainer[T_HOST];
    }
    /**
     * @internal
     *
     * Returns a set of references to parent views
     *
     *
     * @param cdRef
     * @param tNode
     */
    function extractProjectionParentViewSet(cdRef, tNode) {
        var injectingLView = cdRef._cdRefInjectingView;
        var injectingTView = injectingLView[1];
        var components = new Set(injectingTView['components']);
        var parentElements = new Set();
        var parent = tNode['parent'];
        while (parent != null && components.size > 0) {
            var idx = parent['index'];
            if (components.has(idx)) {
                // TODO: we should discuss about this. currently only the first Component will get returned, not a list of
                //  components. Maybe we should make the parent notification configurable regarding the level of `deepness`?
                // components.delete(idx);
                components.clear();
                parentElements.add(injectingLView[idx][CONTEXT]);
            }
            parent = parent['parent'];
        }
        return parentElements;
    }
    function extractProjectionViews(cdRef, tNode) {
        return Array.from(extractProjectionParentViewSet(cdRef, tNode));
    }
    /**
     * A side effect operator similar to `tap` but with a static logic
     *
     *
     *
     * @param cdRef
     * @param tNode
     * @param strategy$
     */
    function renderProjectionParents(cdRef, tNode, strategy$) {
        return function (o$) { return o$.pipe(operators.withLatestFrom(strategy$), operators.switchMap(function (_a) {
            var e_1, _b;
            var _c = __read(_a, 2), _ = _c[0], strategy = _c[1];
            var parentElements = extractProjectionParentViewSet(cdRef, tNode);
            var behaviors = [];
            var _loop_1 = function (el) {
                behaviors.push(renderStrategies.onStrategy(el, strategy, function (value, work, options) {
                    core.ɵdetectChanges(el);
                }, { scope: el }));
            };
            try {
                for (var _d = __values(parentElements.values()), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var el = _e.value;
                    _loop_1(el);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
            behaviors.push(renderStrategies.onStrategy(null, strategy, function (value, work, options) { return work(cdRef, options.scope); }, { scope: cdRef.context || cdRef }));
            return rxjs.merge.apply(void 0, __spreadArray([], __read(behaviors)));
        })); };
    }
    /**
     * @internal
     * creates an embeddedViewRef
     *
     * @param viewContainerRef
     * @param templateRef
     * @param context
     * @param index
     * @return EmbeddedViewRef<C>
     */
    function createEmbeddedView(viewContainerRef, templateRef, context, index) {
        if (index === void 0) { index = 0; }
        var view = viewContainerRef.createEmbeddedView(templateRef, context, index);
        view.detectChanges();
        return view;
    }
    /**
     * @internal
     *
     * A factory function returning an object to handle `TemplateRef`'s.
     * You can add and get a `TemplateRef`.
     *
     */
    function templateHandling(viewContainerRef) {
        var templateCache = new Map();
        var get = function (name) {
            return templateCache.get(name);
        };
        return {
            add: function (name, templateRef) {
                assertTemplate(name, templateRef);
                if (!templateCache.has(name)) {
                    templateCache.set(name, templateRef);
                }
                else {
                    throw new Error('Updating an already existing Template is not supported at the moment.');
                }
            },
            get: get,
            createEmbeddedView: function (name, context) { return createEmbeddedView(viewContainerRef, get(name), context); },
        };
        //
        function assertTemplate(property, templateRef) {
            var isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);
            if (!isTemplateRefOrNull) {
                throw new Error(property + " must be a TemplateRef, but received something else.");
            }
            return isTemplateRefOrNull;
        }
    }
    /**
     * @internal
     *
     * A side effect operator similar to `tap` but with a static internal logic.
     * It calls detect changes on the 'VirtualParent' and the injectingViewCdRef.
     *
     * @param tNode
     * @param injectingViewCdRef
     * @param strategy
     * @param notifyNeeded
     */
    function notifyAllParentsIfNeeded(tNode, injectingViewCdRef, strategy, notifyNeeded) {
        return function (o$) { return o$.pipe(operators.delay(0, zoneLess.asyncScheduler), operators.switchMap(function (v) {
            var notifyParent = notifyNeeded();
            if (!notifyParent) {
                return rxjs.of(v);
            }
            var behaviors = tNode
                ? getVirtualParentNotifications$(tNode, injectingViewCdRef, strategy)
                : [];
            // @TODO remove this CD on injectingViewCdRef if possible
            behaviors.push(renderStrategies.onStrategy(injectingViewCdRef, strategy, function (_v, work, options) { return work(injectingViewCdRef, options.scope); }, {
                scope: injectingViewCdRef.context || injectingViewCdRef,
            }));
            if (behaviors.length === 1) {
                return rxjs.of(v);
            }
            return rxjs.concat(rxjs.of(v), rxjs.combineLatest(behaviors).pipe(operators.ignoreElements()));
        })); };
    }
    /**
     * @internal
     *
     * returns an Observable executing a side effects for change detection of parents
     *
     * @param injectingViewCdRef
     * @param strategy
     * @param notify
     */
    function notifyInjectingParentIfNeeded(injectingViewCdRef, strategy, notify) {
        return rxjs.concat(rxjs.of(null), notify
            ? renderStrategies.onStrategy(injectingViewCdRef, strategy, function (value, work, options) {
                // console.log('notify injectingView', injectingViewCdRef);
                work(injectingViewCdRef, options.scope);
            }, {}).pipe(operators.ignoreElements())
            : []);
    }
    /**
     * @internal
     *
     * Returns an array of observables triggering `detectChanges` on the __virtual parent__  (parent of the projected view)
     *
     * @param tNode - is a component that was projected into another component (virtual parent)
     * @param injectingViewCdRef - is needed to get the
     * @param strategy - the strategy to run the change detection
     */
    function getVirtualParentNotifications$(tNode, injectingViewCdRef, strategy) {
        var e_2, _a;
        var parentElements = extractProjectionParentViewSet(injectingViewCdRef, tNode);
        var behaviors = [];
        var _loop_2 = function (parentComponent) {
            behaviors.push(renderStrategies.onStrategy(parentComponent, strategy, 
            // Here we CD the parent to update their projected views scenarios
            function (value, work, options) {
                // console.log('parentComponent', parentComponent);
                core.ɵdetectChanges(parentComponent);
            }, { scope: parentComponent }));
        };
        try {
            for (var _b = __values(parentElements.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var parentComponent = _c.value;
                _loop_2(parentComponent);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return behaviors;
    }

    exports.RxBaseTemplateNames = void 0;
    (function (RxBaseTemplateNames) {
        RxBaseTemplateNames["error"] = "errorTpl";
        RxBaseTemplateNames["complete"] = "completeTpl";
        RxBaseTemplateNames["suspense"] = "suspenseTpl";
    })(exports.RxBaseTemplateNames || (exports.RxBaseTemplateNames = {}));

    /** @internal **/
    function isRxRenderError(e) {
        return (e != null && Array.isArray(e) && e.length === 2 && e[0] instanceof Error);
    }
    /** @internal **/
    function createErrorHandler(_handler) {
        var _handleError = _handler
            ? function (e) { return _handler.handleError(e); }
            : console.error;
        return {
            handleError: function (error) {
                if (isRxRenderError(error)) {
                    _handleError(error[0]);
                    console.error('additionalErrorContext', error[1]);
                }
                else {
                    _handleError(error);
                }
            },
        };
    }
    /** @internal **/
    function toRenderError(e, context) {
        return [e, context];
    }

    /**
     * @internal
     *
     * A factory function that returns a map of projections to turn a notification of a Observable (next, error, complete)
     *
     * @param customNextContext - projection function to provide custom properties as well as override existing
     */
    function notificationKindToViewContext(customNextContext) {
        // @TODO rethink overrides
        return {
            suspense: function (notification) {
                var $implicit = notification.value;
                return Object.assign({ $implicit: $implicit, $suspense: true, $error: false, $complete: false }, customNextContext($implicit));
            },
            next: function (notification) {
                var $implicit = notification.value;
                return Object.assign({ $implicit: $implicit, $suspense: false, $error: false, $complete: false }, customNextContext($implicit));
            },
            error: function (notification) {
                var $implicit = notification.value;
                return Object.assign({ $implicit: $implicit, $complete: false, $error: notification.error, $suspense: false }, customNextContext($implicit));
            },
            complete: function (notification) {
                var $implicit = notification.value;
                return Object.assign({ $implicit: $implicit, $error: false, $complete: true, $suspense: false }, customNextContext($implicit));
            },
        };
    }
    function createTemplateManager(config) {
        var renderSettings = config.renderSettings, notificationToTemplateName = config.notificationToTemplateName, templateSettings = config.templateSettings;
        var defaultStrategyName = renderSettings.defaultStrategyName, strategies = renderSettings.strategies, injectingViewCdRef = renderSettings.cdRef, patchZone = renderSettings.patchZone, parent = renderSettings.parent, eRef = renderSettings.eRef;
        var errorHandler = createErrorHandler(renderSettings.errorHandler);
        var tNode = parent
            ? getTNode(injectingViewCdRef, eRef.nativeElement)
            : false;
        var activeTemplate;
        var strategyHandling$ = renderStrategies.strategyHandling(defaultStrategyName, strategies);
        var templates = templateHandling(templateSettings.viewContainerRef);
        var viewContainerRef = templateSettings.viewContainerRef;
        var triggerHandling = config.templateTrigger$ || rxjs.EMPTY;
        var getContext = notificationKindToViewContext(templateSettings.customContext || (function (v) { }));
        var workFactory = patchZone
            ? function (work) { return patchZone.run(work); }
            : function (work) { return work(); };
        return {
            addTemplateRef: templates.add,
            // addTrigger: triggerHandling.next,
            nextStrategy: strategyHandling$.next,
            render: function (values$) {
                return values$.pipe(
                /* tslint:disable */
                // mergeWith(triggerHandling.trigger$ || EMPTY),
                /* tslint:enable */
                operators.withLatestFrom(strategyHandling$.strategy$), 
                // Cancel old renders
                operators.switchMap(function (_a) {
                    var _b = __read(_a, 2), notification = _b[0], strategy = _b[1];
                    var kind = notification.kind;
                    var value = notification.value;
                    var templateName = notificationToTemplateName[kind](value, templates);
                    var template = templates.get(templateName);
                    var isNewTemplate = activeTemplate !== templateName;
                    var notifyParent = isNewTemplate && parent;
                    return rxjs.merge(renderStrategies.onStrategy(value, strategy, function (v, work, options) {
                        var context = getContext[kind](notification);
                        if (isNewTemplate) {
                            // template has changed (undefined => next; suspense => next; ...)
                            // handle remove & insert
                            // remove current view if there is any
                            if (viewContainerRef.length > 0) {
                                // patch removal if needed
                                workFactory(function () { return viewContainerRef.clear(); });
                            }
                            // create new view if any
                            if (template) {
                                // createEmbeddedView is already patched, no need for workFactory
                                workFactory(function () { return templates.createEmbeddedView(templateName, context); });
                            }
                        }
                        else if (template) {
                            // template didn't change, update it
                            // handle update
                            var view_1 = viewContainerRef.get(0);
                            Object.keys(context).forEach(function (k) {
                                view_1.context[k] = context[k];
                            });
                            // update view context, patch if needed
                            workFactory(function () { return work(view_1, options.scope, notification); });
                        }
                        activeTemplate = templateName;
                    }
                    // we don't need to specify any scope here. The template manager is the only one
                    // who will call `viewRef#detectChanges` on any of the templates it manages.
                    // whenever a new value comes in, any pre-scheduled work of this taskManager will
                    // be nooped before a new work will be scheduled. This happens because of the implementation
                    // of `StrategyCredential#behavior`
                    ).pipe(notifyAllParentsIfNeeded(tNode, injectingViewCdRef, strategy, function () { return notifyParent; })), notifyInjectingParentIfNeeded(injectingViewCdRef, strategy, isNewTemplate).pipe(operators.ignoreElements())).pipe(operators.catchError(function (e) {
                        errorHandler.handleError(e);
                        return rxjs.of(e);
                    }));
                }));
            },
        };
    }

    /**
     * @internal
     *
     * Factory that returns a `ListTemplateManager` for the passed params.
     *
     * @param templateSettings
     */
    function getTemplateHandler(templateSettings) {
        var viewContainerRef = templateSettings.viewContainerRef, initialTemplateRef = templateSettings.initialTemplateRef, createViewContext = templateSettings.createViewContext, updateViewContext = templateSettings.updateViewContext, patchZone = templateSettings.patchZone;
        var workFactory = patchZone
            ? function (work) { return patchZone.run(work); }
            : function (work) { return work(); };
        return {
            updateUnchangedContext: updateUnchangedContext,
            insertView: insertView,
            moveView: moveView,
            removeView: removeView,
            getListChanges: getListChanges,
            updateView: updateView,
        };
        // =====
        function updateUnchangedContext(index, count) {
            var view = viewContainerRef.get(index);
            workFactory(function () {
                view.context.updateContext({
                    count: count,
                    index: index,
                });
                view.detectChanges();
            });
        }
        function moveView(oldIndex, item, index, count) {
            var oldView = viewContainerRef.get(oldIndex);
            var view = viewContainerRef.move(oldView, index);
            workFactory(function () {
                updateViewContext(item, view, {
                    count: count,
                    index: index,
                });
                view.detectChanges();
            });
        }
        function updateView(item, index, count) {
            var view = viewContainerRef.get(index);
            workFactory(function () {
                updateViewContext(item, view, {
                    count: count,
                    index: index,
                });
                view.detectChanges();
            });
        }
        function removeView(index) {
            return workFactory(function () { return viewContainerRef.remove(index); });
        }
        function insertView(item, index, count) {
            workFactory(function () {
                createEmbeddedView(viewContainerRef, initialTemplateRef, createViewContext(item, {
                    count: count,
                    index: index,
                }), index);
            });
        }
    }
    /**
     * @internal
     *
     * @param changes
     * @param items
     */
    function getListChanges(changes, items) {
        var changedIdxs = new Set();
        var changesArr = [];
        var notifyParent = false;
        changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {
            var item = record.item;
            if (record.previousIndex == null) {
                // insert
                changesArr.push(getInsertChange(item, currentIndex === null ? undefined : currentIndex));
                changedIdxs.add(item);
                notifyParent = true;
            }
            else if (currentIndex == null) {
                // remove
                changesArr.push(getRemoveChange(item, adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex));
                changedIdxs.add(item);
                notifyParent = true;
            }
            else if (adjustedPreviousIndex !== null) {
                // move
                changesArr.push(getMoveChange(item, currentIndex, adjustedPreviousIndex));
                changedIdxs.add(item);
                notifyParent = true;
            }
        });
        changes.forEachIdentityChange(function (record) {
            var item = record.item;
            if (!changedIdxs.has(item)) {
                changesArr.push(getUpdateChange(item, record.currentIndex));
                changedIdxs.add(item);
            }
        });
        items.forEach(function (item, index) {
            if (!changedIdxs.has(item)) {
                changesArr.push(getUnchangedChange(item, index));
            }
        });
        return [changesArr, notifyParent];
        // ==========
        function getMoveChange(item, currentIndex, adjustedPreviousIndex) {
            return [
                2 /* move */,
                [item, currentIndex, adjustedPreviousIndex],
            ];
        }
        function getUpdateChange(item, currentIndex) {
            return [3 /* update */, [item, currentIndex]];
        }
        function getUnchangedChange(item, index) {
            return [4 /* context */, [item, index]];
        }
        function getInsertChange(item, currentIndex) {
            return [
                0 /* insert */,
                [item, currentIndex === null ? undefined : currentIndex],
            ];
        }
        function getRemoveChange(item, adjustedPreviousIndex) {
            return [
                1 /* remove */,
                [item, adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex],
            ];
        }
    }

    function createListTemplateManager(config) {
        var templateSettings = config.templateSettings, renderSettings = config.renderSettings, trackBy = config.trackBy, iterableDiffers = config.iterableDiffers;
        var defaultStrategyName = renderSettings.defaultStrategyName, strategies = renderSettings.strategies, injectingViewCdRef = renderSettings.cdRef, patchZone = renderSettings.patchZone, parent = renderSettings.parent, eRef = renderSettings.eRef;
        var errorHandler = createErrorHandler(renderSettings.errorHandler);
        var strategyHandling$ = renderStrategies.strategyHandling(defaultStrategyName, strategies);
        var differ = iterableDiffers.find([]).create(trackBy);
        //               type,  context
        var tNode = parent
            ? getTNode(injectingViewCdRef, eRef.nativeElement)
            : false;
        /* TODO (regarding createView): this is currently not in use. for the list-manager this would mean to provide
         functions for not only create. developers than should have to provide create, move, remove,... the whole thing.
         i don't know if this is the right decision for a first RC */
        var listViewHandler = getTemplateHandler(Object.assign(Object.assign({}, templateSettings), { initialTemplateRef: templateSettings.templateRef, patchZone: patchZone }));
        var viewContainerRef = templateSettings.viewContainerRef;
        var notifyParent = false;
        var changesArr;
        var partiallyFinished = false;
        return {
            nextStrategy: function (nextConfig) {
                strategyHandling$.next(nextConfig);
            },
            render: function (values$) {
                return values$.pipe(render());
            },
        };
        function render() {
            return function (o$) { return rxjs.combineLatest([o$, strategyHandling$.strategy$.pipe(operators.distinctUntilChanged())]).pipe(
            // map iterable to latest diff
            operators.map(function (_a) {
                var _b = __read(_a, 2), iterable = _b[0], strategy = _b[1];
                if (partiallyFinished) {
                    var currentIterable = [];
                    for (var i = 0, ilen = viewContainerRef.length; i < ilen; i++) {
                        var viewRef = viewContainerRef.get(i);
                        currentIterable[i] = viewRef.context.$implicit;
                    }
                    differ.diff(currentIterable);
                }
                return {
                    changes: differ.diff(iterable),
                    items: iterable != null && Array.isArray(iterable) ? iterable : [],
                    strategy: strategy
                };
            }), 
            // Cancel old renders
            operators.switchMap(function (_a) {
                var changes = _a.changes, items = _a.items, strategy = _a.strategy;
                if (!changes) {
                    return rxjs.of([]);
                }
                var listChanges = listViewHandler.getListChanges(changes, items);
                changesArr = listChanges[0];
                var insertedOrRemoved = listChanges[1];
                var applyChanges$ = getObservablesFromChangesArray(changesArr, strategy, items.length);
                partiallyFinished = true;
                // @TODO we need to know if we need to notifyParent on move aswell
                notifyParent = insertedOrRemoved && parent;
                return new rxjs.Observable(function (subscriber) {
                    var s = rxjs.merge(rxjs.combineLatest(
                    // emit after all changes are rendered
                    applyChanges$.length > 0 ? applyChanges$ : [rxjs.of(items)]).pipe(operators.tap(function () { return (partiallyFinished = false); }), 
                    // somehow this makes the strategySelect work
                    notifyAllParentsIfNeeded(tNode, injectingViewCdRef, strategy, function () { return notifyParent; })), 
                    // emit injectingParent if needed
                    notifyInjectingParentIfNeeded(injectingViewCdRef, strategy, insertedOrRemoved).pipe(operators.ignoreElements())).pipe(operators.map(function () { return items; }), operators.catchError(function (e) {
                        partiallyFinished = false;
                        errorHandler.handleError(e);
                        return rxjs.of(items);
                    })).subscribe(subscriber);
                    return function () {
                        s.unsubscribe();
                    };
                });
            })); };
        }
        /**
         * @internal
         *
         * returns an array of streams which process all of the view updates needed to reflect the latest diff to the
         * viewContainer.
         * I
         *
         * @param changes
         * @param strategy
         * @param count
         */
        function getObservablesFromChangesArray(changes, strategy, count) {
            return changes.length > 0
                ? changes.map(function (change) {
                    var payload = change[1];
                    return renderStrategies.onStrategy(change[0], strategy, function (type) {
                        switch (type) {
                            case 0 /* insert */:
                                listViewHandler.insertView(payload[0], payload[1], count);
                                break;
                            case 2 /* move */:
                                listViewHandler.moveView(payload[2], payload[0], payload[1], count);
                                break;
                            case 1 /* remove */:
                                listViewHandler.removeView(payload[1]);
                                break;
                            case 3 /* update */:
                                listViewHandler.updateView(payload[0], payload[1], count);
                                break;
                            case 4 /* context */:
                                listViewHandler.updateUnchangedContext(payload[1], count);
                                break;
                        }
                    }, {});
                })
                : [rxjs.of(null)];
        }
    }

    var computeFirst = function (_a) {
        var count = _a.count, index = _a.index;
        return index === 0;
    };
    var ɵ0 = computeFirst;
    var computeLast = function (_a) {
        var count = _a.count, index = _a.index;
        return index === count - 1;
    };
    var ɵ1 = computeLast;
    var computeEven = function (_a) {
        var count = _a.count, index = _a.index;
        return index % 2 === 0;
    };
    var ɵ2 = computeEven;
    var RxDefaultListViewContext = /** @class */ (function () {
        function RxDefaultListViewContext(item, customProps) {
            var _this = this;
            this.item = item;
            this._item = new rxjs.ReplaySubject(1);
            this.item$ = this._item.asObservable();
            this._context$ = new rxjs.BehaviorSubject({
                index: -1,
                count: -1,
            });
            this.select = function (props) {
                return _this.item$.pipe(operators.pluck.apply(void 0, __spreadArray([], __read(props))));
            };
            // tslint:disable-next-line:no-unused-expression
            this.$implicit = item;
            if (customProps) {
                this.updateContext(customProps);
            }
        }
        Object.defineProperty(RxDefaultListViewContext.prototype, "$implicit", {
            get: function () {
                return this._$implicit;
            },
            set: function ($implicit) {
                this._$implicit = $implicit;
                this._item.next($implicit);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "$complete", {
            get: function () {
                return this._$complete;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "$error", {
            get: function () {
                return this._$error;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "$suspense", {
            get: function () {
                return this._$suspense;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "index", {
            get: function () {
                return this._context$.getValue().index;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "count", {
            get: function () {
                return this._context$.getValue().count;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "first", {
            get: function () {
                return computeFirst(this._context$.getValue());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "last", {
            get: function () {
                return computeLast(this._context$.getValue());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "even", {
            get: function () {
                return computeEven(this._context$.getValue());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "odd", {
            get: function () {
                return !this.even;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "index$", {
            get: function () {
                return this._context$.pipe(operators.pluck('index'), operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "count$", {
            get: function () {
                return this._context$.pipe(operators.pluck('count'), operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "first$", {
            get: function () {
                return this._context$.pipe(operators.map(computeFirst), operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "last$", {
            get: function () {
                return this._context$.pipe(operators.map(computeLast), operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "even$", {
            get: function () {
                return this._context$.pipe(operators.map(computeEven), operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxDefaultListViewContext.prototype, "odd$", {
            get: function () {
                return this.even$.pipe(operators.map(function (even) { return !even; }));
            },
            enumerable: false,
            configurable: true
        });
        RxDefaultListViewContext.prototype.updateContext = function (newProps) {
            this._context$.next(Object.assign(Object.assign({}, this._context$.getValue()), newProps));
        };
        return RxDefaultListViewContext;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.RxDefaultListViewContext = RxDefaultListViewContext;
    exports.createListTemplateManager = createListTemplateManager;
    exports.createTemplateManager = createTemplateManager;
    exports.templateHandling = templateHandling;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cdk-template.umd.js.map
