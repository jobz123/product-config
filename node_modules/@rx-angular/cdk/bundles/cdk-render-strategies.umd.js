(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@rx-angular/cdk/internals/scheduler'), require('@rx-angular/cdk/coalescing'), require('@rx-angular/cdk/zone-less'), require('@rx-angular/cdk/coercing')) :
    typeof define === 'function' && define.amd ? define('@rx-angular/cdk/render-strategies', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@rx-angular/cdk/internals/scheduler', '@rx-angular/cdk/coalescing', '@rx-angular/cdk/zone-less', '@rx-angular/cdk/coercing'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['rx-angular'] = global['rx-angular'] || {}, global['rx-angular']['cdk-render-strategies'] = {}), global.ng.core, global.rxjs, global.rxjs.operators, global['rx-angular']['cdk-internals-scheduler'], global['rx-angular'].cdk.coalescing, global['rx-angular']['cdk-zone-less'], global['rx-angular']['cdk-coercing']));
}(this, (function (exports, i0, rxjs, operators, scheduler, coalescing, zoneLess, coercing) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    scheduler.forceFrameRate(60);
    var ɵ0$1 = function (cdRef) { return cdRef.detectChanges(); }, ɵ1$1 = function (work, scope) {
        return function (o$) { return o$.pipe(scheduleOnQueue(work, { priority: 0 /* NoPriority */, scope: scope })); };
    };
    var noPriorityStrategy = {
        name: 'noPriority',
        work: ɵ0$1,
        behavior: ɵ1$1,
    };
    var ɵ2$1 = function (cdRef) { return cdRef.detectChanges(); }, ɵ3$1 = function (work, scope) {
        return function (o$) { return o$.pipe(scheduleOnQueue(work, {
            priority: 1 /* ImmediatePriority */,
            scope: scope,
        })); };
    };
    var immediateStrategy = {
        name: 'immediate',
        work: ɵ2$1,
        behavior: ɵ3$1,
    };
    var ɵ4$1 = function (cdRef) { return cdRef.detectChanges(); }, ɵ5$1 = function (work, scope) {
        return function (o$) { return o$.pipe(scheduleOnQueue(work, {
            priority: 2 /* UserBlockingPriority */,
            scope: scope,
        })); };
    };
    var userBlockingStrategy = {
        name: 'userBlocking',
        work: ɵ4$1,
        behavior: ɵ5$1,
    };
    var ɵ6$1 = function (cdRef) { return cdRef.detectChanges(); }, ɵ7$1 = function (work, scope) {
        return function (o$) { return o$.pipe(scheduleOnQueue(work, { priority: 3 /* NormalPriority */, scope: scope })); };
    };
    var normalStrategy = {
        name: 'normal',
        work: ɵ6$1,
        behavior: ɵ7$1,
    };
    var ɵ8$1 = function (cdRef) { return cdRef.detectChanges(); }, ɵ9 = function (work, scope) {
        return function (o$) { return o$.pipe(scheduleOnQueue(work, { priority: 4 /* LowPriority */, scope: scope })); };
    };
    var lowStrategy = {
        name: 'low',
        work: ɵ8$1,
        behavior: ɵ9,
    };
    var ɵ10 = function (cdRef) { return cdRef.detectChanges(); }, ɵ11 = function (work, scope) {
        return function (o$) { return o$.pipe(scheduleOnQueue(work, { priority: 5 /* IdlePriority */, scope: scope })); };
    };
    var idleStrategy = {
        name: 'idle',
        work: ɵ10,
        behavior: ɵ11,
    };
    function scheduleOnQueue(work, options) {
        return function (o$) { return o$.pipe(operators.filter(function () { return !coalescing.coalescingManager.isCoalescing(options.scope); }), operators.switchMap(function (v) { return new rxjs.Observable(function (subscriber) {
            coalescing.coalescingManager.add(options.scope);
            var task = scheduler.scheduleCallback(options.priority, function () {
                work();
                coalescing.coalescingManager.remove(options.scope);
                subscriber.next(v);
            }, { delay: options.delay });
            return function () {
                coalescing.coalescingManager.remove(options.scope);
                scheduler.cancelCallback(task);
            };
        }).pipe(operators.mapTo(v)); })); };
    }
    var RX_CONCURRENT_STRATEGIES = {
        noPriority: noPriorityStrategy,
        immediate: immediateStrategy,
        userBlocking: userBlockingStrategy,
        normal: normalStrategy,
        low: lowStrategy,
        idle: idleStrategy,
    };

    var animationFrameTick = function () { return new rxjs.Observable(function (subscriber) {
        var id = zoneLess.requestAnimationFrame(function () {
            subscriber.next(0);
            subscriber.complete();
        });
        return function () {
            zoneLess.cancelAnimationFrame(id);
        };
    }); };
    var ɵ0 = animationFrameTick;
    var ɵ1 = function (cdRef, _, notification) {
        cdRef.detectChanges();
    }, ɵ2 = function (work, scope) { return function (o$) { return o$.pipe(coalescing.coalesceWith(animationFrameTick(), scope), operators.tap(function () { return work(); })); }; };
    var localCredentials = {
        name: 'local',
        work: ɵ1,
        behavior: ɵ2,
    };
    var ɵ3 = function (_, context) { return i0.ɵmarkDirty(context); }, ɵ4 = function (work) { return function (o$) { return o$.pipe(operators.tap(function () { return work(); })); }; };
    var globalCredentials = {
        name: 'global',
        work: ɵ3,
        behavior: ɵ4,
    };
    var ɵ5 = function () { return void 0; }, ɵ6 = function () { return function (o$) { return o$; }; };
    var noopCredentials = {
        name: 'noop',
        work: ɵ5,
        behavior: ɵ6,
    };
    var ɵ7 = function (cdRef) { return cdRef.markForCheck(); }, ɵ8 = function (work) { return function (o$) { return o$.pipe(operators.tap(function () { return work(); })); }; };
    var nativeCredentials = {
        name: 'native',
        work: ɵ7,
        behavior: ɵ8,
    };
    var RX_NATIVE_STRATEGIES = {
        global: globalCredentials,
        native: nativeCredentials,
        noop: noopCredentials,
        local: localCredentials,
    };

    var RX_ANGULAR_CONFIG = new i0.InjectionToken('rx-angular-config');
    var RX_ANGULAR_DEFAULTS = {
        primaryStrategy: 'normal',
        customStrategies: Object.assign(Object.assign({}, RX_NATIVE_STRATEGIES), RX_CONCURRENT_STRATEGIES),
        patchZone: true
    };
    function mergeDefaultConfig(cfg) {
        var custom = cfg
            ? cfg
            : {
                customStrategies: {}
            };
        return Object.assign(Object.assign(Object.assign({}, RX_ANGULAR_DEFAULTS), custom), { customStrategies: Object.assign(Object.assign({}, custom.customStrategies), RX_ANGULAR_DEFAULTS.customStrategies) });
    }

    /**
     * @internal
     *
     * @param value
     * @param strategy
     * @param workFactory
     * @param options
     */
    function onStrategy(value, strategy, workFactory, options) {
        if (options === void 0) { options = {}; }
        var error;
        return new rxjs.Observable(function (subscriber) {
            subscriber.next(value);
        }).pipe(strategy.behavior(function () {
            try {
                workFactory(value, strategy.work, options);
            }
            catch (e) {
                error = e;
            }
        }, options.scope || {}), operators.switchMap(function () { return error ? rxjs.throwError([error, value]) : rxjs.of(value); }), operators.take(1));
    }

    /**
     * @description
     * RxStrategyProvider is a wrapper service that you can use to consume strategies and schedule your code execution.
     *
     * @example
     * Component({
     *   selector: 'app-service-communicator',
     *   template: ``
     * });
     * export class ServiceCommunicationComponent {
     *   private currentUserSettings;
     *
     *   constructor(
     *     private strategyProvider: RxStrategyProvider,
     *     private userService: UserService,
     *     private backgroundSync: BackgroundSyncService
     *   ) {
     *     this.userService.fetchCurrentUserSettings
     *       .pipe(
     *         tap(settings => (this.currentUserSettings = settings)),
     *         this.strategyProvider.scheduleWith(
     *           settings => this.backgroundSync.openConnection(settings),
     *           { strategy: 'idle' }
     *         )
     *       )
     *       .subscribe();
     *   }
     * }
     *
     * @docsCategory RxStrategyProvider
     * @docsPage RxStrategyProvider
     */
    var RxStrategyProvider = /** @class */ (function () {
        /**
         * @internal
         */
        function RxStrategyProvider(cfg) {
            this._strategies$ = new rxjs.BehaviorSubject(undefined);
            this._primaryStrategy$ = new rxjs.BehaviorSubject(undefined);
            /**
             * @description
             * Current strategy of the service as an observable.
             */
            this.primaryStrategy$ = this._primaryStrategy$.asObservable();
            /**
             * @description
             * Returns observable of an object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.
             */
            this.strategies$ = this._strategies$.asObservable();
            /**
             * @description
             * Returns an observable of an array of strategy names available in the service.
             */
            this.strategyNames$ = this.strategies$.pipe(operators.map(function (strategies) { return Object.values(strategies).map(function (s) { return s.name; }); }), operators.shareReplay({ bufferSize: 1, refCount: true }));
            this._cfg = mergeDefaultConfig(cfg);
            this._strategies$.next(this._cfg.customStrategies);
            this.primaryStrategy = this.config.primaryStrategy;
        }
        Object.defineProperty(RxStrategyProvider.prototype, "config", {
            /**
             * @description
             * Returns current `RxAngularConfig` used in the service.
             * Config includes:
             * - strategy that currently in use - `primaryStrategy`
             * - array of custom user defined strategies - `customStrategies`
             * - setting that is responsible for running in our outside of the zone.js - `patchZone`
             */
            get: function () {
                return this._cfg;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxStrategyProvider.prototype, "strategies", {
            /**
             * @description
             * Returns object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.
             */
            get: function () {
                return this._strategies$.getValue();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxStrategyProvider.prototype, "strategyNames", {
            /**
             * @description
             * Returns an array of strategy names available in the service.
             */
            get: function () {
                return Object.values(this.strategies).map(function (s) { return s.name; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RxStrategyProvider.prototype, "primaryStrategy", {
            /**
             * @description
             * Returns current strategy of the service.
             */
            get: function () {
                return this._primaryStrategy$.getValue().name;
            },
            /**
             * @description
             * Set's the strategy that will be used by the service.
             */
            set: function (strategyName) {
                this._primaryStrategy$.next(this.strategies[strategyName]);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @description
         * Allows to schedule a work inside rxjs `pipe`. Accepts the work and configuration options object.
         * - work is any function that should be executed
         * - (optional) options includes strategy, patchZone and scope
         *
         * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.
         * Scope setup is useful if your work is some of the methods of `ChangeDetectorRef`. Only one change detection will be triggered if you have multiple schedules of change detection methods and scope is set to `this`.
         *
         * @example
         * myObservable$.pipe(
         *    this.strategyProvider.scheduleWith(() => myWork(), {strategy: 'idle', patchZone: false})
         * ).subscribe();
         *
         * @return MonoTypeOperatorFunction<R>
         */
        RxStrategyProvider.prototype.scheduleWith = function (work, options) {
            var strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];
            var scope = (options === null || options === void 0 ? void 0 : options.scope) || {};
            var _work = getWork(work, options === null || options === void 0 ? void 0 : options.patchZone);
            return function (o$) { return o$.pipe(operators.switchMap(function (v) { return onStrategy(v, strategy, function (_v) {
                _work(_v);
            }, { scope: scope }); })); };
        };
        /**
         * @description
         * Allows to schedule a work as an observable. Accepts the work and configuration options object.
         * - work is any function that should be executed
         * - (optional) options includes strategy, patchZone and scope
         *
         * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.
         * Scope setup is especially useful if you provide work that will trigger a change detection.
         *
         * @example
         * this.strategyProvider.schedule(() => myWork(), {strategy: 'idle', patchZone: false}).subscribe();
         *
         * @return Observable<R>
         */
        RxStrategyProvider.prototype.schedule = function (work, options) {
            var strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];
            var scope = (options === null || options === void 0 ? void 0 : options.scope) || {};
            var _work = getWork(work, options === null || options === void 0 ? void 0 : options.patchZone);
            var returnVal;
            return onStrategy(null, strategy, function () {
                returnVal = _work();
            }, { scope: scope }).pipe(operators.map(function () { return returnVal; }));
        };
        /**
         * @description
         * Allows to schedule a change detection cycle. Accepts the ChangeDetectorRef and configuration options object.
         * Options include:
         * - afterCD which is the work that should be executed after change detection cycle.
         * - abortCtrl is an AbortController that you can use to cancel the scheduled cycle.
         *
         * @example
         * this.strategyProvider.scheduleCd(this.changeDetectorRef, {afterCD: myWork()});
         *
         * @return AbortController
         */
        RxStrategyProvider.prototype.scheduleCD = function (cdRef, options) {
            var strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];
            var scope = (options === null || options === void 0 ? void 0 : options.scope) || cdRef;
            var abC = (options === null || options === void 0 ? void 0 : options.abortCtrl) || new AbortController();
            var work = getWork(function () {
                strategy.work(cdRef, scope);
                if (options === null || options === void 0 ? void 0 : options.afterCD) {
                    options.afterCD();
                }
            }, options.patchZone);
            onStrategy(null, strategy, function () {
                work();
            }, { scope: scope })
                .pipe(operators.takeUntil(rxjs.fromEvent(abC.signal, 'abort')))
                .subscribe();
            return abC;
        };
        return RxStrategyProvider;
    }());
    /** @nocollapse */ RxStrategyProvider.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RxStrategyProvider_Factory() { return new RxStrategyProvider(i0__namespace.ɵɵinject(RX_ANGULAR_CONFIG, 8)); }, token: RxStrategyProvider, providedIn: "root" });
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    RxStrategyProvider.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    /**
     * @type {function(): !Array<(null|{
     *   type: ?,
     *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),
     * })>}
     * @nocollapse
     */
    RxStrategyProvider.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [RX_ANGULAR_CONFIG,] }] }
    ]; };
    function getWork(work, patchZone) {
        var _work = work;
        if (patchZone) {
            _work = function (args) { return patchZone.run(function () { return work(args); }); };
        }
        return _work;
    }

    /**
     * @internal
     *
     * A factory function returning an object to handle the process of turning strategy names into `RxStrategyCredentials`
     * You can next a strategy name as Observable or string and get an Observable of `RxStrategyCredentials`
     *
     * @param defaultStrategyName
     * @param strategies
     */
    function strategyHandling(defaultStrategyName, strategies) {
        var hotFlattened = coercing.coerceAllFactory(function () { return new rxjs.ReplaySubject(1); }, operators.switchAll());
        return {
            strategy$: hotFlattened.values$.pipe(operators.startWith(defaultStrategyName), nameToStrategyCredentials(strategies, defaultStrategyName), operators.share()),
            next: function (name) {
                hotFlattened.next(name);
            },
        };
    }
    /**
     * @internal
     */
    function nameToStrategyCredentials(strategies, defaultStrategyName) {
        return function (o$) { return o$.pipe(operators.map(function (name) { return name && Object.keys(strategies).includes(name)
            ? strategies[name]
            : strategies[defaultStrategyName]; })); };
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.RX_ANGULAR_CONFIG = RX_ANGULAR_CONFIG;
    exports.RX_CONCURRENT_STRATEGIES = RX_CONCURRENT_STRATEGIES;
    exports.RX_NATIVE_STRATEGIES = RX_NATIVE_STRATEGIES;
    exports.RxStrategyProvider = RxStrategyProvider;
    exports.onStrategy = onStrategy;
    exports.strategyHandling = strategyHandling;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cdk-render-strategies.umd.js.map
