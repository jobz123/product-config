{"version":3,"file":"cdk-render-strategies.umd.js","sources":["../../../../libs/cdk/render-strategies/src/lib/concurrent-strategies.ts","../../../../libs/cdk/render-strategies/src/lib/native-strategies.ts","../../../../libs/cdk/render-strategies/src/lib/config.ts","../../../../libs/cdk/render-strategies/src/lib/onStrategy.ts","../../../../libs/cdk/render-strategies/src/lib/strategy-provider.service.ts","../../../../libs/cdk/render-strategies/src/lib/strategy-handling.ts","../../../../libs/cdk/render-strategies/src/cdk-render-strategies.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, Observable } from 'rxjs';\r\nimport { filter, mapTo, switchMap } from 'rxjs/operators';\r\nimport {\r\n  cancelCallback,\r\n  scheduleCallback,\r\n  forceFrameRate,\r\n  PriorityLevel,\r\n} from '@rx-angular/cdk/internals/scheduler';\r\n\r\nimport {\r\n  RxCustomStrategyCredentials,\r\n  RxConcurrentStrategyNames,\r\n  RxStrategyCredentials,\r\n} from './model';\r\nimport { coalescingManager } from '@rx-angular/cdk/coalescing';\r\n\r\nforceFrameRate(60);\r\n\r\nconst noPriorityStrategy: RxStrategyCredentials = {\r\n  name: 'noPriority',\r\n  work: (cdRef) => cdRef.detectChanges(),\r\n  behavior: (work: any, scope: any) => {\r\n    return (o$) =>\r\n      o$.pipe(\r\n        scheduleOnQueue(work, { priority: PriorityLevel.NoPriority, scope })\r\n      );\r\n  },\r\n};\r\n\r\nconst immediateStrategy: RxStrategyCredentials = {\r\n  name: 'immediate',\r\n  work: (cdRef) => cdRef.detectChanges(),\r\n  behavior: (work: any, scope: any) => {\r\n    return (o$) =>\r\n      o$.pipe(\r\n        scheduleOnQueue(work, {\r\n          priority: PriorityLevel.ImmediatePriority,\r\n          scope,\r\n        })\r\n      );\r\n  },\r\n};\r\n\r\nconst userBlockingStrategy: RxStrategyCredentials = {\r\n  name: 'userBlocking',\r\n  work: (cdRef) => cdRef.detectChanges(),\r\n  behavior: (work: any, scope: any) => {\r\n    return (o$) =>\r\n      o$.pipe(\r\n        scheduleOnQueue(work, {\r\n          priority: PriorityLevel.UserBlockingPriority,\r\n          scope,\r\n        })\r\n      );\r\n  },\r\n};\r\n\r\nconst normalStrategy: RxStrategyCredentials = {\r\n  name: 'normal',\r\n  work: (cdRef) => cdRef.detectChanges(),\r\n  behavior: (work: any, scope: any) => {\r\n    return (o$) =>\r\n      o$.pipe(\r\n        scheduleOnQueue(work, { priority: PriorityLevel.NormalPriority, scope })\r\n      );\r\n  },\r\n};\r\n\r\nconst lowStrategy: RxStrategyCredentials = {\r\n  name: 'low',\r\n  work: (cdRef) => cdRef.detectChanges(),\r\n  behavior: (work: any, scope: any) => {\r\n    return (o$) =>\r\n      o$.pipe(\r\n        scheduleOnQueue(work, { priority: PriorityLevel.LowPriority, scope })\r\n      );\r\n  },\r\n};\r\n\r\nconst idleStrategy: RxStrategyCredentials = {\r\n  name: 'idle',\r\n  work: (cdRef) => cdRef.detectChanges(),\r\n  behavior: (work: any, scope: any) => {\r\n    return (o$) =>\r\n      o$.pipe(\r\n        scheduleOnQueue(work, { priority: PriorityLevel.IdlePriority, scope })\r\n      );\r\n  },\r\n};\r\n\r\nfunction scheduleOnQueue<T>(\r\n  work: (...args: any[]) => void,\r\n  options: {\r\n    priority: PriorityLevel;\r\n    scope: Record<string, unknown>;\r\n    delay?: number;\r\n  }\r\n): MonoTypeOperatorFunction<T> {\r\n  return (o$: Observable<T>): Observable<T> =>\r\n    o$.pipe(\r\n      filter(() => !coalescingManager.isCoalescing(options.scope)),\r\n      switchMap((v) =>\r\n        new Observable<T>((subscriber) => {\r\n          coalescingManager.add(options.scope);\r\n          const task = scheduleCallback(\r\n            options.priority,\r\n            () => {\r\n              work();\r\n              coalescingManager.remove(options.scope);\r\n              subscriber.next(v);\r\n            },\r\n            { delay: options.delay }\r\n          );\r\n          return () => {\r\n            coalescingManager.remove(options.scope);\r\n            cancelCallback(task);\r\n          };\r\n        }).pipe(mapTo(v))\r\n      )\r\n    );\r\n}\r\n\r\nexport type RxConcurrentStrategies =\r\n  RxCustomStrategyCredentials<RxConcurrentStrategyNames>;\r\nexport const RX_CONCURRENT_STRATEGIES: RxConcurrentStrategies = {\r\n  noPriority: noPriorityStrategy,\r\n  immediate: immediateStrategy,\r\n  userBlocking: userBlockingStrategy,\r\n  normal: normalStrategy,\r\n  low: lowStrategy,\r\n  idle: idleStrategy,\r\n};\r\n","import { ÉµmarkDirty as markDirty } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { coalesceWith } from '@rx-angular/cdk/coalescing';\r\nimport {\r\n  cancelAnimationFrame,\r\n  requestAnimationFrame,\r\n} from '@rx-angular/cdk/zone-less';\r\nimport { RxCustomStrategyCredentials, RxNativeStrategyNames, RxRenderWork, RxStrategyCredentials } from './model';\r\n\r\nconst animationFrameTick = () =>\r\n  new Observable<number>((subscriber) => {\r\n    const id = requestAnimationFrame(() => {\r\n      subscriber.next(0);\r\n      subscriber.complete();\r\n    });\r\n    return () => {\r\n      cancelAnimationFrame(id);\r\n    };\r\n  });\r\n\r\nconst localCredentials: RxStrategyCredentials = {\r\n  name: 'local',\r\n  work: (cdRef, _, notification) => {\r\n    cdRef.detectChanges();\r\n  },\r\n  behavior:\r\n    (work: () => RxRenderWork, scope: Record<string, unknown>) => (o$) =>\r\n      o$.pipe(\r\n        coalesceWith(animationFrameTick(), scope),\r\n        tap(() => work())\r\n      ),\r\n};\r\n\r\nconst globalCredentials: RxStrategyCredentials = {\r\n  name: 'global',\r\n  work: (_, context) => markDirty(context),\r\n  behavior: (work: any) => (o$) => o$.pipe(tap(() => work())),\r\n};\r\n\r\nconst noopCredentials: RxStrategyCredentials = {\r\n  name: 'noop',\r\n  work: () => void 0,\r\n  behavior: () => (o$) => o$,\r\n};\r\n\r\nconst nativeCredentials: RxStrategyCredentials = {\r\n  name: 'native',\r\n  work: (cdRef) => cdRef.markForCheck(),\r\n  behavior: (work: any) => (o$) => o$.pipe(tap(() => work())),\r\n};\r\n\r\nexport type RxNativeStrategies =\r\n  RxCustomStrategyCredentials<RxNativeStrategyNames>;\r\nexport const RX_NATIVE_STRATEGIES: RxNativeStrategies = {\r\n  global: globalCredentials,\r\n  native: nativeCredentials,\r\n  noop: noopCredentials,\r\n  local: localCredentials,\r\n};\r\n","import { InjectionToken } from '@angular/core';\r\nimport { RX_CONCURRENT_STRATEGIES } from './concurrent-strategies';\r\nimport { RxCustomStrategyCredentials, RxDefaultStrategyNames, RxStrategyNames } from './model';\r\nimport { RX_NATIVE_STRATEGIES } from './native-strategies';\r\n\r\nexport interface RxAngularConfig<T extends string> {\r\n  primaryStrategy?: RxStrategyNames<T>;\r\n  customStrategies?: RxCustomStrategyCredentials<T>;\r\n  patchZone?: boolean;\r\n}\r\n\r\nexport const RX_ANGULAR_CONFIG = new InjectionToken<RxAngularConfig<string>>(\r\n  'rx-angular-config'\r\n);\r\nexport const RX_ANGULAR_DEFAULTS: Required<RxAngularConfig<RxDefaultStrategyNames>> = {\r\n  primaryStrategy: 'normal',\r\n  customStrategies: {\r\n    ...RX_NATIVE_STRATEGIES,\r\n    ...RX_CONCURRENT_STRATEGIES\r\n  },\r\n  patchZone: true\r\n};\r\nexport function mergeDefaultConfig<T extends string>(\r\n  cfg?: RxAngularConfig<T>\r\n): Required<RxAngularConfig<T | RxDefaultStrategyNames>> {\r\n  const custom: RxAngularConfig<T> = cfg\r\n                                     ? cfg\r\n                                     : ({\r\n      customStrategies: {}\r\n    } as any);\r\n  return {\r\n    ...RX_ANGULAR_DEFAULTS,\r\n    ...custom,\r\n    customStrategies: {\r\n      ...custom.customStrategies,\r\n      ...RX_ANGULAR_DEFAULTS.customStrategies\r\n    }\r\n  };\r\n}\r\n","import { RxCoalescingOptions } from '@rx-angular/cdk/coalescing';\r\nimport { switchMap, take } from 'rxjs/operators';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { RxRenderWork, RxStrategyCredentials } from './model';\r\n\r\n/**\r\n * @internal\r\n *\r\n * @param value\r\n * @param strategy\r\n * @param workFactory\r\n * @param options\r\n */\r\nexport function onStrategy<T>(\r\n  value: T,\r\n  strategy: RxStrategyCredentials,\r\n  workFactory: (\r\n    value: T,\r\n    work: RxRenderWork,\r\n    options: RxCoalescingOptions\r\n  ) => void,\r\n  options: RxCoalescingOptions = {}\r\n): Observable<T> {\r\n  let error: Error;\r\n  return new Observable<T>(subscriber => {\r\n    subscriber.next(value);\r\n  }).pipe(\r\n    strategy.behavior(() => {\r\n      try {\r\n        workFactory(value, strategy.work, options);\r\n      } catch (e) {\r\n        error = e;\r\n      }\r\n    }, options.scope || {}),\r\n    switchMap(() =>\r\n      error ? throwError([error, value]) : of(value)\r\n    ),\r\n    take(1)\r\n  );\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Inject,\r\n  Injectable,\r\n  NgZone,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {\r\n  BehaviorSubject,\r\n  fromEvent,\r\n  MonoTypeOperatorFunction,\r\n  Observable,\r\n} from 'rxjs';\r\nimport { map, shareReplay, switchMap, takeUntil } from 'rxjs/operators';\r\nimport { mergeDefaultConfig, RX_ANGULAR_CONFIG, RxAngularConfig } from './config';\r\nimport { onStrategy } from './onStrategy';\r\nimport { RxStrategies, RxStrategyCredentials, RxStrategyNames, ScheduleOnStrategyOptions } from './model';\r\n\r\n/**\r\n * @description\r\n * RxStrategyProvider is a wrapper service that you can use to consume strategies and schedule your code execution.\r\n *\r\n * @example\r\n * Component({\r\n *   selector: 'app-service-communicator',\r\n *   template: ``\r\n * });\r\n * export class ServiceCommunicationComponent {\r\n *   private currentUserSettings;\r\n *\r\n *   constructor(\r\n *     private strategyProvider: RxStrategyProvider,\r\n *     private userService: UserService,\r\n *     private backgroundSync: BackgroundSyncService\r\n *   ) {\r\n *     this.userService.fetchCurrentUserSettings\r\n *       .pipe(\r\n *         tap(settings => (this.currentUserSettings = settings)),\r\n *         this.strategyProvider.scheduleWith(\r\n *           settings => this.backgroundSync.openConnection(settings),\r\n *           { strategy: 'idle' }\r\n *         )\r\n *       )\r\n *       .subscribe();\r\n *   }\r\n * }\r\n *\r\n * @docsCategory RxStrategyProvider\r\n * @docsPage RxStrategyProvider\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class RxStrategyProvider<T extends string = string> {\r\n  private _strategies$ = new BehaviorSubject<RxStrategies<T>>(undefined);\r\n  private _primaryStrategy$ = new BehaviorSubject<\r\n    RxStrategyCredentials<RxStrategyNames<T>>\r\n  >(undefined);\r\n\r\n  private _cfg: Required<RxAngularConfig<T>>;\r\n\r\n  /**\r\n   * @description\r\n   * Returns current `RxAngularConfig` used in the service.\r\n   * Config includes:\r\n   * - strategy that currently in use - `primaryStrategy`\r\n   * - array of custom user defined strategies - `customStrategies`\r\n   * - setting that is responsible for running in our outside of the zone.js - `patchZone`\r\n   */\r\n  get config(): Required<RxAngularConfig<T>> {\r\n    return this._cfg;\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Returns object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\r\n   */\r\n  get strategies(): RxStrategies<T> {\r\n    return this._strategies$.getValue();\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Returns an array of strategy names available in the service.\r\n   */\r\n  get strategyNames(): string[] {\r\n    return Object.values(this.strategies).map((s) => s.name);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Returns current strategy of the service.\r\n   */\r\n  get primaryStrategy(): RxStrategyNames<T> {\r\n    return this._primaryStrategy$.getValue().name;\r\n  }\r\n\r\n\r\n  /**\r\n   * @description\r\n   * Set's the strategy that will be used by the service.\r\n   */\r\n  set primaryStrategy(strategyName: RxStrategyNames<T>) {\r\n    this._primaryStrategy$.next(\r\n      <RxStrategyCredentials<RxStrategyNames<T>>>this.strategies[strategyName]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Current strategy of the service as an observable.\r\n   */\r\n  readonly primaryStrategy$: Observable<RxStrategyCredentials> =\r\n    this._primaryStrategy$.asObservable();\r\n\r\n  /**\r\n   * @description\r\n   * Returns observable of an object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\r\n   */\r\n  readonly strategies$ = this._strategies$.asObservable();\r\n\r\n  /**\r\n   * @description\r\n   * Returns an observable of an array of strategy names available in the service.\r\n   */\r\n  readonly strategyNames$ = this.strategies$.pipe(\r\n    map((strategies) => Object.values(strategies).map((s) => s.name)),\r\n    shareReplay({ bufferSize: 1, refCount: true })\r\n  );\r\n\r\n /**\r\n  * @internal\r\n  */\r\n  constructor(\r\n    @Optional()\r\n    @Inject(RX_ANGULAR_CONFIG)\r\n    cfg: RxAngularConfig<T>\r\n  ) {\r\n    this._cfg = mergeDefaultConfig(cfg);\r\n    this._strategies$.next(this._cfg.customStrategies as any);\r\n    this.primaryStrategy = this.config.primaryStrategy;\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Allows to schedule a work inside rxjs `pipe`. Accepts the work and configuration options object.\r\n   * - work is any function that should be executed\r\n   * - (optional) options includes strategy, patchZone and scope\r\n   *\r\n   * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\r\n   * Scope setup is useful if your work is some of the methods of `ChangeDetectorRef`. Only one change detection will be triggered if you have multiple schedules of change detection methods and scope is set to `this`.\r\n   *\r\n   * @example\r\n   * myObservable$.pipe(\r\n   *    this.strategyProvider.scheduleWith(() => myWork(), {strategy: 'idle', patchZone: false})\r\n   * ).subscribe();\r\n   *\r\n   * @return MonoTypeOperatorFunction<R>\r\n   */\r\n  scheduleWith<R>(\r\n    work: (v?: R) => void,\r\n    options?: ScheduleOnStrategyOptions\r\n  ): MonoTypeOperatorFunction<R> {\r\n    const strategy = this.strategies[options?.strategy || this.primaryStrategy];\r\n    const scope = options?.scope || {};\r\n    const _work = getWork(work, options?.patchZone);\r\n    return (o$) =>\r\n      o$.pipe(\r\n        switchMap((v) =>\r\n          onStrategy(\r\n            v,\r\n            strategy,\r\n            (_v) => {\r\n              _work(_v);\r\n            },\r\n            { scope }\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Allows to schedule a work as an observable. Accepts the work and configuration options object.\r\n   * - work is any function that should be executed\r\n   * - (optional) options includes strategy, patchZone and scope\r\n   *\r\n   * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\r\n   * Scope setup is especially useful if you provide work that will trigger a change detection.\r\n   *\r\n   * @example\r\n   * this.strategyProvider.schedule(() => myWork(), {strategy: 'idle', patchZone: false}).subscribe();\r\n   *\r\n   * @return Observable<R>\r\n   */\r\n  schedule<R>(\r\n    work: () => R,\r\n    options?: ScheduleOnStrategyOptions\r\n  ): Observable<R> {\r\n    const strategy = this.strategies[options?.strategy || this.primaryStrategy];\r\n    const scope = options?.scope || {};\r\n    const _work = getWork(work, options?.patchZone);\r\n    let returnVal: R;\r\n    return onStrategy(\r\n      null,\r\n      strategy,\r\n      () => {\r\n        returnVal = _work();\r\n      },\r\n      { scope }\r\n    ).pipe(map(() => returnVal));\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Allows to schedule a change detection cycle. Accepts the ChangeDetectorRef and configuration options object.\r\n   * Options include:\r\n   * - afterCD which is the work that should be executed after change detection cycle.\r\n   * - abortCtrl is an AbortController that you can use to cancel the scheduled cycle.\r\n   *\r\n   * @example\r\n   * this.strategyProvider.scheduleCd(this.changeDetectorRef, {afterCD: myWork()});\r\n   *\r\n   * @return AbortController\r\n   */\r\n  scheduleCD(\r\n    cdRef: ChangeDetectorRef,\r\n    options?: ScheduleOnStrategyOptions & {\r\n      afterCD?: () => void;\r\n      abortCtrl?: AbortController;\r\n    }\r\n  ): AbortController {\r\n    const strategy = this.strategies[options?.strategy || this.primaryStrategy];\r\n    const scope = options?.scope || cdRef;\r\n    const abC = options?.abortCtrl || new AbortController();\r\n    const work = getWork(() => {\r\n      strategy.work(cdRef, scope);\r\n      if (options?.afterCD) {\r\n        options.afterCD();\r\n      }\r\n    }, options.patchZone);\r\n    onStrategy(\r\n      null,\r\n      strategy,\r\n      () => {\r\n        work();\r\n      },\r\n      { scope }\r\n    )\r\n      .pipe(takeUntil(fromEvent(abC.signal, 'abort')))\r\n      .subscribe();\r\n    return abC;\r\n  }\r\n}\r\n\r\nfunction getWork<T>(\r\n  work: (args?: any) => T,\r\n  patchZone?: false | NgZone\r\n): (args?: any) => T {\r\n  let _work = work;\r\n  if (patchZone) {\r\n    _work = (args?: any) => patchZone.run(() => work(args));\r\n  }\r\n  return _work;\r\n}\r\n","import { Observable, ReplaySubject } from 'rxjs';\r\nimport { map, share, startWith, switchAll } from 'rxjs/operators';\r\n\r\nimport { coerceAllFactory } from '@rx-angular/cdk/coercing';\r\nimport { RxCustomStrategyCredentials, RxStrategyCredentials } from './model';\r\n\r\nexport interface RxStrategyHandler {\r\n  strategy$: Observable<RxStrategyCredentials>;\r\n  next(name: string | Observable<string>): void;\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * A factory function returning an object to handle the process of turning strategy names into `RxStrategyCredentials`\r\n * You can next a strategy name as Observable or string and get an Observable of `RxStrategyCredentials`\r\n *\r\n * @param defaultStrategyName\r\n * @param strategies\r\n */\r\nexport function strategyHandling(\r\n  defaultStrategyName: string,\r\n  strategies: RxCustomStrategyCredentials<string>\r\n): RxStrategyHandler {\r\n  const hotFlattened = coerceAllFactory<string>(\r\n    () => new ReplaySubject<string | Observable<string>>(1),\r\n    switchAll()\r\n  );\r\n  return {\r\n    strategy$: hotFlattened.values$.pipe(\r\n      startWith(defaultStrategyName),\r\n      nameToStrategyCredentials(strategies, defaultStrategyName),\r\n      share()\r\n    ) as Observable<RxStrategyCredentials>,\r\n    next(name: string | Observable<string>) {\r\n      hotFlattened.next(name);\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction nameToStrategyCredentials(\r\n  strategies: RxCustomStrategyCredentials<string>,\r\n  defaultStrategyName: string\r\n) {\r\n  return (\r\n    o$: Observable<string | null | undefined>\r\n  ): Observable<RxStrategyCredentials> =>\r\n    o$.pipe(\r\n      map((name) =>\r\n        name && Object.keys(strategies).includes(name)\r\n          ? strategies[name]\r\n          : strategies[defaultStrategyName]\r\n      )\r\n    );\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["forceFrameRate","filter","coalescingManager","switchMap","Observable","scheduleCallback","cancelCallback","mapTo","requestAnimationFrame","cancelAnimationFrame","coalesceWith","tap","markDirty","InjectionToken","throwError","of","take","BehaviorSubject","map","shareReplay","takeUntil","fromEvent","Injectable","Optional","Inject","coerceAllFactory","ReplaySubject","switchAll","startWith","share"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBAA,4BAAc,CAAC,EAAE,CAAC,CAAC;eAIX,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,aAAa,EAAE,GAAA,SAC5B,UAAC,IAAS,EAAE,KAAU;QAC9B,OAAO,UAAC,EAAE,IACR,OAAA,EAAE,CAAC,IAAI,CACL,eAAe,CAAC,IAAI,EAAE,EAAE,QAAQ,sBAA4B,KAAK,OAAA,EAAE,CAAC,CACrE,GAAA,CAAC;IACN,CAAC;IARH,IAAM,kBAAkB,GAA0B;QAChD,IAAI,EAAE,YAAY;QAClB,IAAI,MAAkC;QACtC,QAAQ,MAKP;KACF,CAAC;eAIM,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,aAAa,EAAE,GAAA,SAC5B,UAAC,IAAS,EAAE,KAAU;QAC9B,OAAO,UAAC,EAAE,IACR,OAAA,EAAE,CAAC,IAAI,CACL,eAAe,CAAC,IAAI,EAAE;YACpB,QAAQ;YACR,KAAK,OAAA;SACN,CAAC,CACH,GAAA,CAAC;IACN,CAAC;IAXH,IAAM,iBAAiB,GAA0B;QAC/C,IAAI,EAAE,WAAW;QACjB,IAAI,MAAkC;QACtC,QAAQ,MAQP;KACF,CAAC;eAIM,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,aAAa,EAAE,GAAA,SAC5B,UAAC,IAAS,EAAE,KAAU;QAC9B,OAAO,UAAC,EAAE,IACR,OAAA,EAAE,CAAC,IAAI,CACL,eAAe,CAAC,IAAI,EAAE;YACpB,QAAQ;YACR,KAAK,OAAA;SACN,CAAC,CACH,GAAA,CAAC;IACN,CAAC;IAXH,IAAM,oBAAoB,GAA0B;QAClD,IAAI,EAAE,cAAc;QACpB,IAAI,MAAkC;QACtC,QAAQ,MAQP;KACF,CAAC;eAIM,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,aAAa,EAAE,GAAA,SAC5B,UAAC,IAAS,EAAE,KAAU;QAC9B,OAAO,UAAC,EAAE,IACR,OAAA,EAAE,CAAC,IAAI,CACL,eAAe,CAAC,IAAI,EAAE,EAAE,QAAQ,0BAAgC,KAAK,OAAA,EAAE,CAAC,CACzE,GAAA,CAAC;IACN,CAAC;IARH,IAAM,cAAc,GAA0B;QAC5C,IAAI,EAAE,QAAQ;QACd,IAAI,MAAkC;QACtC,QAAQ,MAKP;KACF,CAAC;eAIM,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,aAAa,EAAE,GAAA,OAC5B,UAAC,IAAS,EAAE,KAAU;QAC9B,OAAO,UAAC,EAAE,IACR,OAAA,EAAE,CAAC,IAAI,CACL,eAAe,CAAC,IAAI,EAAE,EAAE,QAAQ,uBAA6B,KAAK,OAAA,EAAE,CAAC,CACtE,GAAA,CAAC;IACN,CAAC;IARH,IAAM,WAAW,GAA0B;QACzC,IAAI,EAAE,KAAK;QACX,IAAI,MAAkC;QACtC,QAAQ,IAKP;KACF,CAAC;cAIM,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,aAAa,EAAE,GAAA,QAC5B,UAAC,IAAS,EAAE,KAAU;QAC9B,OAAO,UAAC,EAAE,IACR,OAAA,EAAE,CAAC,IAAI,CACL,eAAe,CAAC,IAAI,EAAE,EAAE,QAAQ,wBAA8B,KAAK,OAAA,EAAE,CAAC,CACvE,GAAA,CAAC;IACN,CAAC;IARH,IAAM,YAAY,GAA0B;QAC1C,IAAI,EAAE,MAAM;QACZ,IAAI,KAAkC;QACtC,QAAQ,KAKP;KACF,CAAC;IAEF,SAAS,eAAe,CACtB,IAA8B,EAC9B,OAIC;QAED,OAAO,UAAC,EAAiB,IACvB,OAAA,EAAE,CAAC,IAAI,CACLC,gBAAM,CAAC,cAAM,OAAA,CAACC,4BAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,GAAA,CAAC,EAC5DC,mBAAS,CAAC,UAAC,CAAC,IACV,OAAA,IAAIC,eAAU,CAAI,UAAC,UAAU;YAC3BF,4BAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACrC,IAAM,IAAI,GAAGG,0BAAgB,CAC3B,OAAO,CAAC,QAAQ,EAChB;gBACE,IAAI,EAAE,CAAC;gBACPH,4BAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACxC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACpB,EACD,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CACzB,CAAC;YACF,OAAO;gBACLA,4BAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACxCI,wBAAc,CAAC,IAAI,CAAC,CAAC;aACtB,CAAC;SACH,CAAC,CAAC,IAAI,CAACC,eAAK,CAAC,CAAC,CAAC,CAAC,GAAA,CAClB,CACF,GAAA,CAAC;IACN,CAAC;QAIY,wBAAwB,GAA2B;QAC9D,UAAU,EAAE,kBAAkB;QAC9B,SAAS,EAAE,iBAAiB;QAC5B,YAAY,EAAE,oBAAoB;QAClC,MAAM,EAAE,cAAc;QACtB,GAAG,EAAE,WAAW;QAChB,IAAI,EAAE,YAAY;;;ICxHpB,IAAM,kBAAkB,GAAG,cACzB,OAAA,IAAIH,eAAU,CAAS,UAAC,UAAU;QAChC,IAAM,EAAE,GAAGI,8BAAqB,CAAC;YAC/B,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnB,UAAU,CAAC,QAAQ,EAAE,CAAC;SACvB,CAAC,CAAC;QACH,OAAO;YACLC,6BAAoB,CAAC,EAAE,CAAC,CAAC;SAC1B,CAAC;IACJ,CAAC,CAAC,GAAA,CAAC;;aAIG,UAAC,KAAK,EAAE,CAAC,EAAE,YAAY;QAC3B,KAAK,CAAC,aAAa,EAAE,CAAC;IACxB,CAAC,OAEC,UAAC,IAAwB,EAAE,KAA8B,IAAK,OAAA,UAAC,EAAE,IAC/D,OAAA,EAAE,CAAC,IAAI,CACLC,uBAAY,CAAC,kBAAkB,EAAE,EAAE,KAAK,CAAC,EACzCC,aAAG,CAAC,cAAM,OAAA,IAAI,EAAE,GAAA,CAAC,CAClB,GAAA,GAAA;IAVP,IAAM,gBAAgB,GAA0B;QAC9C,IAAI,EAAE,OAAO;QACb,IAAI,IAEH;QACD,QAAQ,IAKH;KACN,CAAC;aAIM,UAAC,CAAC,EAAE,OAAO,IAAK,OAAAC,aAAS,CAAC,OAAO,CAAC,GAAA,OAC9B,UAAC,IAAS,IAAK,OAAA,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,IAAI,CAACD,aAAG,CAAC,cAAM,OAAA,IAAI,EAAE,GAAA,CAAC,CAAC,GAAA,GAAA;IAH7D,IAAM,iBAAiB,GAA0B;QAC/C,IAAI,EAAE,QAAQ;QACd,IAAI,IAAoC;QACxC,QAAQ,IAAmD;KAC5D,CAAC;aAIM,cAAM,OAAA,KAAK,CAAC,GAAA,OACR,cAAM,OAAA,UAAC,EAAE,IAAK,OAAA,EAAE,GAAA,GAAA;IAH5B,IAAM,eAAe,GAA0B;QAC7C,IAAI,EAAE,MAAM;QACZ,IAAI,IAAc;QAClB,QAAQ,IAAkB;KAC3B,CAAC;aAIM,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,YAAY,EAAE,GAAA,OAC3B,UAAC,IAAS,IAAK,OAAA,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,IAAI,CAACA,aAAG,CAAC,cAAM,OAAA,IAAI,EAAE,GAAA,CAAC,CAAC,GAAA,GAAA;IAH7D,IAAM,iBAAiB,GAA0B;QAC/C,IAAI,EAAE,QAAQ;QACd,IAAI,IAAiC;QACrC,QAAQ,IAAmD;KAC5D,CAAC;QAIW,oBAAoB,GAAuB;QACtD,MAAM,EAAE,iBAAiB;QACzB,MAAM,EAAE,iBAAiB;QACzB,IAAI,EAAE,eAAe;QACrB,KAAK,EAAE,gBAAgB;;;QC/CZ,iBAAiB,GAAG,IAAIE,iBAAc,CACjD,mBAAmB,EACnB;IACK,IAAM,mBAAmB,GAAsD;QACpF,eAAe,EAAE,QAAQ;QACzB,gBAAgB,kCACX,oBAAoB,GACpB,wBAAwB,CAC5B;QACD,SAAS,EAAE,IAAI;KAChB,CAAC;aACc,kBAAkB,CAChC,GAAwB;QAExB,IAAM,MAAM,GAAuB,GAAG;cACD,GAAG;cACF;gBAClC,gBAAgB,EAAE,EAAE;aACb,CAAC;QACZ,qDACK,mBAAmB,GACnB,MAAM,KACT,gBAAgB,kCACX,MAAM,CAAC,gBAAgB,GACvB,mBAAmB,CAAC,gBAAgB,KAEzC;IACJ;;ICjCA;;;;;;;;aAQgB,UAAU,CACxB,KAAQ,EACR,QAA+B,EAC/B,WAIS,EACT,OAAiC;QAAjC,wBAAA,EAAA,YAAiC;QAEjC,IAAI,KAAY,CAAC;QACjB,OAAO,IAAIT,eAAU,CAAI,UAAA,UAAU;YACjC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC,IAAI,CACL,QAAQ,CAAC,QAAQ,CAAC;YAChB,IAAI;gBACF,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aAC5C;YAAC,OAAO,CAAC,EAAE;gBACV,KAAK,GAAG,CAAC,CAAC;aACX;SACF,EAAE,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,EACvBD,mBAAS,CAAC,cACR,OAAA,KAAK,GAAGW,eAAU,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,GAAGC,OAAE,CAAC,KAAK,CAAC,GAAA,CAC/C,EACDC,cAAI,CAAC,CAAC,CAAC,CACR,CAAC;IACJ;;ICrBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAiHE,4BAGE,GAAuB;YAlFjB,iBAAY,GAAG,IAAIC,oBAAe,CAAkB,SAAS,CAAC,CAAC;YAC/D,sBAAiB,GAAG,IAAIA,oBAAe,CAE7C,SAAS,CAAC,CAAC;;;;;YAuDJ,qBAAgB,GACvB,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;;;;;YAM/B,gBAAW,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;;;;;YAM/C,mBAAc,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAC7CC,aAAG,CAAC,UAAC,UAAU,IAAK,OAAA,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,GAAA,CAAC,GAAA,CAAC,EACjEC,qBAAW,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAC/C,CAAC;YAUA,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;YACpC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAuB,CAAC,CAAC;YAC1D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;SACpD;QAxED,sBAAI,sCAAM;;;;;;;;;iBAAV;gBACE,OAAO,IAAI,CAAC,IAAI,CAAC;aAClB;;;WAAA;QAMD,sBAAI,0CAAU;;;;;iBAAd;gBACE,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;aACrC;;;WAAA;QAMD,sBAAI,6CAAa;;;;;iBAAjB;gBACE,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,GAAA,CAAC,CAAC;aAC1D;;;WAAA;QAMD,sBAAI,+CAAe;;;;;iBAAnB;gBACE,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC;aAC/C;;;;;iBAOD,UAAoB,YAAgC;gBAClD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACkB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CACzE,CAAC;aACH;;;WAXA;;;;;;;;;;;;;;;;;QAgED,yCAAY,GAAZ,UACE,IAAqB,EACrB,OAAmC;YAEnC,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,IAAI,CAAC,eAAe,CAAC,CAAC;YAC5E,IAAM,KAAK,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,KAAI,EAAE,CAAC;YACnC,IAAM,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,CAAC;YAChD,OAAO,UAAC,EAAE,IACR,OAAA,EAAE,CAAC,IAAI,CACLhB,mBAAS,CAAC,UAAC,CAAC,IACV,OAAA,UAAU,CACR,CAAC,EACD,QAAQ,EACR,UAAC,EAAE;gBACD,KAAK,CAAC,EAAE,CAAC,CAAC;aACX,EACD,EAAE,KAAK,OAAA,EAAE,CACV,GAAA,CACF,CACF,GAAA,CAAC;SACL;;;;;;;;;;;;;;;QAgBD,qCAAQ,GAAR,UACE,IAAa,EACb,OAAmC;YAEnC,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,IAAI,CAAC,eAAe,CAAC,CAAC;YAC5E,IAAM,KAAK,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,KAAI,EAAE,CAAC;YACnC,IAAM,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,CAAC;YAChD,IAAI,SAAY,CAAC;YACjB,OAAO,UAAU,CACf,IAAI,EACJ,QAAQ,EACR;gBACE,SAAS,GAAG,KAAK,EAAE,CAAC;aACrB,EACD,EAAE,KAAK,OAAA,EAAE,CACV,CAAC,IAAI,CAACe,aAAG,CAAC,cAAM,OAAA,SAAS,GAAA,CAAC,CAAC,CAAC;SAC9B;;;;;;;;;;;;;QAcD,uCAAU,GAAV,UACE,KAAwB,EACxB,OAGC;YAED,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,IAAI,CAAC,eAAe,CAAC,CAAC;YAC5E,IAAM,KAAK,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,KAAI,KAAK,CAAC;YACtC,IAAM,GAAG,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,KAAI,IAAI,eAAe,EAAE,CAAC;YACxD,IAAM,IAAI,GAAG,OAAO,CAAC;gBACnB,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBAC5B,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,EAAE;oBACpB,OAAO,CAAC,OAAO,EAAE,CAAC;iBACnB;aACF,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;YACtB,UAAU,CACR,IAAI,EACJ,QAAQ,EACR;gBACE,IAAI,EAAE,CAAC;aACR,EACD,EAAE,KAAK,OAAA,EAAE,CACV;iBACE,IAAI,CAACE,mBAAS,CAACC,cAAS,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;iBAC/C,SAAS,EAAE,CAAC;YACf,OAAO,GAAG,CAAC;SACZ;;;;;;gBAxMFC,aAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;;;;;;;gDAkF7BC,WAAQ,YACRC,SAAM,SAAC,iBAAiB;;IAwH7B,SAAS,OAAO,CACd,IAAuB,EACvB,SAA0B;QAE1B,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,SAAS,EAAE;YACb,KAAK,GAAG,UAAC,IAAU,IAAK,OAAA,SAAS,CAAC,GAAG,CAAC,cAAM,OAAA,IAAI,CAAC,IAAI,CAAC,GAAA,CAAC,GAAA,CAAC;SACzD;QACD,OAAO,KAAK,CAAC;IACf;;IC3PA;;;;;;;;;aASgB,gBAAgB,CAC9B,mBAA2B,EAC3B,UAA+C;QAE/C,IAAM,YAAY,GAAGC,yBAAgB,CACnC,cAAM,OAAA,IAAIC,kBAAa,CAA8B,CAAC,CAAC,GAAA,EACvDC,mBAAS,EAAE,CACZ,CAAC;QACF,OAAO;YACL,SAAS,EAAE,YAAY,CAAC,OAAO,CAAC,IAAI,CAClCC,mBAAS,CAAC,mBAAmB,CAAC,EAC9B,yBAAyB,CAAC,UAAU,EAAE,mBAAmB,CAAC,EAC1DC,eAAK,EAAE,CAC6B;YACtC,IAAI,YAAC,IAAiC;gBACpC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACzB;SACF,CAAC;IACJ,CAAC;IAED;;;IAGA,SAAS,yBAAyB,CAChC,UAA+C,EAC/C,mBAA2B;QAE3B,OAAO,UACL,EAAyC,IAEzC,OAAA,EAAE,CAAC,IAAI,CACLX,aAAG,CAAC,UAAC,IAAI,IACP,OAAA,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;cAC1C,UAAU,CAAC,IAAI,CAAC;cAChB,UAAU,CAAC,mBAAmB,CAAC,GAAA,CACpC,CACF,GAAA,CAAC;IACN;;ICzDA;;;;;;;;;;;;;;;;;"}