import { ChangeDetectorRef, Component, EmbeddedViewRef, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import { Observable, OperatorFunction } from 'rxjs';
import { MonoTypeOperatorFunction } from 'rxjs';
import { RxStrategyCredentials } from '@rx-angular/cdk/render-strategies';
export declare type TNode = any;
/**
 * @internal
 *
 * Returns the TNode of the passed node form TVIEW of passed cdRef
 *
 * @param cdRef
 * @param native
 */
export declare function getTNode(cdRef: ChangeDetectorRef, native: Node): TNode;
/**
 * @internal
 *
 * Returns a set of references to parent views
 *
 *
 * @param cdRef
 * @param tNode
 */
export declare function extractProjectionParentViewSet(cdRef: ChangeDetectorRef, tNode: TNode): Set<Type<Component>>;
export declare function extractProjectionViews(cdRef: ChangeDetectorRef, tNode: TNode): Type<any>[];
/**
 * A side effect operator similar to `tap` but with a static logic
 *
 *
 *
 * @param cdRef
 * @param tNode
 * @param strategy$
 */
export declare function renderProjectionParents(cdRef: ChangeDetectorRef, tNode: TNode, strategy$: Observable<RxStrategyCredentials>): OperatorFunction<any, any>;
/**
 * @internal
 * creates an embeddedViewRef
 *
 * @param viewContainerRef
 * @param templateRef
 * @param context
 * @param index
 * @return EmbeddedViewRef<C>
 */
export declare function createEmbeddedView<C>(viewContainerRef: ViewContainerRef, templateRef: TemplateRef<C>, context: C, index?: number): EmbeddedViewRef<C>;
/**
 * @internal
 *
 * A factory function returning an object to handle `TemplateRef`'s.
 * You can add and get a `TemplateRef`.
 *
 */
export declare function templateHandling<N, C>(viewContainerRef: ViewContainerRef): {
    add(name: N, templateRef: TemplateRef<C>): void;
    get(name: N): TemplateRef<C>;
    createEmbeddedView(name: N, context?: C, index?: number): EmbeddedViewRef<C>;
};
/**
 * @internal
 *
 * A side effect operator similar to `tap` but with a static internal logic.
 * It calls detect changes on the 'VirtualParent' and the injectingViewCdRef.
 *
 * @param tNode
 * @param injectingViewCdRef
 * @param strategy
 * @param notifyNeeded
 */
export declare function notifyAllParentsIfNeeded<T>(tNode: TNode, injectingViewCdRef: ChangeDetectorRef, strategy: RxStrategyCredentials, notifyNeeded: () => boolean): MonoTypeOperatorFunction<T>;
/**
 * @internal
 *
 * returns an Observable executing a side effects for change detection of parents
 *
 * @param injectingViewCdRef
 * @param strategy
 * @param notify
 */
export declare function notifyInjectingParentIfNeeded(injectingViewCdRef: ChangeDetectorRef, strategy: RxStrategyCredentials, notify: boolean): Observable<null>;
/**
 * @internal
 *
 * Returns an array of observables triggering `detectChanges` on the __virtual parent__  (parent of the projected view)
 *
 * @param tNode - is a component that was projected into another component (virtual parent)
 * @param injectingViewCdRef - is needed to get the
 * @param strategy - the strategy to run the change detection
 */
export declare function getVirtualParentNotifications$(tNode: TNode, injectingViewCdRef: ChangeDetectorRef, strategy: RxStrategyCredentials): Observable<unknown>[];
