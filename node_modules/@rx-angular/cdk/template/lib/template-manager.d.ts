import { TemplateRef } from '@angular/core';
import { RxNotification, RxNotificationKind } from '@rx-angular/cdk/notifications';
import { Observable } from 'rxjs';
import { rxBaseTemplateNames, RxRenderAware, RxRenderSettings, RxTemplateSettings, RxViewContext } from './model';
export interface RxTemplateManager<T, C extends RxViewContext<T>, N = rxBaseTemplateNames | string> extends RxRenderAware<T> {
    addTemplateRef: (name: N, templateRef: TemplateRef<C>) => void;
}
/**
 * @internal
 *
 * A factory function that returns a map of projections to turn a notification of a Observable (next, error, complete)
 *
 * @param customNextContext - projection function to provide custom properties as well as override existing
 */
export declare function notificationKindToViewContext<T>(customNextContext: (value: T) => object): RxViewContextMap<T>;
export declare type RxViewContextMap<T> = Record<RxNotificationKind, (value?: any) => Partial<RxViewContext<T>>>;
export declare type RxNotificationTemplateNameMap<T, C, N> = Record<RxNotificationKind, (value?: T, templates?: {
    get: (name: N) => TemplateRef<C>;
}) => N>;
export declare function createTemplateManager<T, C extends RxViewContext<T>, N = rxBaseTemplateNames | string>(config: {
    renderSettings: RxRenderSettings<T, C>;
    templateSettings: RxTemplateSettings<T, C>;
    templateTrigger$?: Observable<RxNotification<unknown>>;
    notificationToTemplateName: RxNotificationTemplateNameMap<T, C, N>;
}): RxTemplateManager<T, C, N>;
