import { Observable } from 'rxjs';
/**
 * Type to specify an object of observables
 */
export declare type ObservableMap = Record<string, Observable<any>>;
/**
 * Type to map `ObservableMap` to a static record type
 * the 'in' syntax forces the type specification by key
 */
export declare type ObservableAccumulation<T extends ObservableMap> = {
    [K in keyof T]: ExtractObservableValue<T[K]>;
};
/**
 * This type avoids empty objects
 */
export declare type NotEmpty<T, U = {
    [K in keyof T]: Pick<T, K>;
}> = Partial<T> & U[keyof U];
export declare type ExtractObservableValue<T> = T extends Observable<infer R> ? R : never;
export declare type PropName<T> = keyof T;
export declare type PropType<T> = T[PropName<T>];
/**
 * Typed reducer function for the `Array#reduce` method.
 */
export declare type ArrayReducerFn<T extends Record<string, any>> = (acc: T, cur?: PropType<T>, idx?: number) => T;
